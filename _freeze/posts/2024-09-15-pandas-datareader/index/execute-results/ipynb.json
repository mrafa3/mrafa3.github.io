{
  "hash": "6a1abc6f75e47222067e3e7debabe586",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Using Python to fetch data from the Federal Reserve and World Bank\"\ndescription: \"A look at what the American Community Survey tells us about trends in remote work\"\nauthor:\n  - name: Mickey Rafa\n    url: https://mrafa3.github.io/\n    #orcid: 0000-0002-5300-3075\ndate: 09-15-2024\ncategories: [R, tidyverse, tidycensus, mapping, api] # self-defined categories\n#citation: \n # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ \ncode-annotations: hover\nformat: ipynb\n# image: plot_denver_child_insured_2022.png\ndraft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\neditor: \n  markdown: \n    wrap: 72\n---\n\n# Introduction\n\nThe `pandas-datareader` package is a powerful tool for easily accessing financial and economic data through various APIs. In this post, we'll explore how to use it to fetch data from FRED (Federal Reserve Economic Data), the World Bank, and Yahoo Finance for S&P500 data.\n\nFirst, install the packages:\n\n## Setup\n\n::: {#fbf1a06c .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport pandas_datareader as pdr\nfrom datetime import datetime\n```\n:::\n\n\n# Fetching Data from FRED\n\nLet's fetch the US GDP data from FRED:\n\n::: {#8ec62ee8 .cell execution_count=2}\n``` {.python .cell-code}\ngdp_data = pdr.get_data_fred('GDP', start='2000-01-01', end=datetime.now())\nprint(gdp_data.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  GDP\nDATE                 \n2000-01-01  10002.179\n2000-04-01  10247.720\n2000-07-01  10318.165\n2000-10-01  10435.744\n2001-01-01  10470.231\n```\n:::\n:::\n\n\n::: {#ceb7eb60 .cell execution_count=3}\n``` {.python .cell-code}\nstart = datetime(2016, 1, 1)\nend = datetime.now()\n\nnasdaq_data = pdr.DataReader('NASDAQ100', 'fred', start, end)\n\nsap_data = pdr.DataReader('SP500', 'fred', start, end)\nprint(nasdaq_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            NASDAQ100\nDATE                 \n2016-01-01        NaN\n2016-01-04    4497.86\n2016-01-05    4484.18\n2016-01-06    4443.99\n2016-01-07    4305.72\n...               ...\n2024-09-04   18921.40\n2024-09-05   18930.33\n2024-09-06   18421.31\n2024-09-09   18660.78\n2024-09-10   18829.14\n\n[2268 rows x 1 columns]\n```\n:::\n:::\n\n\n# Accessing World Bank Data\n\nNow, let's get the population data for the United States from the World Bank:\n\n::: {#a35e8a22 .cell execution_count=4}\n``` {.python .cell-code}\nfrom pandas_datareader import wb\n```\n:::\n\n\n::: {#17743063 .cell execution_count=5}\n``` {.python .cell-code}\nstart = datetime(2005, 1, 1)\nend = datetime(2008, 1, 1)\nindicator_id = 'NY.GDP.PCAP.KD'\n\ngdp_per_capita = wb.download(indicator=indicator_id, start=start, end=end, country=['US', 'CA', 'MX'])\n\nprint(gdp_per_capita)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    NY.GDP.PCAP.KD\ncountry       year                \nCanada        2008    42067.568700\n              2007    42106.872427\n              2006    41663.512305\n              2005    41006.222932\nMexico        2008     9888.139445\n              2007     9920.687841\n              2006     9847.512822\n              2005     9524.742437\nUnited States 2008    53703.962896\n              2007    54152.829265\n              2006    53596.315237\n              2005    52649.571305\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/ck/dmgn8lbx6vl8sl89vlhr0sv00000gn/T/ipykernel_87308/1659781550.py:5: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n  gdp_per_capita = wb.download(indicator=indicator_id, start=start, end=end, country=['US', 'CA', 'MX'])\n```\n:::\n:::\n\n\nWith just a few lines of code, we've accessed data two popular public APIs -- the U.S. Federal Reserve and the World Bank. The pandas-datareader package simplifies the process of fetching data, which makes it a great package to get familiar with.\n\n# Plotting with plotnine\n\nBecause I'm quite comfortable with R's ggplot syntax, I'll demonstrate how the plotnine package can visualize your Python data.\n\n::: {#0053f095 .cell execution_count=6}\n``` {.python .cell-code}\nfrom plotnine import ggplot, aes, geom_line, theme_minimal, labs\n```\n:::\n\n\n::: {#af56ce89 .cell execution_count=7}\n``` {.python .cell-code}\n# Fetch Colorado unemployment rate data\ncolorado_unemployment = pdr.get_data_fred('COUR', start='2016-01-01', end=datetime.now())\n\n# Reset index to make date a column\ncolorado_unemployment = colorado_unemployment.reset_index()\n\nprint(colorado_unemployment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          DATE  COUR\n0   2016-01-01   3.3\n1   2016-02-01   3.3\n2   2016-03-01   3.3\n3   2016-04-01   3.3\n4   2016-05-01   3.3\n..         ...   ...\n98  2024-03-01   3.7\n99  2024-04-01   3.7\n100 2024-05-01   3.8\n101 2024-06-01   3.8\n102 2024-07-01   3.9\n\n[103 rows x 2 columns]\n```\n:::\n:::\n\n\n::: {#99ce023f .cell execution_count=8}\n``` {.python .cell-code}\n# Create the plot\n(ggplot(colorado_unemployment, aes(x='DATE', y='COUR'))\n + geom_line()\n + theme_minimal()\n + labs(title='Colorado Unemployment Rate',\n        x='Date',\n        y='Unemployment Rate (%)')\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-9-output-1.png){}\n:::\n:::\n\n\nThis code snippet does the following:\n\nWe fetch the Colorado unemployment rate data using the FRED series ID 'COUR'.\nWe reset the index to make the date a regular column for plotting.\nUsing plotnine (Python's implementation of ggplot2), we create a line plot of the unemployment rate over time.\nWe add a minimal theme and appropriate labels to our plot.\n\nThe resulting plot will show the trend of Colorado's unemployment rate from 2016 to the present day. This visualization can help identify patterns, seasonal variations, and the impact of major economic events on Colorado's job market.\n\nPlotnine's syntax, similar to R's ggplot2, allows for easy customization and layering of plot elements. You can further enhance this plot by adding vertical lines for recession periods, changing color schemes, or adding annotations for significant events.\n\n::: {#f18ae27f .cell execution_count=9}\n``` {.python .cell-code}\ncpi = pdr.get_data_fred('CPIAUCSL', start=datetime(2016, 1, 1), end=datetime.now()).reset_index()\nprint(cpi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          DATE  CPIAUCSL\n0   2016-01-01   237.652\n1   2016-02-01   237.336\n2   2016-03-01   238.080\n3   2016-04-01   238.992\n4   2016-05-01   239.557\n..         ...       ...\n99  2024-04-01   313.207\n100 2024-05-01   313.225\n101 2024-06-01   313.049\n102 2024-07-01   313.534\n103 2024-08-01   314.121\n\n[104 rows x 2 columns]\n```\n:::\n:::\n\n\n::: {#325a55af .cell execution_count=10}\n``` {.python .cell-code}\n# Create the plot\n(ggplot(cpi, aes(x='DATE', y='CPIAUCSL'))\n + geom_line()\n + theme_minimal()\n + labs(title='Consumer Price Index (CPI)',\n        x='Date',\n        y='CPI')\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-11-output-1.png){}\n:::\n:::\n\n\n# Conclusion\n\nIn this post on Pandas DataReader, I demonstrated:\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.5\n---\n",
    "supporting": [
      "index_files"
    ],
    "filters": []
  }
}
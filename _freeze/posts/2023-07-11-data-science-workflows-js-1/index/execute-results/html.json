{
  "hash": "8a53c790b14fe424c2cfa1616ca6d36d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Science Workflows in Javascript: Part One\"\ndescription: \"This post is from the first session led by Observable HQ\"\nauthor:\n  - name: Mickey Rafa\n    url: https://mrafa3.github.io/\n    #orcid: 0000-0002-5300-3075\ndate: 08-02-2024\ncategories: [Quarto, Javascript] # self-defined categories\n#citation: \n # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ \n#image: map_example.png\ndraft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n# Introduction\n\nData Science Workflows in JavaScript Workshop Series - Session #1\n\nFollow-along notebook\nSession 1 slides\nSession 1 notebook key\n\n**Step 0: Fork this notebook**\n\nPress the Fork button in the upper right of the shared notebook to create your own copy (requires an Observable account). You can follow along without an account in tinker mode, but your work will not be saved.\n\n**Step 1: Quick intro to working in a notebook**\n\nCells and the Add cell menu\nRunning cells\nFiles pane\n\n**Step 2: Attach the data in your notebook**\n\nClick on the link below to download the fiddler crab data from the Environmental Data Initiative Data Portal. The file will be saved as HTL-MAL-FiddlerCrabBodySize.csv.\n\nAttach the file to your notebook using one of the following methods:\n\nOpen the Files pane (paperclip icon) in the top right of the notebook, click the plus sign next to File attachments, then find and choose the HTL-MAL-FiddlerCrabBodySize.csv file you downloaded above.\n\nDrag the file over the Files pane in your notebook to attach it.\n\n**Step 3: Load and take a look at the data**\n\nIn the Files pane, click the \"Insert into notebook\" icon to the right of the file. This will automatically create a new interactive Data table cell, where you can preview the data in tabular form and even do some basic exploration and data wrangling.\n\n\n```{ojs}\ncrabs = FileAttachment(\".//data/HTL-MAR-FiddlerCrabBodySize.csv\").csv({ typed: true })\n```\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ncrabs <- read_csv('.//data/HTL-MAR-FiddlerCrabBodySize.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 392 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Site\ndbl  (7): Latitude, Replicate, carapace_width, MATA, SATA, MATW, SATW\ndate (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\nThere are 9 variables in the Johnson 2019 dataset:\n\n* Date: record date\n* Site: a 3 character site identifier\n* Latitude: the site latitude in degrees\n* Replicate: a number, indicating the crab recorded (30 at each site)\n* carapace_width: crab carapace width, in millimeters\n* MATA: mean annual air temperature in degrees Celsius\n* SATA: standard deviation of annual air temperature in degrees Celsius\n* MATW: mean annual water temperature in degrees Celsius\n* SATW: standard deviation of annual water temperature in degrees Celsius\n\nWhat is crabs? An array of objects. Let's take a look at it outside of the Data table cell to see how that looks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrabs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 392 × 9\n   Date       Latitude Site  Replicate carapace_width  MATA  SATA  MATW  SATW\n   <date>        <dbl> <chr>     <dbl>          <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 2016-07-24       30 GTM           1           12.4  21.8  6.39  24.5  6.12\n 2 2016-07-24       30 GTM           2           14.2  21.8  6.39  24.5  6.12\n 3 2016-07-24       30 GTM           3           14.5  21.8  6.39  24.5  6.12\n 4 2016-07-24       30 GTM           4           12.9  21.8  6.39  24.5  6.12\n 5 2016-07-24       30 GTM           5           12.4  21.8  6.39  24.5  6.12\n 6 2016-07-24       30 GTM           6           13.0  21.8  6.39  24.5  6.12\n 7 2016-07-24       30 GTM           7           10.3  21.8  6.39  24.5  6.12\n 8 2016-07-24       30 GTM           8           11.2  21.8  6.39  24.5  6.12\n 9 2016-07-24       30 GTM           9           12.7  21.8  6.39  24.5  6.12\n10 2016-07-24       30 GTM          11           14.6  21.8  6.39  24.5  6.12\n# ℹ 382 more rows\n```\n\n\n:::\n:::\n\n\n**Step 4: A bit of data wrangling**\n\nThis data is already tidy, but we may want to simplify it a bit more. Here, we will select and rename certain columns in two ways:\n\nRight in the Data table cell (no code)\nIn JavaScript\nThen we’ll do the wrangling in JavaScript:\n\n\n```{ojs}\ncrabsJS = crabs.map((d) => ({\n  lat: d.Latitude,\n  site: d[\"Site \"],\n  sizeMm: d.carapace_width, //You could also mutate right within this map function (such as a unit transformation)\n  airTempC: d.MATA,\n  waterTempC: d.MATW\n}))\n\n// This array map method is like a select and rename function in one\n\n```\n\n\n**Step 5: Exploratory data visualization** \n\nLet’s make some quick exploratory charts with Observable Plot, a JavaScript library for data visualization by the team that built D3. We’ll do this in several ways:\n\nUsing the Chart cell in Observable, then ejecting to JS for customization\nUsing code snippets for Observable Plot\n\nA note on using Observable Plot in our notebooks: a number of JavaScript libraries are automatically available when working in Observable notebooks as recommended libraries in the standard library, including D3, Observable Plot, lodash, and others commonly used on the platform, which is why you don’t need to separately install or load Plot to use it here. In the next section we’ll see how we can load a library that is not automatically available for use in Observable.\n\nChart cell\nFirst, let’s make a histogram of all crab sizes in the dataset. Then, we’ll facet by other variables to see if we can notice any interesting trends. Add a new Chart cell by searching for Chart in the Add cell menu, then choose the variable(s) you want to visualize.\n\n\n```{ojs}\nPlot.plot({\n  x: { label: \"Air Temperature (C)\" },\n  marks: [\n    Plot.dot(crabsJS, {\n      x: \"airTempC\",\n      y: \"sizeMm\",\n      stroke: \"#ff5375\",\n      tip: true\n    })\n  ]\n})\n```\n\n\nObservable Plot snippets\nOpen the Add cell menu, and begin typing \"scatterplot.\" Choose the scatterplot snippet, which will automatically add a new JavaScript cell with some skeleton code for a basic scatterplot that we can update.\n\n**Step 6: Simple linear regression**\n\nWe will use the SimpleLinearRegression method from the ml.js JavaScript library. Since ml.js is not automatically available, we’ll use require to access it in our notebook:\n\n\n```{ojs}\nML = require(\"https://www.lactame.com/lib/ml/6.0.0/ml.min.js\")\n```\n\n\nNow, we have access to the methods in ml.js, including SimpleLinearRegression, which will estimate parameters for a linear model by ordinary least squares.\n\n\n```{ojs}\ncrabsLM = new ML.SimpleLinearRegression(crabsJS.map(d => d.lat), crabsJS.map(d => d.sizeMm))\n```\n\n\nThe slope is 0.485.\n\n**Step 7: Final visualization and summary statement**\n\nTo wrap it up, let’s create a final visualization with a summary statement. We’ll again use Observable Plot to create and customize a chart.\n\n\n```{ojs}\nPlot.plot({\n  marks: [Plot.dot(crabsJS, { x: \"lat\", y: \"sizeMm\", tip: true, fill: \"steelblue\"}),\n         Plot.linearRegressionY(crabsJS, {x:\"lat\", y:\"sizeMm\"}), //adds regression line and conf int\n         Plot.frame()],//adds frame around viz\n  x: {label: \"Latitude\"},\n  y: {label: \"Carapace size (mm)\"}\n})\n```\n\n\n**Step 8: Share your notebook**\n\nThere are a number of ways to share your notebook with others. The easiest is to share the notebook link - that’s right, your notebook is already a live page. At the top of your notebook, click the Share notebook to update the sharing settings, add colleagues as viewers or editors, and even make your own custom URL.\n\nSend along the link, and anyone with permissions (or the public!) can see your work.\n\nToday we learned:\n* How to attach a CSV in an Observable notebook\n* Data table cell to inspect & wrangle data\n* A little data wrangling in JS\n* Chart cell and Observable Plot for quick exploratory data viz\n* Require to load a JavaScript module\n* Simple linear regression in JS with ml.js\n* Creating a final visualization\n* Referring to code outputs in markdown with template literals\n* Sharing a notebook URL\n* Bergmann's Rule!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
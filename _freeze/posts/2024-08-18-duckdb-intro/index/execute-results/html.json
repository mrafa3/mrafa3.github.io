{
  "hash": "b141824331342e5201ffdbbc10ba8ce0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Setting up an EPA air quality database using DuckDB\"\ndescription: \"This post uses the RAQSAPI package to access the EPA API and query the results with DuckDB\"\nauthor:\n  - name: Mickey Rafa\n    url: https://mrafa3.github.io/\n    #orcid: 0000-0002-5300-3075\ndate: 08-18-2024\ncategories: [R, tidyverse, duckdb, environment, sql, api] # self-defined categories\n#citation: \n # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ \nimage: query.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n# Introduction\n\n[DuckDB](https://duckdb.org/why_duckdb#simple) is an in-process SQL database management system designed for fast and efficient data analysis. It's particularly advantageous for data analysts due to its seamless integration with popular programming languages like Python and R, allowing easy querying of large datasets directly from within those environments. DuckDB's columnar storage format and vectorized execution enable high-performance analytics on large datasets without the need for complex setups, making it an ideal choice for exploratory data analysis, interactive queries, and handling structured data efficiently on local machines.\n\nFor this project, I wanted to explore the advantages of using DuckDB in an analysis workflow, using the `duckdb::` package.\n\n# Data\n\nThe `RAQSAPI::` package provides a streamlined interface for accessing air quality data from the U.S. EPA's Air Quality System (AQS) Data Mart API, handling tasks like formatting requests, parsing JSON responses, and managing API rate limits.[^1] It allows users to easily retrieve and analyze large-scale air quality datasets directly within R.\n\n[^1]: CRAN documentation can be found at: https://cran.r-project.org/web/packages/RAQSAPI/vignettes/RAQSAPIvignette.html#:~:text=RAQSAPI%20is%20a%20package%20for,of%20ambient%20air%20pollution%20data.\n\n# Setup\n\n## Libraries \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(duckdb)\nlibrary(RAQSAPI)\n```\n:::\n\n\n## Fetching data from the EPA's Air Quality Service Data Mart API \n\nIf it's your first time accessing the AQS API, you'll need to use the `RAQSAPI::aqs_sign_up()` function, and provide your email address as a string. (Note: when I first set up my credentials, it took about 48 hours to receive the email from their service).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# RAQSAPI::aqs_sign_up(\"abcd@efg.com\")\n```\n:::\n\n\nThen, use the `RAQSAPI::aqs_credentials()` function to provide your username and key.\n\n\n::: {.cell}\n\n:::\n\n\nThe AQS service is rich with a variety of functions and arguments that help you pull exactly what you need. There is **so** much available through their API, and I won't even begin to cover it here. For this demo, I'd like to look at ozone measurements over the last year in Colorado.\n\nSome common arguments that you'll find in `RAQSAPI::` package:  \n\n*  `parameter=`:the specific pollutant that you're interested in. You can feed this a vector of multiple pollutants.[^2]\n*  `bdate=`: start date. If the grain of analysis is daily, the API limits each call to one year of data.\n*  `edate=`: end date.\n*  `stateFIPS` and `county`: FIPS codes for your states or counties (if that's your grain of analysis)\n\n[^2]: See \"parameter code\" here: https://aqs.epa.gov/aqsweb/documents/codetables/methods_all.html\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ozone <- RAQSAPI::aqs_dailysummary_by_county(\n  # '44201' is ozone\n  parameter = '44201',\n  bdate = as.Date('20240101',\n                  format = \"%Y%m%d\"),\n  edate = as.Date('20240810',\n                  format = \"%Y%m%d\"),\n  # '08' is Colorado\n  stateFIPS = '08',\n  # '059' is Jefferson County\n  county = '059'\n)\n```\n:::\n\n\nNow, I'll `dplyr::glimpse()` to see the structure of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ozone %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,440\nColumns: 32\n$ state_code           <chr> \"08\", \"08\", \"08\", \"08\", \"08\", \"08\", \"08\", \"08\", \"…\n$ county_code          <chr> \"059\", \"059\", \"059\", \"059\", \"059\", \"059\", \"059\", …\n$ site_number          <chr> \"0006\", \"0006\", \"0006\", \"0006\", \"0006\", \"0006\", \"…\n$ parameter_code       <chr> \"44201\", \"44201\", \"44201\", \"44201\", \"44201\", \"442…\n$ poc                  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ latitude             <dbl> 39.9128, 39.9128, 39.9128, 39.9128, 39.9128, 39.9…\n$ longitude            <dbl> -105.1886, -105.1886, -105.1886, -105.1886, -105.…\n$ datum                <chr> \"WGS84\", \"WGS84\", \"WGS84\", \"WGS84\", \"WGS84\", \"WGS…\n$ parameter            <chr> \"Ozone\", \"Ozone\", \"Ozone\", \"Ozone\", \"Ozone\", \"Ozo…\n$ sample_duration_code <chr> \"1\", \"W\", \"W\", \"W\", \"1\", \"W\", \"W\", \"W\", \"1\", \"W\",…\n$ sample_duration      <chr> \"1 HOUR\", \"8-HR RUN AVG BEGIN HOUR\", \"8-HR RUN AV…\n$ pollutant_standard   <chr> \"Ozone 1-hour 1979\", \"Ozone 8-Hour 1997\", \"Ozone …\n$ date_local           <chr> \"2024-01-01\", \"2024-01-01\", \"2024-01-01\", \"2024-0…\n$ units_of_measure     <chr> \"Parts per million\", \"Parts per million\", \"Parts …\n$ event_type           <chr> \"No Events\", \"No Events\", \"No Events\", \"No Events…\n$ observation_count    <int> 24, 24, 24, 17, 23, 24, 24, 17, 24, 24, 24, 17, 2…\n$ observation_percent  <dbl> 100, 100, 100, 100, 96, 100, 100, 100, 100, 100, …\n$ validity_indicator   <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\",…\n$ arithmetic_mean      <dbl> 0.041333, 0.041833, 0.041833, 0.042294, 0.033870,…\n$ first_max_value      <dbl> 0.048, 0.046, 0.046, 0.046, 0.046, 0.037, 0.037, …\n$ first_max_hour       <int> 14, 8, 8, 8, 23, 22, 22, 22, 15, 10, 10, 10, 23, …\n$ aqi                  <int> NA, 43, 43, 43, NA, 34, 34, 34, NA, 36, 36, 36, N…\n$ method_code          <chr> \"087\", \"087\", \"087\", \"087\", \"087\", \"087\", \"087\", …\n$ method               <chr> \"INSTRUMENTAL - ULTRA VIOLET ABSORPTION\", \"INSTRU…\n$ local_site_name      <chr> \"ROCKY FLATS-N\", \"ROCKY FLATS-N\", \"ROCKY FLATS-N\"…\n$ site_address         <chr> \"16600 W COLO #128\", \"16600 W COLO #128\", \"16600 …\n$ state                <chr> \"Colorado\", \"Colorado\", \"Colorado\", \"Colorado\", \"…\n$ county               <chr> \"Jefferson\", \"Jefferson\", \"Jefferson\", \"Jefferson…\n$ city                 <chr> \"Not in a city\", \"Not in a city\", \"Not in a city\"…\n$ cbsa_code            <chr> \"19740\", \"19740\", \"19740\", \"19740\", \"19740\", \"197…\n$ cbsa                 <chr> \"Denver-Aurora-Lakewood, CO\", \"Denver-Aurora-Lake…\n$ date_of_last_change  <chr> \"2024-05-24\", \"2024-05-24\", \"2024-05-24\", \"2024-0…\n```\n\n\n:::\n:::\n\n\n## Setting up and querying DuckDB in R\n\n(This section is not meant to be analysis! I'm just demonstrating the setup and querying of the database.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(duckdb(), path = \":memory:\")\n\nozone <- copy_to(con, df_ozone %>% filter(sample_duration_code == '1'), overwrite = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# write our data to duckdb table\ntable_name <- \"ozone\"\nduckdb::dbWriteTable(con, table_name, df_ozone)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con,\n           \"SELECT *\n           FROM ozone\n           limit 10\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   state_code county_code site_number parameter_code poc latitude longitude\n1          08         059        0006          44201   1  39.9128 -105.1886\n2          08         059        0006          44201   1  39.9128 -105.1886\n3          08         059        0006          44201   1  39.9128 -105.1886\n4          08         059        0006          44201   1  39.9128 -105.1886\n5          08         059        0006          44201   1  39.9128 -105.1886\n6          08         059        0006          44201   1  39.9128 -105.1886\n7          08         059        0006          44201   1  39.9128 -105.1886\n8          08         059        0006          44201   1  39.9128 -105.1886\n9          08         059        0006          44201   1  39.9128 -105.1886\n10         08         059        0006          44201   1  39.9128 -105.1886\n   datum parameter sample_duration_code         sample_duration\n1  WGS84     Ozone                    1                  1 HOUR\n2  WGS84     Ozone                    W 8-HR RUN AVG BEGIN HOUR\n3  WGS84     Ozone                    W 8-HR RUN AVG BEGIN HOUR\n4  WGS84     Ozone                    W 8-HR RUN AVG BEGIN HOUR\n5  WGS84     Ozone                    1                  1 HOUR\n6  WGS84     Ozone                    W 8-HR RUN AVG BEGIN HOUR\n7  WGS84     Ozone                    W 8-HR RUN AVG BEGIN HOUR\n8  WGS84     Ozone                    W 8-HR RUN AVG BEGIN HOUR\n9  WGS84     Ozone                    1                  1 HOUR\n10 WGS84     Ozone                    W 8-HR RUN AVG BEGIN HOUR\n   pollutant_standard date_local  units_of_measure event_type observation_count\n1   Ozone 1-hour 1979 2024-01-01 Parts per million  No Events                24\n2   Ozone 8-Hour 1997 2024-01-01 Parts per million  No Events                24\n3   Ozone 8-Hour 2008 2024-01-01 Parts per million  No Events                24\n4   Ozone 8-hour 2015 2024-01-01 Parts per million  No Events                17\n5   Ozone 1-hour 1979 2024-01-02 Parts per million  No Events                23\n6   Ozone 8-Hour 1997 2024-01-02 Parts per million  No Events                24\n7   Ozone 8-Hour 2008 2024-01-02 Parts per million  No Events                24\n8   Ozone 8-hour 2015 2024-01-02 Parts per million  No Events                17\n9   Ozone 1-hour 1979 2024-01-03 Parts per million  No Events                24\n10  Ozone 8-Hour 1997 2024-01-03 Parts per million  No Events                24\n   observation_percent validity_indicator arithmetic_mean first_max_value\n1                  100                  Y        0.041333           0.048\n2                  100                  Y        0.041833           0.046\n3                  100                  Y        0.041833           0.046\n4                  100                  Y        0.042294           0.046\n5                   96                  Y        0.033870           0.046\n6                  100                  Y        0.033500           0.037\n7                  100                  Y        0.033500           0.037\n8                  100                  Y        0.032471           0.037\n9                  100                  Y        0.037000           0.045\n10                 100                  Y        0.036083           0.039\n   first_max_hour aqi method_code                                 method\n1              14  NA         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n2               8  43         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n3               8  43         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n4               8  43         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n5              23  NA         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n6              22  34         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n7              22  34         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n8              22  34         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n9              15  NA         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n10             10  36         087 INSTRUMENTAL - ULTRA VIOLET ABSORPTION\n   local_site_name      site_address    state    county          city cbsa_code\n1    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n2    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n3    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n4    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n5    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n6    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n7    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n8    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n9    ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n10   ROCKY FLATS-N 16600 W COLO #128 Colorado Jefferson Not in a city     19740\n                         cbsa date_of_last_change\n1  Denver-Aurora-Lakewood, CO          2024-05-24\n2  Denver-Aurora-Lakewood, CO          2024-05-24\n3  Denver-Aurora-Lakewood, CO          2024-05-24\n4  Denver-Aurora-Lakewood, CO          2024-05-24\n5  Denver-Aurora-Lakewood, CO          2024-05-24\n6  Denver-Aurora-Lakewood, CO          2024-05-24\n7  Denver-Aurora-Lakewood, CO          2024-05-24\n8  Denver-Aurora-Lakewood, CO          2024-05-24\n9  Denver-Aurora-Lakewood, CO          2024-05-24\n10 Denver-Aurora-Lakewood, CO          2024-05-24\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndbGetQuery(con,\n           \"SELECT\n                sample_duration, \n                local_site_name,\n                AVG(aqi) as avg_aqi,\n                AVG(arithmetic_mean) as avg_arithmetic_mean,\n                AVG(first_max_value) as avg_first_max_value\n           FROM ozone\n           GROUP BY sample_duration, local_site_name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          sample_duration                       local_site_name  avg_aqi\n1                  1 HOUR                         ROCKY FLATS-N       NA\n2 8-HR RUN AVG BEGIN HOUR                         ROCKY FLATS-N 47.24793\n3                  1 HOUR NATIONAL RENEWABLE ENERGY LABS - NREL       NA\n4 8-HR RUN AVG BEGIN HOUR NATIONAL RENEWABLE ENERGY LABS - NREL 44.07649\n5                  1 HOUR                             Evergreen       NA\n6 8-HR RUN AVG BEGIN HOUR                             Evergreen 47.28375\n  avg_arithmetic_mean avg_first_max_value\n1          0.04345224          0.05146281\n2          0.04325047          0.04856749\n3          0.04052387          0.04900000\n4          0.04019869          0.04589235\n5          0.04131112          0.05216529\n6          0.04122206          0.04876309\n```\n\n\n:::\n:::\n\n\n# Conclusion\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBI::dbDisconnect(conn = con)\n```\n:::\n\n\nThis post shows how to use the `RAQSAPI::` package to access air quality data from the Environmental Protection Agency, and how to use the `duckdb::` package to set up an in-memory DuckDB database in R. \n\nIn future posts, I'll begin analyzing and visualizing Colorado's air pollution data from the EPA's Air Quality Service.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "ea82d7aa534e30ade3c473062965195c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Query comparison: SQL, R, and Python using Chicago Employees dataset\"\ndescription: \"This post demonstrates how to run these languages in Quarto\"\nauthor:\n  - name: Mickey Rafa\n    url: https://mrafa3.github.io/\n    #orcid: 0000-0002-5300-3075\ndate: 07-24-2024\ncategories: [R, SQL, Python, Quarto, generative-AI] # self-defined categories\n#citation: \n # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ \nimage: sql-r-python.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\n\n# Introduction\n\n## Purpose\n\n**This project has three purposes**:\n\n1. To show how to run R, SQL, and Python all interchangeably in a Quarto document\n2. To compare the ease of writing code using dplyr (R), SQL, and pandas (Python)\n3. To include some demonstration of SQL in my portfolio (which is often not included but remains a critical skill)\n\n## Setup and data preparation\n\n**Required packages**: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(httr)           #to fetch the data\nlibrary(janitor)        #for the clean_names() function for data cleaning\nlibrary(reticulate)     #to enable Python within R\nlibrary(DBI)            #to establish in-memory database of R dataframe\nlibrary(RSQLite)        #for SQLite engine\nlibrary(lubridate)      #for functions to handle dates\n```\n:::\n\n\n\n\n**About the dataset**:\n\nThis dataset is from data.world, and includes information from Chicago's Department of Human Resources for city employees in 2017. It's a simple dataset to allow for comparisons across languages.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reading as a temporary file, then saving as df\nGET(\"https://query.data.world/s/hu5dkviuxd6k2ipuhpxjuyuds7aplu?dws=00000\", write_disk(tf <- tempfile(fileext = \".xls\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse [https://download.data.world/file_download/wbezchicago/chicago-employee-positions-and-salaries-for-2017/Employee%20Salary%20Data%20as%20of%20Sept.%202017.xls?auth=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50Om1yYWZhMyIsImlzcyI6ImFnZW50Om1yYWZhMzo6ODg0MjQ2ZDItMTgzMy00NmZjLTk2YTMtZjQ2MWMzMDJjOTZiIiwiaWF0IjoxNzIxODc0NzgyLCJyb2xlIjpbInVzZXIiLCJ1c2VyX2FwaV9hZG1pbiIsInVzZXJfYXBpX2VudGVycHJpc2VfYWRtaW4iLCJ1c2VyX2FwaV9yZWFkIiwidXNlcl9hcGlfd3JpdGUiXSwiZ2VuZXJhbC1wdXJwb3NlIjpmYWxzZSwidXJsIjoiMjM2ZDZlZGQ3NjdkZmVmOGRjYzM0Mzg3YTExMDQ1N2EzMmU1OGY3ZSJ9.oTr9PF0rrsLdVhewmy2v1vRgYvT0jy_PBmqhmrufaRSB25PEm48ZPxvswiSrZw8bNaACxDWpxwBiJVCVSaM-Zg]\n  Date: 2024-11-07 20:59\n  Status: 200\n  Content-Type: application/vnd.ms-excel\n  Size: 4.72 MB\n<ON DISK>  /var/folders/ck/dmgn8lbx6vl8sl89vlhr0sv00000gn/T//RtmpkOuOtb/filed8ea1dd52f04.xls\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_excel(tf) %>% \n  #clean_names() to make all column names lowercase\n  clean_names()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 32,806\nColumns: 8\n$ name                           <chr> \"AARON,  JEFFERY M\", \"AARON,  KARINA\", …\n$ title                          <chr> \"SERGEANT\", \"POLICE OFFICER (ASSIGNED A…\n$ department                     <chr> \"POLICE\", \"POLICE\", \"FLEET AND FACILITY…\n$ salary_annual                  <dbl> 101442.0, 94122.0, 101592.0, 110064.0, …\n$ original_hire_date             <dttm> 2005-09-26, 2005-09-26, 1991-08-01, 19…\n$ start_date_in_present_position <dttm> 2016-06-01, 2017-04-16, 2000-05-01, 20…\n$ salary_basis                   <chr> \"SALARY\", \"SALARY\", \"SALARY\", \"SALARY\",…\n$ employment_category            <chr> \"Fulltime-Regular\", \"Fulltime-Regular\",…\n```\n\n\n:::\n:::\n\n\n\n\n## Setting up Python and SQL to execute\n\nThe `DBI::` package allows you to create an in-memory database to query against. The [DBI project site](https://r-dbi.org/) is a great place to learn more about it. I'll start by doing some initial setup and establishing the connection between the R dataframe and the SQL table name that I'll query.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(SQLite(), \":memory:\")\nDBI::dbWriteTable(conn = con, name = \"df\", value = df, field.types = c(\"original_hire_date\" = \"Date\"), row.names = FALSE)\n```\n:::\n\n\n\n\nThe `reticulate::` package allows for executing Python code in an R environment. The [reticulate project site](https://rstudio.github.io/reticulate/) includes useful examples for getting up and running with Python in R. This package includes an `r_to_py()` function that is needed to convert an R dataframe into a pandas dataframe.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy$df <- r_to_py(df)\n```\n:::\n\n\n\n\nWhen inserting a code chunk to your Markdown file, it originally defaults to '{r}'. You can simply change this to 'python' or 'sql' and, with the above set up, the code works beautifully in a Quarto document!\n\nIn the sections that follow, I used ChatGPT to generate prompts as querying exercises. For the initial code chunks, \n\n# 1. Basic Selection and Filtering:\n\n**Retrieve all records of employees who have the job title \"POLICE OFFICER\".**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect *\nfrom df\nwhere title = 'POLICE OFFICER'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                  |title          |department | salary_annual| original_hire_date| start_date_in_present_position|salary_basis |employment_category |\n|:---------------------|:--------------|:----------|-------------:|------------------:|------------------------------:|:------------|:-------------------|\n|ABBATE,  TERRY M      |POLICE OFFICER |POLICE     |         93354|          818035200|                      818035200|SALARY       |Fulltime-Regular    |\n|ABDALLAH,  ZAID       |POLICE OFFICER |POLICE     |         84054|         1354233600|                     1354233600|SALARY       |Fulltime-Regular    |\n|ABDELHADI,  ABDALMAHD |POLICE OFFICER |POLICE     |         87006|         1166400000|                     1166400000|SALARY       |Fulltime-Regular    |\n|ABDELMAJEID,  AZIZ    |POLICE OFFICER |POLICE     |         84054|         1209340800|                     1209340800|SALARY       |Fulltime-Regular    |\n|ABEJERO,  JASON V     |POLICE OFFICER |POLICE     |         90024|          940809600|                      940809600|SALARY       |Fulltime-Regular    |\n|ABFALL,  RICHARD C    |POLICE OFFICER |POLICE     |         48078|         1494892800|                     1494892800|SALARY       |Fulltime-Regular    |\n|ABNEY,  PATRICK       |POLICE OFFICER |POLICE     |         72510|         1435536000|                     1435536000|SALARY       |Fulltime-Regular    |\n|ABOUASSI,  CHADI      |POLICE OFFICER |POLICE     |         48078|         1494892800|                     1494892800|SALARY       |Fulltime-Regular    |\n|ABRAHAM,  NANCY A     |POLICE OFFICER |POLICE     |         76266|         1398643200|                     1398643200|SALARY       |Fulltime-Regular    |\n|ABRAM,  ANTHONY A     |POLICE OFFICER |POLICE     |         68616|         1466985600|                     1466985600|SALARY       |Fulltime-Regular    |\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(title == 'POLICE OFFICER')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,213 × 8\n   name                  title      department salary_annual original_hire_date \n   <chr>                 <chr>      <chr>              <dbl> <dttm>             \n 1 ABBATE,  TERRY M      POLICE OF… POLICE             93354 1995-12-04 00:00:00\n 2 ABDALLAH,  ZAID       POLICE OF… POLICE             84054 2012-11-30 00:00:00\n 3 ABDELHADI,  ABDALMAHD POLICE OF… POLICE             87006 2006-12-18 00:00:00\n 4 ABDELMAJEID,  AZIZ    POLICE OF… POLICE             84054 2008-04-28 00:00:00\n 5 ABEJERO,  JASON V     POLICE OF… POLICE             90024 1999-10-25 00:00:00\n 6 ABFALL,  RICHARD C    POLICE OF… POLICE             48078 2017-05-16 00:00:00\n 7 ABNEY,  PATRICK       POLICE OF… POLICE             72510 2015-06-29 00:00:00\n 8 ABOUASSI,  CHADI      POLICE OF… POLICE             48078 2017-05-16 00:00:00\n 9 ABRAHAM,  NANCY A     POLICE OF… POLICE             76266 2014-04-28 00:00:00\n10 ABRAM,  ANTHONY A     POLICE OF… POLICE             68616 2016-06-27 00:00:00\n# ℹ 9,203 more rows\n# ℹ 3 more variables: start_date_in_present_position <dttm>,\n#   salary_basis <chr>, employment_category <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf[df['title'] == 'POLICE OFFICER']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        name           title  ... salary_basis  employment_category\n10          ABBATE,  TERRY M  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n12           ABDALLAH,  ZAID  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n13     ABDELHADI,  ABDALMAHD  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n15        ABDELMAJEID,  AZIZ  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n24         ABEJERO,  JASON V  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n...                      ...             ...  ...          ...                  ...\n32800        ZYGMUNT,  DAWID  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n32801   ZYLINSKA,  KATARZYNA  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n32802     ZYMANTAS,  LAURA C  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n32803      ZYMANTAS,  MARK E  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n32804    ZYRKOWSKI,  CARLO E  POLICE OFFICER  ...       SALARY     Fulltime-Regular\n\n[9213 rows x 8 columns]\n```\n\n\n:::\n:::\n\n\n\n\n**List the names and salaries of employees whose annual salary is greater than $100,000.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect name, salary_annual\nfrom df\nwhere salary_annual > 100000\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                     | salary_annual|\n|:------------------------|-------------:|\n|AARON,  JEFFERY M        |        101442|\n|AARON,  KIMBERLEI R      |        101592|\n|ABAD JR,  VICENTE M      |        110064|\n|ABBATEMARCO,  JAMES J    |        103350|\n|ABDELLATIF,  AREF R      |        102228|\n|ABDUL-KARIM,  MUHAMMAD A |        111492|\n|ABDULLAH,  KEVIN         |        114846|\n|ABOUELKHEIR,  HASSAN A   |        110064|\n|ABRAHAM,  GIRLEY T       |        110064|\n|ABRAMSKI,  JOHN E        |        128970|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(salary_annual > 100000) %>% \n  select(name, salary_annual)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6,091 × 2\n   name                     salary_annual\n   <chr>                            <dbl>\n 1 AARON,  JEFFERY M               101442\n 2 AARON,  KIMBERLEI R             101592\n 3 ABAD JR,  VICENTE M             110064\n 4 ABBATEMARCO,  JAMES J           103350\n 5 ABDELLATIF,  AREF R             102228\n 6 ABDUL-KARIM,  MUHAMMAD A        111492\n 7 ABDULLAH,  KEVIN                114846\n 8 ABOUELKHEIR,  HASSAN A          110064\n 9 ABRAHAM,  GIRLEY T              110064\n10 ABRAMSKI,  JOHN E               128970\n# ℹ 6,081 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf[df['salary_annual'] > 100000][['name', 'salary_annual']]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        name  salary_annual\n0          AARON,  JEFFERY M       101442.0\n2        AARON,  KIMBERLEI R       101592.0\n3        ABAD JR,  VICENTE M       110064.0\n9      ABBATEMARCO,  JAMES J       103350.0\n14       ABDELLATIF,  AREF R       102228.0\n...                      ...            ...\n32783         ZUPAN,  BILL M       114324.0\n32785     ZURAWSKI,  JEFFREY       101608.0\n32794    ZWOLFER,  MATTHEW W       114324.0\n32798    ZYGADLO,  MICHAEL J       101608.0\n32805    ZYSKOWSKI,  DARIUSZ       115932.0\n\n[6091 rows x 2 columns]\n```\n\n\n:::\n:::\n\n\n\n\n**Find all employees who work in the \"FINANCE\" department.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect name\nfrom df\nwhere department = 'FINANCE'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                   |\n|:----------------------|\n|ADAMCZYK JR,  JAN      |\n|ADAPON,  NENITA P      |\n|ADENI,  MOHAMED K      |\n|AHMED,  MOHAMMAD A     |\n|AIKONEDO,  PAUL E      |\n|ALAM,  SYED S          |\n|ALEXANDER,  PATRICIA L |\n|ALEXANDER,  RACQUEL L  |\n|ALLEN,  JONATHAN E     |\n|ALLEN,  KEVIN M        |\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(department == 'FINANCE') %>% \n  select(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 563 × 1\n   name                  \n   <chr>                 \n 1 ADAMCZYK JR,  JAN     \n 2 ADAPON,  NENITA P     \n 3 ADENI,  MOHAMED K     \n 4 AHMED,  MOHAMMAD A    \n 5 AIKONEDO,  PAUL E     \n 6 ALAM,  SYED S         \n 7 ALEXANDER,  PATRICIA L\n 8 ALEXANDER,  RACQUEL L \n 9 ALLEN,  JONATHAN E    \n10 ALLEN,  KEVIN M       \n# ℹ 553 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf[df['department'] == 'FINANCE']['name']\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n109         ADAMCZYK JR,  JAN\n162         ADAPON,  NENITA P\n175         ADENI,  MOHAMED K\n263        AHMED,  MOHAMMAD A\n278         AIKONEDO,  PAUL E\n                 ...         \n32498    ZACARIAZ,  ALEJANDRO\n32522          ZAIDI,  SYED K\n32605       ZAVALA,  FERNANDO\n32680          ZHANG,  KEFENG\n32789          ZUREK,  MARY H\nName: name, Length: 563, dtype: object\n```\n\n\n:::\n:::\n\n\n\n\n# 2. Aggregate Functions:\n\n**Calculate the average salary for all employees.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect avg(salary_annual)\nfrom df\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| avg(salary_annual)|\n|------------------:|\n|           81631.46|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  summarize(mean(salary_annual))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `mean(salary_annual)`\n                  <dbl>\n1                81631.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf['salary_annual'].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnp.float64(81631.4588758154)\n```\n\n\n:::\n:::\n\n\n\n\n**Find the total number of employees in each department.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect department, count(*) as ttl_employees\nfrom df\ngroup by department\norder by ttl_employees desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|department              | ttl_employees|\n|:-----------------------|-------------:|\n|POLICE                  |         13055|\n|FIRE                    |          4833|\n|OEMC                    |          2121|\n|STREETS & SAN           |          2045|\n|WATER MGMNT             |          1902|\n|AVIATION                |          1414|\n|TRANSPORTN              |          1244|\n|PUBLIC LIBRARY          |           978|\n|FLEET AND FACILITY MGMT |           964|\n|FAMILY & SUPPORT        |           625|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(department) %>%\n  count() %>% \n  arrange(-n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 36 × 2\n# Groups:   department [36]\n   department                  n\n   <chr>                   <int>\n 1 POLICE                  13055\n 2 FIRE                     4833\n 3 OEMC                     2121\n 4 STREETS & SAN            2045\n 5 WATER MGMNT              1902\n 6 AVIATION                 1414\n 7 TRANSPORTN               1244\n 8 PUBLIC LIBRARY            978\n 9 FLEET AND FACILITY MGMT   964\n10 FAMILY & SUPPORT          625\n# ℹ 26 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.groupby('department').agg(\n  ttl_employees = ('name', 'count')\n).reset_index().sort_values(by='ttl_employees', ascending=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 department  ttl_employees\n27                   POLICE          13055\n15                     FIRE           4833\n26                     OEMC           2121\n31            STREETS & SAN           2045\n34              WATER MGMNT           1902\n2                  AVIATION           1414\n32               TRANSPORTN           1244\n30           PUBLIC LIBRARY            978\n16  FLEET AND FACILITY MGMT            964\n13         FAMILY & SUPPORT            625\n14                  FINANCE            563\n17                   HEALTH            503\n9              CITY COUNCIL            453\n23                      LAW            392\n6                 BUILDINGS            277\n18       HOUSING & ECON DEV            204\n7          BUSINESS AFFAIRS            161\n3         BOARD OF ELECTION            103\n12                     DoIT             98\n29              PROCUREMENT             97\n21            INSPECTOR GEN             89\n8                CITY CLERK             89\n25           MAYOR'S OFFICE             86\n1             ANIMAL CONTRL             80\n20          HUMAN RESOURCES             71\n10         CULTURAL AFFAIRS             67\n5             BUDGET & MGMT             46\n0              ADMIN HEARNG             39\n11             DISABILITIES             29\n33                TREASURER             22\n19          HUMAN RELATIONS             17\n22                     IPRA             13\n4           BOARD OF ETHICS              8\n28             POLICE BOARD              2\n24        LICENSE APPL COMM              1\n```\n\n\n:::\n:::\n\n\n\n\n**Determine the highest salary in the dataset.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect max(salary_annual)\nfrom df\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| max(salary_annual)|\n|------------------:|\n|              3e+05|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  summarize(max(salary_annual))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `max(salary_annual)`\n                 <dbl>\n1               300000\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf['salary_annual'].max()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnp.float64(300000.0)\n```\n\n\n:::\n:::\n\n\n\n\n# 3. Grouping and Sorting:\n\n**List the average salary for each job title.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect title, avg(salary_annual) as avg_salary\nfrom df\ngroup by title\norder by avg_salary desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                          | avg_salary|\n|:------------------------------|----------:|\n|COMMISSIONER OF AVIATION       |     300000|\n|SUPERINTENDENT OF POLICE       |     260004|\n|MAYOR                          |     216210|\n|FIRE COMMISSIONER              |     202728|\n|FIRST DEPUTY FIRE COMMISSIONER |     197736|\n|FIRST DEPUTY SUPERINTENDENT    |     197724|\n|CHIEF OF STAFF                 |     195000|\n|DEPUTY FIRE COMMISSIONER       |     187680|\n|CHIEF                          |     185364|\n|ASST DEPUTY FIRE COMMISSIONER  |     185352|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(title) %>% \n  summarize(avg_salary = mean(salary_annual, na.rm = TRUE)) %>% \n  arrange(-avg_salary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,121 × 2\n   title                          avg_salary\n   <chr>                               <dbl>\n 1 COMMISSIONER OF AVIATION           300000\n 2 SUPERINTENDENT OF POLICE           260004\n 3 MAYOR                              216210\n 4 FIRE COMMISSIONER                  202728\n 5 FIRST DEPUTY FIRE COMMISSIONER     197736\n 6 FIRST DEPUTY SUPERINTENDENT        197724\n 7 CHIEF OF STAFF                     195000\n 8 DEPUTY FIRE COMMISSIONER           187680\n 9 CHIEF                              185364\n10 ASST DEPUTY FIRE COMMISSIONER      185352\n# ℹ 1,111 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.groupby('title').agg(\n  avg_salary = ('salary_annual', 'mean')\n).reset_index().sort_values(by='avg_salary', ascending=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                               title     avg_salary\n252         COMMISSIONER OF AVIATION  300000.000000\n997         SUPERINTENDENT OF POLICE  260004.000000\n731                            MAYOR  216210.000000\n516                FIRE COMMISSIONER  202728.000000\n539   FIRST DEPUTY FIRE COMMISSIONER  197736.000000\n...                              ...            ...\n785                     POLICE CADET    9838.400000\n828                     PROGRAM AIDE    9728.622222\n1077       TITLE V PROGRAM TRAINEE I    8580.000000\n576               FOSTER GRANDPARENT    2756.000000\n915                 SENIOR COMPANION    2756.000000\n\n[1121 rows x 2 columns]\n```\n\n\n:::\n:::\n\n\n\n\n**Find the top 5 highest-paid departments.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect department, avg(salary_annual) as avg_salary\nfrom df\ngroup by department\norder by avg_salary desc\nlimit 5\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|department      | avg_salary|\n|:---------------|----------:|\n|IPRA            |  102758.77|\n|DoIT            |   99220.53|\n|BUILDINGS       |   99095.58|\n|FIRE            |   98203.67|\n|BOARD OF ETHICS |   95061.00|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(department) %>% \n  summarize(avg_salary = mean(salary_annual)) %>% \n  top_n(5, avg_salary) %>% \n  arrange(-avg_salary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  department      avg_salary\n  <chr>                <dbl>\n1 IPRA               102759.\n2 DoIT                99221.\n3 BUILDINGS           99096.\n4 FIRE                98204.\n5 BOARD OF ETHICS     95061 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.groupby('department').agg(\n  avg_salary = ('salary_annual', 'mean')\n).reset_index().sort_values(by='avg_salary', ascending=False).head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         department     avg_salary\n22             IPRA  102758.769231\n12             DoIT   99220.530612\n6         BUILDINGS   99095.580650\n15             FIRE   98203.672849\n4   BOARD OF ETHICS   95061.000000\n```\n\n\n:::\n:::\n\n\n\n\n**Show the number of employees for each job title, ordered by the number of employees in descending order.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect title, count(*) as cnt_employees\nfrom df\ngroup by title\norder by cnt_employees desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                  | cnt_employees|\n|:--------------------------------------|-------------:|\n|POLICE OFFICER                         |          9213|\n|FIREFIGHTER-EMT                        |          1492|\n|SERGEANT                               |          1162|\n|POLICE OFFICER (ASSIGNED AS DETECTIVE) |          1015|\n|MOTOR TRUCK DRIVER                     |           709|\n|POOL MOTOR TRUCK DRIVER                |           693|\n|SANITATION LABORER                     |           634|\n|FIREFIGHTER                            |           533|\n|CROSSING GUARD                         |           464|\n|CONSTRUCTION LABORER                   |           456|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(title) %>% \n  count() %>% \n  arrange(-n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,121 × 2\n# Groups:   title [1,121]\n   title                                      n\n   <chr>                                  <int>\n 1 POLICE OFFICER                          9213\n 2 FIREFIGHTER-EMT                         1492\n 3 SERGEANT                                1162\n 4 POLICE OFFICER (ASSIGNED AS DETECTIVE)  1015\n 5 MOTOR TRUCK DRIVER                       709\n 6 POOL MOTOR TRUCK DRIVER                  693\n 7 SANITATION LABORER                       634\n 8 FIREFIGHTER                              533\n 9 CROSSING GUARD                           464\n10 CONSTRUCTION LABORER                     456\n# ℹ 1,111 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.groupby('title').agg(\n  cnt_employees = ('name', 'count')\n).reset_index().sort_values(by='cnt_employees', ascending=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                      title  cnt_employees\n791                          POLICE OFFICER           9213\n529                         FIREFIGHTER-EMT           1492\n946                                SERGEANT           1162\n796  POLICE OFFICER (ASSIGNED AS DETECTIVE)           1015\n744                      MOTOR TRUCK DRIVER            709\n..                                      ...            ...\n218                CHIEF SYSTEMS PROGRAMMER              1\n220                     CHIEF WATER CHEMIST              1\n221                    CHIEF WATER ENGINEER              1\n222              CHIEF ZONING PLAN EXAMINER              1\n0              1ST DEPUTY INSPECTOR GENERAL              1\n\n[1121 rows x 2 columns]\n```\n\n\n:::\n:::\n\n\n\n\n# 4. Joining and Subqueries:\n\n**Retrieve the details of employees who have a salary in the top five of their department. Show the name, title, department, salary, and ranking.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith salary_by_dept_rank as (\nselect \n    name,\n    title,\n    department,\n    salary_annual,\n    RANK() OVER(\n      partition by department\n      order by salary_annual desc) as salary_rank_by_department\nfrom df\nwhere department IS NOT NULL\n)\nselect *\nfrom salary_by_dept_rank\nwhere salary_rank_by_department <= 5\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                        |title                                       |department    | salary_annual| salary_rank_by_department|\n|:---------------------------|:-------------------------------------------|:-------------|-------------:|-------------------------:|\n|JACKOWIAK,  PATRICIA        |DIR OF ADMINISTRATIVE HEARINGS              |ADMIN HEARNG  |        156420|                         1|\n|SHEELY,  STEVEN N           |DEPUTY DIR OF ADMINISTRATIVE ADJUDICATION   |ADMIN HEARNG  |        131688|                         2|\n|HENNIGAN,  KEVIN G          |FISCAL ADMINISTRATOR                        |ADMIN HEARNG  |        117660|                         3|\n|HEIDT,  SANDRA E            |ASST MANAGER OF ADMINISTRATIVE ADJUDICATION |ADMIN HEARNG  |         98160|                         4|\n|GOGOLA,  DEBORAH G          |SENIOR ADMINISTRATIVE LAW OFFICER           |ADMIN HEARNG  |         96636|                         5|\n|PARKER-OKOJIE,  GABRIELLE E |SENIOR ADMINISTRATIVE LAW OFFICER           |ADMIN HEARNG  |         96636|                         5|\n|RIZZO,  ANTHONY J           |SENIOR ADMINISTRATIVE LAW OFFICER           |ADMIN HEARNG  |         96636|                         5|\n|WEINERT,  DARCI N           |SENIOR ADMINISTRATIVE LAW OFFICER           |ADMIN HEARNG  |         96636|                         5|\n|RUSSELL,  SUSAN J           |EXECUTIVE DIR OF ANIMAL CARE AND CONTROL    |ANIMAL CONTRL |        130008|                         1|\n|YAMAJI,  PETER S            |VETERINARIAN                                |ANIMAL CONTRL |        128136|                         2|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(department) %>% \n  mutate(salary_rank = dense_rank(desc(salary_annual))) %>% \n  arrange(department, salary_rank) %>% \n  filter(salary_rank <= 5,\n         !is.na(department))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 290 × 9\n# Groups:   department [35]\n   name                       title department salary_annual original_hire_date \n   <chr>                      <chr> <chr>              <dbl> <dttm>             \n 1 JACKOWIAK,  PATRICIA       DIR … ADMIN HEA…        156420 1989-09-01 00:00:00\n 2 SHEELY,  STEVEN N          DEPU… ADMIN HEA…        131688 2003-07-16 00:00:00\n 3 HENNIGAN,  KEVIN G         FISC… ADMIN HEA…        117660 1980-01-07 00:00:00\n 4 HEIDT,  SANDRA E           ASST… ADMIN HEA…         98160 1985-09-09 00:00:00\n 5 GOGOLA,  DEBORAH G         SENI… ADMIN HEA…         96636 1989-10-02 00:00:00\n 6 PARKER-OKOJIE,  GABRIELLE… SENI… ADMIN HEA…         96636 2004-06-15 00:00:00\n 7 RIZZO,  ANTHONY J          SENI… ADMIN HEA…         96636 1997-12-08 00:00:00\n 8 WEINERT,  DARCI N          SENI… ADMIN HEA…         96636 2003-03-17 00:00:00\n 9 RUSSELL,  SUSAN J          EXEC… ANIMAL CO…        130008 2016-05-02 00:00:00\n10 YAMAJI,  PETER S           VETE… ANIMAL CO…        128136 2000-08-21 00:00:00\n# ℹ 280 more rows\n# ℹ 4 more variables: start_date_in_present_position <dttm>,\n#   salary_basis <chr>, employment_category <chr>, salary_rank <int>\n```\n\n\n:::\n:::\n\n\n\n\n**Find the names of employees who earn more than the average salary in their department.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith dept_avg_salary as (\nselect *,\n        AVG(salary_annual) OVER(\n          partition by department) as avg_salary_by_department \nfrom df\nwhere department IS NOT NULL\n)\nselect *\nfrom dept_avg_salary\nwhere salary_annual > avg_salary_by_department\norder by department, salary_annual desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                        |title                                       |department   | salary_annual| original_hire_date| start_date_in_present_position|salary_basis |employment_category | avg_salary_by_department|\n|:---------------------------|:-------------------------------------------|:------------|-------------:|------------------:|------------------------------:|:------------|:-------------------|------------------------:|\n|JACKOWIAK,  PATRICIA        |DIR OF ADMINISTRATIVE HEARINGS              |ADMIN HEARNG |        156420|          620611200|                     1283299200|SALARY       |Fulltime-Regular    |                 78894.15|\n|SHEELY,  STEVEN N           |DEPUTY DIR OF ADMINISTRATIVE ADJUDICATION   |ADMIN HEARNG |        131688|         1058313600|                     1309478400|SALARY       |Fulltime-Regular    |                 78894.15|\n|HENNIGAN,  KEVIN G          |FISCAL ADMINISTRATOR                        |ADMIN HEARNG |        117660|          316051200|                      815184000|SALARY       |Fulltime-Regular    |                 78894.15|\n|HEIDT,  SANDRA E            |ASST MANAGER OF ADMINISTRATIVE ADJUDICATION |ADMIN HEARNG |         98160|          495072000|                      879465600|SALARY       |Fulltime-Regular    |                 78894.15|\n|GOGOLA,  DEBORAH G          |SENIOR ADMINISTRATIVE LAW OFFICER           |ADMIN HEARNG |         96636|          623289600|                      976924800|SALARY       |Fulltime-Regular    |                 78894.15|\n|PARKER-OKOJIE,  GABRIELLE E |SENIOR ADMINISTRATIVE LAW OFFICER           |ADMIN HEARNG |         96636|         1087257600|                     1497830400|SALARY       |Fulltime-Regular    |                 78894.15|\n|RIZZO,  ANTHONY J           |SENIOR ADMINISTRATIVE LAW OFFICER           |ADMIN HEARNG |         96636|          881539200|                     1095292800|SALARY       |Fulltime-Regular    |                 78894.15|\n|WEINERT,  DARCI N           |SENIOR ADMINISTRATIVE LAW OFFICER           |ADMIN HEARNG |         96636|         1047859200|                     1468627200|SALARY       |Fulltime-Regular    |                 78894.15|\n|RIZZO,  MARGARET A          |ADMINISTRATIVE SERVICES OFFICER II EXCLD    |ADMIN HEARNG |         93300|          173404800|                     1164931200|SALARY       |Fulltime-Regular    |                 78894.15|\n|SMITH,  PAMELA M            |ASST TO THE EXEC DIR                        |ADMIN HEARNG |         93300|          585187200|                      991353600|SALARY       |Fulltime-Regular    |                 78894.15|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(department) %>% \n  mutate(avg_salary = mean(salary_annual)) %>% \n  filter(salary_annual > avg_salary) %>% \n  arrange(department, -salary_annual)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16,399 × 9\n# Groups:   department [35]\n   name                       title department salary_annual original_hire_date \n   <chr>                      <chr> <chr>              <dbl> <dttm>             \n 1 JACKOWIAK,  PATRICIA       DIR … ADMIN HEA…        156420 1989-09-01 00:00:00\n 2 SHEELY,  STEVEN N          DEPU… ADMIN HEA…        131688 2003-07-16 00:00:00\n 3 HENNIGAN,  KEVIN G         FISC… ADMIN HEA…        117660 1980-01-07 00:00:00\n 4 HEIDT,  SANDRA E           ASST… ADMIN HEA…         98160 1985-09-09 00:00:00\n 5 GOGOLA,  DEBORAH G         SENI… ADMIN HEA…         96636 1989-10-02 00:00:00\n 6 PARKER-OKOJIE,  GABRIELLE… SENI… ADMIN HEA…         96636 2004-06-15 00:00:00\n 7 RIZZO,  ANTHONY J          SENI… ADMIN HEA…         96636 1997-12-08 00:00:00\n 8 WEINERT,  DARCI N          SENI… ADMIN HEA…         96636 2003-03-17 00:00:00\n 9 RIZZO,  MARGARET A         ADMI… ADMIN HEA…         93300 1975-07-01 00:00:00\n10 SMITH,  PAMELA M           ASST… ADMIN HEA…         93300 1988-07-18 00:00:00\n# ℹ 16,389 more rows\n# ℹ 4 more variables: start_date_in_present_position <dttm>,\n#   salary_basis <chr>, employment_category <chr>, avg_salary <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf['avg_salary'] = df['salary_annual'].mean()\n\ndf[df['salary_annual'] > df['avg_salary']]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        name  ...    avg_salary\n0          AARON,  JEFFERY M  ...  81631.458876\n1             AARON,  KARINA  ...  81631.458876\n2        AARON,  KIMBERLEI R  ...  81631.458876\n3        ABAD JR,  VICENTE M  ...  81631.458876\n7      ABBATACOLA,  ROBERT J  ...  81631.458876\n...                      ...  ...           ...\n32797       ZYGADLO,  JOHN P  ...  81631.458876\n32798    ZYGADLO,  MICHAEL J  ...  81631.458876\n32803      ZYMANTAS,  MARK E  ...  81631.458876\n32804    ZYRKOWSKI,  CARLO E  ...  81631.458876\n32805    ZYSKOWSKI,  DARIUSZ  ...  81631.458876\n\n[19902 rows x 9 columns]\n```\n\n\n:::\n:::\n\n\n\n\n# 5. Complex Queries:\n\n**Calculate the percentage of employees in each department relative to the total number of employees.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith dept_employees as (\n  select department, count(*) cnt_employees\n  from df\n  group by department\n),\nttl_employees as (\n  select count(*) as ttl_count\n  from df\n)\nselect *, round(cnt_employees * 100.0 / ttl_count, 1) as pct_employees\nfrom dept_employees, ttl_employees\norder by pct_employees desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|department              | cnt_employees| ttl_count| pct_employees|\n|:-----------------------|-------------:|---------:|-------------:|\n|POLICE                  |         13055|     32806|          39.8|\n|FIRE                    |          4833|     32806|          14.7|\n|OEMC                    |          2121|     32806|           6.5|\n|STREETS & SAN           |          2045|     32806|           6.2|\n|WATER MGMNT             |          1902|     32806|           5.8|\n|AVIATION                |          1414|     32806|           4.3|\n|TRANSPORTN              |          1244|     32806|           3.8|\n|PUBLIC LIBRARY          |           978|     32806|           3.0|\n|FLEET AND FACILITY MGMT |           964|     32806|           2.9|\n|FAMILY & SUPPORT        |           625|     32806|           1.9|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(department) %>% \n  count() %>% \n  ungroup() %>% \n  mutate(ttl_employees = sum(n),\n         pct_employees = round((n / ttl_employees) * 100, 1)) %>% \n  arrange(-pct_employees)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 36 × 4\n   department                  n ttl_employees pct_employees\n   <chr>                   <int>         <int>         <dbl>\n 1 POLICE                  13055         32806          39.8\n 2 FIRE                     4833         32806          14.7\n 3 OEMC                     2121         32806           6.5\n 4 STREETS & SAN            2045         32806           6.2\n 5 WATER MGMNT              1902         32806           5.8\n 6 AVIATION                 1414         32806           4.3\n 7 TRANSPORTN               1244         32806           3.8\n 8 PUBLIC LIBRARY            978         32806           3  \n 9 FLEET AND FACILITY MGMT   964         32806           2.9\n10 FAMILY & SUPPORT          625         32806           1.9\n# ℹ 26 more rows\n```\n\n\n:::\n:::\n\n\n\n\n**Identify job titles that have more than 100 employees.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect title, count(*) cnt_employees\nfrom df\ngroup by title\nhaving cnt_employees > 100\norder by cnt_employees desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                  | cnt_employees|\n|:--------------------------------------|-------------:|\n|POLICE OFFICER                         |          9213|\n|FIREFIGHTER-EMT                        |          1492|\n|SERGEANT                               |          1162|\n|POLICE OFFICER (ASSIGNED AS DETECTIVE) |          1015|\n|MOTOR TRUCK DRIVER                     |           709|\n|POOL MOTOR TRUCK DRIVER                |           693|\n|SANITATION LABORER                     |           634|\n|FIREFIGHTER                            |           533|\n|CROSSING GUARD                         |           464|\n|CONSTRUCTION LABORER                   |           456|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(title) %>% \n  count() %>% \n  filter(n > 100) %>% \n  arrange(-n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 46 × 2\n# Groups:   title [46]\n   title                                      n\n   <chr>                                  <int>\n 1 POLICE OFFICER                          9213\n 2 FIREFIGHTER-EMT                         1492\n 3 SERGEANT                                1162\n 4 POLICE OFFICER (ASSIGNED AS DETECTIVE)  1015\n 5 MOTOR TRUCK DRIVER                       709\n 6 POOL MOTOR TRUCK DRIVER                  693\n 7 SANITATION LABORER                       634\n 8 FIREFIGHTER                              533\n 9 CROSSING GUARD                           464\n10 CONSTRUCTION LABORER                     456\n# ℹ 36 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.groupby('title').agg(\n  cnt_title = ('title', 'count')\n).reset_index().sort_values(by='cnt_title', ascending=False).query('cnt_title > 100')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                       title  cnt_title\n791                           POLICE OFFICER       9213\n529                          FIREFIGHTER-EMT       1492\n946                                 SERGEANT       1162\n796   POLICE OFFICER (ASSIGNED AS DETECTIVE)       1015\n744                       MOTOR TRUCK DRIVER        709\n808                  POOL MOTOR TRUCK DRIVER        693\n899                       SANITATION LABORER        634\n525                              FIREFIGHTER        533\n326                           CROSSING GUARD        464\n280                     CONSTRUCTION LABORER        456\n1079             TRAFFIC CONTROL AIDE-HOURLY        452\n680                           LIEUTENANT-EMT        425\n679                               LIEUTENANT        379\n327                 CROSSING GUARD - PER CBA        348\n760                                PARAMEDIC        341\n762                            PARAMEDIC I/C        278\n598                    GENERAL LABORER - DSS        258\n531                    FIREFIGHTER/PARAMEDIC        255\n530                FIREFIGHTER-EMT (RECRUIT)        252\n140                AVIATION SECURITY OFFICER        236\n786         POLICE COMMUNICATIONS OPERATOR I        236\n617                        HOISTING ENGINEER        233\n520                        FIRE ENGINEER-EMT        231\n452                      ELECTRICAL MECHANIC        229\n360                           DETENTION AIDE        224\n801        POLICE OFFICER / FLD TRNG OFFICER        219\n787        POLICE COMMUNICATIONS OPERATOR II        215\n752               OPERATING ENGINEER-GROUP A        186\n676                             LIBRARY PAGE        166\n753               OPERATING ENGINEER-GROUP C        166\n689                   MACHINIST (AUTOMOTIVE)        160\n576                       FOSTER GRANDPARENT        143\n162                              CAPTAIN-EMT        140\n277                         CONCRETE LABORER        139\n15                    ADMINISTRATIVE ASST II        132\n649                                  LABORER        130\n783              POLICE ADMINISTRATIVE CLERK        128\n918               SENIOR DATA ENTRY OPERATOR        124\n780                                  PLUMBER        123\n978                               STAFF ASST        121\n666                              LIBRARIAN I        121\n52                           ASPHALT LABORER        110\n979               STAFF ASST TO THE ALDERMAN        107\n17                   ADMINISTRATIVE ASST III        107\n519                            FIRE ENGINEER        106\n764                 PARKING ENFORCEMENT AIDE        106\n```\n\n\n:::\n:::\n\n\n\n\n**Find employees who have been in their current position for more than 5 years (assuming the dataset includes a hire date or a similar field).**\n\n*Note: need to do some more research on the `DBI::` package, as the SQL object is reading date fields in as a dbl data type.*\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  mutate(tenure = round(\n    lubridate::time_length(\n    today() - lubridate::as_date(start_date_in_present_position), \"year\"),\n    1)) %>% \n  filter(tenure > 5) %>% \n  arrange(-tenure)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32,806 × 9\n   name                title        department salary_annual original_hire_date \n   <chr>               <chr>        <chr>              <dbl> <dttm>             \n 1 LANNON,  JOHN P     CONSTRUCTIO… WATER MGM…        83616  1963-07-02 00:00:00\n 2 WILLIAMS,  DAISY    CROSSING GU… OEMC              23254. 1965-12-06 00:00:00\n 3 CALHOUN,  ROCKELL H CROSSING GU… OEMC              23254. 1968-03-25 00:00:00\n 4 SCOTT,  ROSIE M     PARKING ENF… FINANCE           64392  1968-08-19 00:00:00\n 5 BURKE,  CATHERINE   CROSSING GU… OEMC              23254. 1970-05-13 00:00:00\n 6 BISHOP,  DORIS J    LIBRARY ASS… PUBLIC LI…        69492  1971-09-07 00:00:00\n 7 LUMPKIN,  STEPHEN   SANITATION … STREETS &…        75317. 1972-03-11 00:00:00\n 8 KUCHARSKI,  JOYCE M CROSSING GU… OEMC              23254. 1973-09-17 00:00:00\n 9 CORSO JR,  JOHN J   PROPERTY CU… POLICE            70092  1975-05-27 00:00:00\n10 PHILLIPS,  EUGENIA  CROSSING GU… OEMC              23254. 1976-01-12 00:00:00\n# ℹ 32,796 more rows\n# ℹ 4 more variables: start_date_in_present_position <dttm>,\n#   salary_basis <chr>, employment_category <chr>, tenure <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n# 6. Own Questions\n\n**Pull the second title of all employees that have been promoted at least once.**\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith promotion_seq as (\n      select\n          name,\n          title,\n          department,\n          start_date_in_present_position,\n          ROW_NUMBER() OVER(\n            partition by name\n            order by start_date_in_present_position\n          ) as seq_promotion\n      from df\n)\nselect *\nfrom promotion_seq\nwhere seq_promotion = 2\norder by name\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                |title                                  |department              | start_date_in_present_position| seq_promotion|\n|:-------------------|:--------------------------------------|:-----------------------|------------------------------:|-------------:|\n|ADE,  JAMES P       |POLICE OFFICER                         |POLICE                  |                     1283299200|             2|\n|ANDERSON,  DAVID C  |PROJECTS ADMINISTRATOR                 |BUILDINGS               |                     1393200000|             2|\n|ANDERSON,  DONALD   |PROJECT MANAGER                        |AVIATION                |                     1494806400|             2|\n|ANDERSON,  RHONDA M |SERGEANT                               |POLICE                  |                     1464739200|             2|\n|ARROYO,  FRANCISCO  |WARD SUPERINTENDENT                    |STREETS & SAN           |                     1489622400|             2|\n|ATECA,  SALVADOR R  |MACHINIST (AUTOMOTIVE)                 |FLEET AND FACILITY MGMT |                     1425340800|             2|\n|BIANCHI,  MICHAEL J |FIRE COMMUNICATIONS OPERATOR I         |OEMC                    |                     1502841600|             2|\n|BRACKEN,  DANIEL J  |PARAMEDIC                              |FIRE                    |                     1418688000|             2|\n|BROWN,  ANTHONY     |GENERAL LABORER - DSS                  |STREETS & SAN           |                     1405296000|             2|\n|BROWN,  PATRICK J   |POLICE OFFICER (ASSIGNED AS DETECTIVE) |POLICE                  |                     1429142400|             2|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(name) %>% \n  arrange(start_date_in_present_position) %>% \n  mutate(seq_promotion = row_number()) %>% \n  filter(seq_promotion == 2) %>% \n  arrange(name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 284 × 9\n# Groups:   name [284]\n   name                title        department salary_annual original_hire_date \n   <chr>               <chr>        <chr>              <dbl> <dttm>             \n 1 ADE,  JAMES P       POLICE OFFI… POLICE            84054  2010-09-01 00:00:00\n 2 ANDERSON,  DAVID C  PROJECTS AD… BUILDINGS         94824  2014-02-24 00:00:00\n 3 ANDERSON,  DONALD   PROJECT MAN… AVIATION          80868  1987-08-04 00:00:00\n 4 ANDERSON,  RHONDA M SERGEANT     POLICE           104628  2000-02-28 00:00:00\n 5 ARROYO,  FRANCISCO  WARD SUPERI… STREETS &…        73212  2015-05-18 00:00:00\n 6 ATECA,  SALVADOR R  MACHINIST (… FLEET AND…        96408  2015-03-03 00:00:00\n 7 BIANCHI,  MICHAEL J FIRE COMMUN… OEMC              51264  2017-08-16 00:00:00\n 8 BRACKEN,  DANIEL J  PARAMEDIC    FIRE              76266  2014-12-16 00:00:00\n 9 BROWN,  ANTHONY     GENERAL LAB… STREETS &…        43202. 2014-07-14 00:00:00\n10 BROWN,  PATRICK J   POLICE OFFI… POLICE            97440  1999-03-08 00:00:00\n# ℹ 274 more rows\n# ℹ 4 more variables: start_date_in_present_position <dttm>,\n#   salary_basis <chr>, employment_category <chr>, seq_promotion <int>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.sort_values(by='start_date_in_present_position').groupby('name').apply(\n  lambda x: x.assign(seq_promotion=range(1, len(x) + 1))).query('seq_promotion == 2').reset_index(drop=True).sort_values(by='name')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<string>:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n                    name  ... seq_promotion\n0          ADE,  JAMES P  ...             2\n1     ANDERSON,  DAVID C  ...             2\n2      ANDERSON,  DONALD  ...             2\n3    ANDERSON,  RHONDA M  ...             2\n4     ARROYO,  FRANCISCO  ...             2\n..                   ...  ...           ...\n279    WILSON,  EDWARD J  ...             2\n280    WILSON,  JANICE L  ...             2\n281      WILSON,  JOHN L  ...             2\n282      WILSON,  JOSHUA  ...             2\n283  WRONOWSKI,  JAMES J  ...             2\n\n[284 rows x 10 columns]\n```\n\n\n:::\n:::\n\n\n\n\n# Conclusion \n\n**This project had three purposes:**\n\n1. **To show how to run R, SQL, and Python all interchangeably in a Quarto document.** Quarto and the `reticulate::` and `DBI::` packages allow for the functionality to switch between different methods of handling, querying, and analyzing data. Practically speaking, you probably wouldn't switch between these as often as I did in this work, but it's useful to verify your work and could come in handy for specific circumstances (e.g. analyzing with Pandas and visualizing with ggplot2). I did find that some of the work in SQL is clunky -- data types didn't read in correctly for dates -- but I have not yet dug more deeply into the `DBI::` package to troubleshoot.\n\n2. **To compare the ease of writing code using dplyr (R), SQL, and pandas (Python).** Personally, I feel that R and `dplyr::` is the simplest syntax to use, followed by SQL and Python. `dplyr::` is very linear in its construction, and it rarely has extra characters to remember. Python's brackets, quotes, and chaining all take some getting used to, while R and SQL feel more direct.\n\n3. **To include some demonstration of SQL in my portfolio (which is often not included but remains a critical skill).** This was a fun way to demonstrate some SQL expertise while comparing and verifying output against R and Python.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
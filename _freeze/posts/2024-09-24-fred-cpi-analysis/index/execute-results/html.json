{
  "hash": "18be75015ab358c0edd662b3a58415be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Part Two: Analyzing CPI with Python and R\"\ndescription: \"TBD\"\nauthor:\n  - name: Mickey Rafa\n    url: https://mrafa3.github.io/\n    #orcid: 0000-0002-5300-3075\ndate: 09-11-2024\ncategories: [Python, pandas, api, data-viz, plotnine, R, Quarto, regression, matplotlib] # self-defined categories\n#citation: \n # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ \ncode-annotations: hover\n# image: cpi_plot.png\ndraft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n\n# Introduction\n\nThe `pandas-datareader` package is a powerful tool for easily accessing financial and economic data through various APIs. In this post, we'll explore how to use it to fetch data from FRED (Federal Reserve Economic Data). Then, I'll show some visualization techniques using `matplotlib`, `plotnine`, and `ggplot2`.\n\n## Setup\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(fredr)\n\n# fredr_set_key('YOUR_API_KEY_HERE')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# look more into the category_id\ncpi_categories <- fredr_category_children(category_id = 9)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_series_for_category <- function(category_id) {\n  fredr_category_series(category_id = category_id) %>%\n    select(id, title)\n}\n\ncpi_series <- map_df(cpi_categories$id, get_series_for_category)\n\ncpi_series <- cpi_series %>% \n  filter(str_detect(title, '^Consumer Price Index for All Urban Consumers')) %>% \n  filter(str_detect(id, \"^.{8}$\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# fetch_cpi_data <- function(series_id) {\n#   fredr(\n#     series_id = series_id,\n#     observation_start = as.Date(\"2016-01-01\"),\n#     observation_end = as.Date(\"2024-09-17\")\n#   ) %>%\n#     select(date, value) %>%\n#     rename(!!series_id := value)\n# }\n# \n# cpi_data <- map_df(cpi_series$id, fetch_cpi_data) %>%\n#   reduce(full_join, by = \"date\")\n```\n:::\n\n\n\n\n\n\n1. If it's your first time running code with these libraries, you'll need to first use the pip install command. Since these are already installed for me locally, I can just import.\n\nNext, I'll set a variable for the time frame that I'd like to use for this demonstration.\n\n\n\n# Conclusion\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
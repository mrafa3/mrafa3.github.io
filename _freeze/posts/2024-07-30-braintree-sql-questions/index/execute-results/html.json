{
  "hash": "2cb77801f9ee975b1c6a2cb88a50ff8f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Braintree SQL challenge\"\ndescription: \"This post works through the SQL challenges used by PayPal\"\nauthor:\n  - name: Mickey Rafa\n    url: https://mrafa3.github.io/\n    #orcid: 0000-0002-5300-3075\ndate: 07-30-2024\ncategories: [R, SQL, Quarto] # self-defined categories\n#citation: \n # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ \n#image: sql-r-python.png\ndraft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n# Introduction\n\n## Purpose\n\n## Setup and data preparation\n\n**Required packages**: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RSQLite)\n```\n:::\n\n\n**About the dataset**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- read_csv('.//data/countries.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 252 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country_code, country_name\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ncontinent_map <- read_csv('.//data/continent_map.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 263 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country_code, continent_code\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ncontinents <- read_csv('.//data/continents.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): continent_code, continent_name\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nper_capita <- read_csv('.//data/per_capita.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 2079 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country_code\ndbl (2): year, gdp_per_capita\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## Setting up SQL to execute\n\nThe `DBI::` package allows you to create an in-memory database to query against. The [DBI project site](https://r-dbi.org/) is a great place to learn more about it. I'll start by doing some initial setup and establishing the connection between the R dataframe and the SQL table name that I'll query.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(SQLite(), \":memory:\")\nDBI::dbWriteTable(conn = con, name = \"continent_map\", value = continent_map)\nDBI::dbWriteTable(conn = con, name = \"per_capita\", value = per_capita)\nDBI::dbWriteTable(conn = con, name = \"continents\", value = continents)\nDBI::dbWriteTable(conn = con, name = \"countries\", value = countries)\n```\n:::\n\n\n# Questions \n\n1. Data Integrity Checking & Cleanup\n\nAlphabetically list all of the country codes in the continent_map table that appear more than once. Display any values where country_code is null as country_code = \"FOO\" and make this row appear first in the list, even though it should alphabetically sort to the middle. Provide the results of this query as your answer.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect \n      CASE WHEN country_code IS NULL THEN \"FOO\" ELSE country_code END as country_code,\n      count(*) as cnt_country\nfrom continent_map\ngroup by country_code\nhaving cnt_country > 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n|country_code | cnt_country|\n|:------------|-----------:|\n|FOO          |           4|\n|ARM          |           3|\n|AZE          |           2|\n|CYP          |           2|\n|GEO          |           2|\n|KAZ          |           2|\n|RUS          |           2|\n|TUR          |           2|\n|UMI          |           2|\n\n</div>\n:::\n\n\nFor all countries that have multiple rows in the continent_map table, delete all multiple records leaving only the 1 record per country. The record that you keep should be the first one when sorted by the continent_code alphabetically ascending. Provide the query/ies and explanation of step(s) that you follow to delete these records.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith continent_map_update as (\nselect *,\n        ROW_NUMBER() OVER(\n            partition by country_code\n            order by country_code asc) as seq\nfrom continent_map)\nselect *\nfrom continent_map_update\nwhere seq = 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country_code |continent_code | seq|\n|:------------|:--------------|---:|\n|NA           |OC             |   1|\n|ABW          |NA             |   1|\n|AFG          |AS             |   1|\n|AGO          |AF             |   1|\n|AIA          |NA             |   1|\n|ALA          |EU             |   1|\n|ALB          |EU             |   1|\n|AND          |EU             |   1|\n|ANT          |NA             |   1|\n|ARE          |AS             |   1|\n\n</div>\n:::\n\n\n2. List the countries ranked 10-12 in each continent by the percent of year-over-year growth descending from 2011 to 2012.\n\nThe percent of growth should be calculated as: ((2012 gdp - 2011 gdp) / 2011 gdp)\n\nThe list should include the columns:\n\n* rank\n* continent_name\n* country_code\n* country_name\n* growth_percent\n\n>>For this question, there are two elements of data cleaning:\n\n* To list the **countries** and their ranking, I filtered out the many country codes that actually represented regions or country income groupings.\n* The `continent_name` is NA for North America, and I wanted to generate the results in a cleaner way.\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith df as (\nselect \n        p.*,\n        countries.country_name,\n        CASE WHEN p.country_code IN ('EAP', 'EAS', 'LIC', 'ARB', 'NOC', 'UMC', 'MEA', 'PSS', 'MNA', 'MIC', 'LMY', 'HPC', 'NAC', 'LDC', 'LMC', 'SSF', 'SSA', 'CSS', 'WLD', 'ECA', 'HIC', 'OEC', 'OED', 'SST', 'LCN', 'SAS', 'LAC', 'OSS', 'ECS', 'EUU', 'EMU') THEN 'Region' ELSE 'Country' END as country_region,\n        CASE WHEN c.continent_name IS NULL THEN 'North America' ELSE c.continent_name END as continent_name,\n        LAG(p.gdp_per_capita, 1, NULL) OVER(\n            partition by p.country_code\n            order by year) as t0_gdp_pc\nfrom per_capita p\nleft join continent_map m\non p.country_code = m.country_code\nleft join continents c\non m.continent_code = c.continent_code\nleft join countries\non p.country_code = countries.country_code\nwhere country_region = 'Country'\n),\ngrowth as (\nselect \n        *,\n        round(((gdp_per_capita - t0_gdp_pc)/ t0_gdp_pc) * 100, 2) as growth_percent\nfrom df\n),\nrank_2012 as (\nselect \n        *,\n        RANK() OVER(\n            partition by continent_name\n            order by growth_percent desc) as rank\nfrom growth\nwhere year = 2012\nand growth_percent IS NOT NULL\n)\nselect\n          rank,\n          continent_name,\n          country_code,\n          country_name,\n          concat(growth_percent,'%') as growth_percent\nfrom rank_2012\norder by growth_percent desc\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| rank|continent_name |country_code |country_name        |growth_percent |\n|----:|:--------------|:------------|:-------------------|:--------------|\n|    8|Africa         |LBR          |Liberia             |9.77%          |\n|   12|Asia           |PHL          |Philippines         |9.73%          |\n|   13|Asia           |KWT          |Kuwait              |9.68%          |\n|    9|Africa         |EGY          |Egypt, Arab Rep.    |9.53%          |\n|   14|Asia           |GEO          |Georgia             |8.92%          |\n|   10|Africa         |RWA          |Rwanda              |8.73%          |\n|    4|Oceania        |AUS          |Australia           |8.63%          |\n|    2|North America  |KNA          |St. Kitts and Nevis |8.45%          |\n|    3|North America  |CRI          |Costa Rica          |8.38%          |\n|    6|South America  |COL          |Colombia            |8.38%          |\n\n</div>\n:::\n\n\n3. For the year 2012, create a 3 column, 1 row report showing the percent share of gdp_per_capita for the following regions:\n\n(i) Asia, (ii) Europe, (iii) the Rest of the World. Your result should look something like\n\nAsia\tEurope\tRest of World\n25.0%\t25.0%\t50.0%\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith df as (\nselect \n        p.*,\n        countries.country_name,\n        CASE WHEN p.country_code IN ('EAP', 'EAS', 'LIC', 'ARB', 'NOC', 'UMC', 'MEA', 'PSS', 'MNA', 'MIC', 'LMY', 'HPC', 'NAC', 'LDC', 'LMC', 'SSF', 'SSA', 'CSS', 'WLD', 'ECA', 'HIC', 'OEC', 'OED', 'SST', 'LCN', 'SAS', 'LAC', 'OSS', 'ECS', 'EUU', 'EMU') THEN 'Region' ELSE 'Country' END as country_region,\n        CASE WHEN c.continent_name IS NULL THEN 'North America' ELSE c.continent_name END as continent_name,\n        LAG(p.gdp_per_capita, 1, NULL) OVER(\n            partition by p.country_code\n            order by year) as t0_gdp_pc\nfrom per_capita p\nleft join continent_map m\non p.country_code = m.country_code\nleft join continents c\non m.continent_code = c.continent_code\nleft join countries\non p.country_code = countries.country_code\nwhere country_region = 'Country'\n),\nsum_by_continent as (\nselect \n        continent_name,\n        sum(gdp_per_capita) as sum_gdp_per_capita\nfrom df\nwhere year = 2012\ngroup by continent_name\n),\nsum_total as (\nselect\n        sum(gdp_per_capita) as ttl_gdp_per_capita\nfrom df\nwhere year = 2012\n),\npercent_tbl as (\nselect \n          sum_by_continent.*,\n          sum_total.ttl_gdp_per_capita,\n          round((sum_gdp_per_capita / ttl_gdp_per_capita) * 100, 1)  as percent\nfrom sum_by_continent, sum_total\n),\ntbl_sums as (\nselect\n        CASE WHEN continent_name = 'Asia' THEN 'Asia' \n        WHEN continent_name = 'Europe' THEN 'Europe' \n        ELSE 'Rest of World' END as continent_groups,\n        sum(percent) as percent\nfrom percent_tbl\ngroup by continent_groups\n)\nselect\n        MAX(CASE WHEN continent_groups = 'Asia' THEN concat(percent, '%') END) AS Asia,\n        MAX(CASE WHEN continent_groups = 'Europe' THEN concat(percent, '%') END) AS Europe,\n        MAX(CASE WHEN continent_groups = 'Rest of World' THEN concat(percent, '%') END) AS Rest_of_World\nFROM tbl_sums\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|Asia  |Europe |Rest_of_World |\n|:-----|:------|:-------------|\n|27.6% |43.8%  |28.6%         |\n\n</div>\n:::\n\n\n4a. What is the count of countries and sum of their related gdp_per_capita values for the year 2007 where the string 'an' (case insensitive) appears anywhere in the country name?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect\n        count(*) as nbr_countries,\n        sum(per_capita.gdp_per_capita) as sum_gdp_per_capita\nfrom per_capita\nleft join countries\non per_capita.country_code = countries.country_code\nwhere countries.country_name like '%an%'\nand year = 2007\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| nbr_countries| sum_gdp_per_capita|\n|-------------:|------------------:|\n|            68|            1022936|\n\n</div>\n:::\n\n\n4b. Repeat question 4a, but this time make the query case sensitive.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect\n        count(*) as nbr_countries,\n        sum(per_capita.gdp_per_capita) as sum_gdp_per_capita\nfrom per_capita\nleft join countries\non per_capita.country_code = countries.country_code\nwhere countries.country_name glob '*an*'\nand year = 2007\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| nbr_countries| sum_gdp_per_capita|\n|-------------:|------------------:|\n|            66|           979600.7|\n\n</div>\n:::\n\n\n5. Find the sum of gpd_per_capita by year and the count of countries for each year that have non-null gdp_per_capita where (i) the year is before 2012 and (ii) the country has a null gdp_per_capita in 2012. Your result should have the columns:\n\nyear\ncountry_count\ntotal\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect \n    year,\n    count(country_code) as country_count,\n    sum(gdp_per_capita) as total\nfrom per_capita\nwhere 1 = 1\nand gdp_per_capita IS NOT NULL\nand country_code IN \n    (select country_code\n    from per_capita\n    where year = 2012\n    and gdp_per_capita IS NULL)\ngroup by year\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 8 records\n\n|year | country_count|    total|\n|:----|-------------:|--------:|\n|2004 |            15| 491203.2|\n|2005 |            15| 510735.0|\n|2006 |            14| 553689.6|\n|2007 |            14| 654508.8|\n|2008 |            10| 574016.2|\n|2009 |             9| 473103.3|\n|2010 |             4| 179750.8|\n|2011 |             4| 199152.7|\n\n</div>\n:::\n\n\n6. All in a single query, execute all of the steps below and provide the results as your final answer:\n\na. create a single list of all per_capita records for year 2009 that includes columns:\n\ncontinent_name\ncountry_code\ncountry_name\ngdp_per_capita\n\nb. order this list by:\n\ncontinent_name ascending\ncharacters 2 through 4 (inclusive) of the country_name descending\n\nc. create a running total of gdp_per_capita by continent_name\n\nd. return only the first record from the ordered list for which each continent's running total of gdp_per_capita meets or exceeds $70,000.00 with the following columns:\n\ncontinent_name\ncountry_code\ncountry_name\ngdp_per_capita\nrunning_total\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith df as (\nselect\n        CASE WHEN continents.continent_name IS NULL THEN 'North America'\n            ELSE continents.continent_name END as continent_name,\n        per_capita.country_code,\n        countries.country_name,\n        per_capita.gdp_per_capita,\n        ROW_NUMBER() OVER(\n        partition by continent_name\n            order by substr(country_name, 2, 3) desc) as row_number,\n        SUM(gdp_per_capita) OVER(\n            partition by continent_name\n            order by substr(country_name, 2, 3) desc) as running_total\nfrom per_capita\nleft join countries\non per_capita.country_code = countries.country_code\nleft join continent_map\non per_capita.country_code = continent_map.country_code\nleft join continents\non continent_map.continent_code = continents.continent_code\nwhere year = 2009\norder by continent_name asc\n),\ncriteria as (\nselect\n        continent_name,\n        country_code,\n        country_name,\n        gdp_per_capita,\n        running_total,\n        row_number\nfrom df\nwhere running_total >= 70000.00\n),\nfinal as (\nselect\n        continent_name,\n        country_code,\n        country_name,\n        gdp_per_capita,\n        running_total,\n        ROW_NUMBER() OVER(\n            partition by continent_name) as row_number\nfrom criteria\n)\nselect *\nfrom final\nwhere row_number = 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 6 records\n\n|continent_name |country_code |country_name                            | gdp_per_capita| running_total| row_number|\n|:--------------|:------------|:---------------------------------------|--------------:|-------------:|----------:|\n|Africa         |LBY          |Libya                                   |      10455.575|      70227.16|          1|\n|Asia           |KWT          |Kuwait                                  |      37160.543|      73591.81|          1|\n|Europe         |CHE          |Switzerland                             |      65790.067|     119051.78|          1|\n|North America  |ECA          |Europe & Central Asia (developing only) |       5495.417|      97451.38|          1|\n|Oceania        |NZL          |New Zealand                             |      27474.333|      84623.92|          1|\n|South America  |ECU          |Ecuador                                 |       4236.778|      72315.82|          1|\n\n</div>\n:::\n\n\n7. Find the country with the highest average gdp_per_capita for each continent for all years. Now compare your list to the following data set. Please describe any and all mistakes that you can find with the data set below. Include any code that you use to help detect these mistakes.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nwith df as (\nselect\n        per_capita.country_code,\n        countries.country_name,\n        per_capita.year,\n        CASE WHEN continent_map.continent_code IS NULL THEN 'NA' \n            ELSE continent_map.continent_code END as continent_code,\n        CASE WHEN continents.continent_name IS NULL THEN 'North America' \n            ELSE continents.continent_name END as continent_name,\n        CASE WHEN per_capita.country_code IN ('EAP', 'EAS', 'LIC', 'ARB', 'NOC', 'UMC', 'MEA', 'PSS', 'MNA', 'MIC', 'LMY', 'HPC', 'NAC', 'LDC', 'LMC', 'SSF', 'SSA', 'CSS', 'WLD', 'ECA', 'HIC', 'OEC', 'OED', 'SST', 'LCN', 'SAS', 'LAC', 'OSS', 'ECS', 'EUU', 'EMU') THEN 'Region' ELSE 'Country' END as country_region,\n        per_capita.gdp_per_capita\nfrom per_capita\nleft join continent_map\non per_capita.country_code = continent_map.country_code\nleft join countries\non per_capita.country_code = countries.country_code\nleft join continents\non continent_map.continent_code = continents.continent_code\n),\navg_gdp_per_capita as (\nselect\n        continent_name,\n        country_name,\n        country_code,\n        round(AVG(gdp_per_capita), 2) as avg_gdp_per_capita\nfrom df\nwhere country_region = 'Country'\ngroup by continent_name, country_name, country_code\n),\nrank as (\nselect \n        *,\n        RANK() OVER(\n            partition by continent_name\n            order by avg_gdp_per_capita desc) as rank_gdp_per_capita\nfrom avg_gdp_per_capita\n)\nselect *\nfrom rank\nwhere rank_gdp_per_capita = 1\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 6 records\n\n|continent_name |country_name      |country_code | avg_gdp_per_capita| rank_gdp_per_capita|\n|:--------------|:-----------------|:------------|------------------:|-------------------:|\n|Africa         |Equatorial Guinea |GNQ          |           17955.72|                   1|\n|Asia           |Qatar             |QAT          |           70567.96|                   1|\n|Europe         |Monaco            |MCO          |          151421.89|                   1|\n|North America  |Bermuda           |BMU          |           84634.83|                   1|\n|Oceania        |Australia         |AUS          |           46147.45|                   1|\n|South America  |Chile             |CHL          |           10781.71|                   1|\n\n</div>\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect  *\nfrom per_capita\nwhere country_code = 'SYC'\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n|country_code | year| gdp_per_capita|\n|:------------|----:|--------------:|\n|SYC          | 2004|      10173.575|\n|SYC          | 2005|      11086.891|\n|SYC          | 2006|      12014.418|\n|SYC          | 2007|      12155.702|\n|SYC          | 2008|      11123.004|\n|SYC          | 2009|       9707.265|\n|SYC          | 2010|      10805.099|\n|SYC          | 2011|      12289.256|\n|SYC          | 2012|      12782.734|\n\n</div>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
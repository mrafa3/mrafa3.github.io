{
  "hash": "822054c5ea1843589732ccfabdd12f3f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Skills Workshop: Data Manipulation and Visualization Basics using R\"\ndescription: \"This skills workshop introduced R and the tidyverse to Master's students at the University of Denver\"\nauthor:\n  - name: Mickey Rafa\n    url: https://mrafa3.github.io/\n    #orcid: 0000-0002-5300-3075\ndate: 05-15-2018\ncategories: [Quarto, R, tidyverse, ggplot] # self-defined categories\n#citation: \n # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ \nimage: economist_plot.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n# Overview\n\nThis workshop session will help you familiarize with two of R's most widely used packages, `dplyr` and `ggplot2`. These packages are part of what is called the **tidyverse**, which is a collection of packages that are designed to work together in R to simplify and data manipulation, discovery, visualization, analysis, and more.[^1]\n\n<center>\n\n![Each tile is a package that makes up the \"tidyverse\"](tidyverse.png)\n\n</center>\n\n`dplyr` is designed to standardize the data management and manipulation process in R. `dplyr` has a small set of functions that help users navigate the most common challenges of data manipulation.[^2]  Generally speaking, these include restructuring, filtering, grouping, and summarizing your data, as well as creating new variables for your analysis.  \n\n`ggplot2` is a package for visualizing data. In this lesson, we will learn the building blocks for creating beautiful visualizations. We will learn how to produce **histograms**, **scatter plots**, and **line plots**, and we will visualize ungrouped and grouped data.  \n\n`dplyr` and `ggplot2` are packages that supply a **grammar** for data manipulation and data visualization, respectively. This workshop will only scratch the surface of what is possible, but learning the fundamentals of these packages can empower you to do a ton of exciting things in R.  \n\n[^1]: https://www.tidyverse.org/packages/\n[^2]: https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html\n\n# Introduction \n\n## Workshop format and key terms \n\nTwo quick notes on the format of this workshop:  \n\n1.  There are links to additional resources in the end notes of this document. I have personally used most of these resources to build my skills in R, so I hope you will find them useful, too.  \n2.  Throughout the workshop, there will be exercises to complete on your own or with your table mates. Do you best to complete these based on what you've learned. If you get stuck, you can click the \"Code\" button on the right to show the code that I would use to answer the question. Use that to test yourself and figure out why it works.  \n\nThere are a few **key terms** that we'll use throughout this session.\n\nTerm                       | Definition\n-------------------------- | -----------------------------------\n**Functions**              | You give R an input, it generates an output. A give-away that you're working with a function is parentheses.\n**Arguments**              | Functions take arguments as their input. If you're ever unsure of which arguments that a function takes, you can type args(\"function name\"), ?(\"function name\"), or help(\"function name\").\n**Packages**               | A collection of code, functions, documentation, and occasionally data, created and curated by users of the R community.\n**Working directory**      | This is the location on your computer where all files relevant to your project are saved. Any files that are imported to or exported from your analysis should be here. Think of this as your project's home base.\n**Object**                 | R is an object-oriented programming language, meaning that you can assign meaning to a user-defined string that you can then manipulate or visualize. In R, you can assign objects with the \"**<-**\" assignment operator. It can be a single value, list of values, a full data set, a function, etc. In this session, the primary object that we'll use is the gapminder dataset.  \n\n<br> \n\n## Setting up your R Project environment  \n\nTo get started, we need to set up our new **project environment**, with the following steps:  \n\n1.  Open R Studio, and go to **File** --> **New Project**.\n\n<center>\n![](new_project_1.png)\n</center>\n<br>\n2.  Select **New Directory**.  \n\n<center>\n![](new_project_2.png)\n</center>\n<br>\n3.  Select **New Project**.  \n\n<center>\n![](new_project_3.png)\n</center>\n<br>\n4.  Type in a name for your project under \"Directory name\". Choose the location where you want this R Project to live on your computer. Select **Create Project**.\n\n<center>\n![](new_project_4.png)\n</center>\n<br>\nThese steps have established a directory on your computer where your R project lives. This is a very good practice to keep when you are starting a new analysis. You will keep all related files in this project folder, and R will know that this is your **working directory** (where all files relevant to your project are saved).\n\n5. Finally, go to **File** --> **New File** --> **R Notebook**. R notebook files are an excellent way to perform an analysis, because they allow for R code and documentation to work side-by-side. This enables you to tell a story that moves alongside your quantitative analysis, and it can be output in all kinds of formats, including Word documents, .pdfs, and .html files.\n\n<center>\n![](new_project_5.png)\n</center>\n<br>\nWe could do a full session on R projects and notebooks, but this should be sufficient to get you started.\n\n<br>\n\n# The Gapminder dataset  \n\n<center>\n\n![Hans Rosling -- our favorite Swedish statistician](https://eagereyes.org/wp-content/uploads/2017/02/hans-rosling-tc14.jpg)\n\n</center>\n\nWe'll learn the main `dplyr` functions using the **gapminder** dataset. Now that we have our project environment set up, some brief refreshers from the previous workshop:  \n\n1.  Install the tidyverse and gapminder packages (`install.packages()`)  \n\n\n\n\n2.  Load the tidyverse and gapminder packages (`library()` and `require()` effectively do the same thing, but `library()` provides more information that is occasionally useful)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)      #for data management, manipulation, visualization, and exploratory data analysis\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(gapminder)      #for the gapminder dataset\n```\n:::\n\n\n3.  Type in `data(\"gapminder\")` to read in the gapminder dataset as an object in your global environment.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"gapminder\")\n```\n:::\n\n\n4.  Look at the structure of the gapminder dataset (`str()` and `glimpse()` both work here)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n```\n\n\n:::\n:::\n\n\nLooking at the general structure of the dataset gives us a few useful insights:\n\n*  Object class  \n*  Rows and columns  \n*  Variable types: factor (categorical) vs. numeric/integer  \n\nUse the `summary()` command to produce a high-level statistical summary of the variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n```\n\n\n:::\n:::\n\n\n<br>\n\n>Before we start into the gapminder analysis, note that this is a **\"cleaned\"** dataset. There are no missing values, major issues with data types, or values that could be flagged as suspicious. That was a conscious choice for this workshop, so that we could get into data manipulation and visualization. In your own work, it is extremely likely that you will need to do more data preparation before analysis.  \n\n<br> \n\n# dplyr's main functions  \n\n## distinct()  \n\nTo begin our anlaysis, let's look at the years that are available in the gapminder dataset. There are many ways to do this, but I'll use the `distinct()` function from `dplyr`.\n\n**Create a new code chunk (Ctrl + Alt + I), and type `gapminder %>% distinct(year)`.** Then, execute the code chunk (with the green play button in the upper righthand corner of the chunk).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  distinct(year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 1\n    year\n   <int>\n 1  1952\n 2  1957\n 3  1962\n 4  1967\n 5  1972\n 6  1977\n 7  1982\n 8  1987\n 9  1992\n10  1997\n11  2002\n12  2007\n```\n\n\n:::\n:::\n\n\nThis shows us that we have data that are in five-year increments from 1952 to 2007. \n\nBefore we move on, let's take a closer look at the code above, because it uses a style that we will be fluent in by the end of this session. This code uses \"**piping**\" (the %>%), which is a coding style that makes code more readable and easier to troubleshoot.[^3] The \"pipe\" (%>%) tells R to take the object to the left of the pipe and feed it to the first argument in the code following the pipe. The code above can be read as:\n\n*  Take the `gapminder` dataframe and feed it into the `distinct()` function, THEN  \n*  Return the distinct or unique values in the `year` column  \n\nWhen reading your code, you can think of the **pipe operator (%>%)** as \"THEN\". To use the above example, take the gapminder dataframe, **THEN** return the distinct values in the year column. \n\nLet's look at the **distinct continents** in the gapminder dataset. In your code chunk, relace `distinct(year)` with `distinct(continent)`. Then, with your cursor on the same line as the code, **use the keyboard shortcut for running a block of code (Ctrl + Enter)**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  distinct(continent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  continent\n  <fct>    \n1 Asia     \n2 Europe   \n3 Africa   \n4 Americas \n5 Oceania  \n```\n\n\n:::\n:::\n\n\nThis is how the code looks without piping. Not too difficult (yet).  \n \n>distinct(gapminder, continent)\n\nThis simple example does not convey the full value of piping, but that will be clear by the end of the session. \n\n[^3]: For an extremely in-depth article on pipe operators, including where they came from and why they are so useful, see here: https://www.datacamp.com/community/tutorials/pipe-r-tutorial  \n\n## filter() \n\n<center>\n![](filter_graphic.png)\n</center>\n\nThe `filter()` function allows you to subset your data by values of the variables in your dataset. \n\n**We're going to use piping a lot in this session**, so let's get comfortable with it. Try using the pipe operator keyboard shortcut (**Ctrl + Shift + M**) with your code from this point forward. \n\nLet's filter the gapminder dataframe to look at only the values in the year 2007.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(year == 2007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 × 6\n   country     continent  year lifeExp       pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>     <int>     <dbl>\n 1 Afghanistan Asia       2007    43.8  31889923      975.\n 2 Albania     Europe     2007    76.4   3600523     5937.\n 3 Algeria     Africa     2007    72.3  33333216     6223.\n 4 Angola      Africa     2007    42.7  12420476     4797.\n 5 Argentina   Americas   2007    75.3  40301927    12779.\n 6 Australia   Oceania    2007    81.2  20434176    34435.\n 7 Austria     Europe     2007    79.8   8199783    36126.\n 8 Bahrain     Asia       2007    75.6    708573    29796.\n 9 Bangladesh  Asia       2007    64.1 150448339     1391.\n10 Belgium     Europe     2007    79.4  10392226    33693.\n# ℹ 132 more rows\n```\n\n\n:::\n:::\n\n\nThis returns the 142 records (or rows) that are in the year 2007. \n\nWhat's the double equal sign (\"**==**\") mean? This is a **boolean equal**, meaning that it is evaluating whether the equation returns a TRUE or FALSE. The above code can be read as \"filter, return rows in which the variable year equals 2007\". All rows that would return a TRUE for \"year equals 2007\" are displayed.  \n\nYou can also use the `filter()` command on multiple conditions, too. Just separate the conditions with a comma. The code below takes the gapminder dataframe, and filters the data in which the **country** is South Africa and the **year** is 2007. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(country == 'South Africa',\n         year == 2007)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  country      continent  year lifeExp      pop gdpPercap\n  <fct>        <fct>     <int>   <dbl>    <int>     <dbl>\n1 South Africa Africa     2007    49.3 43997828     9270.\n```\n\n\n:::\n:::\n\n\nThis shows that the dataset has only one occurrence of South Africa in 2007. Note that in `dplyr`, separating arguments with a comma allows you to combine multiple logical expressions. How would you read the above code aloud?\n\n**One thing to keep in mind** -- your data object remains unchanged, unless you assign the `filter()` to a new object. To save the above code as a new object, you need to assign it to a new named object, such as:  \n\n<center>\n\n>sa_2007 <- gapminder %>% \n  filter(country == 'South Africa',\n         year == 2007)\n\n</center>\n\n<br>\n\n## arrange()  \n\nThe `arrange()` function sorts your data -- a very common thing to do in an exploratory data analysis. Let's arrange the gapminder data by life expectancy (the variable is called **lifeExp**).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  arrange(lifeExp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 6\n   country      continent  year lifeExp     pop gdpPercap\n   <fct>        <fct>     <int>   <dbl>   <int>     <dbl>\n 1 Rwanda       Africa     1992    23.6 7290203      737.\n 2 Afghanistan  Asia       1952    28.8 8425333      779.\n 3 Gambia       Africa     1952    30    284320      485.\n 4 Angola       Africa     1952    30.0 4232095     3521.\n 5 Sierra Leone Africa     1952    30.3 2143249      880.\n 6 Afghanistan  Asia       1957    30.3 9240934      821.\n 7 Cambodia     Asia       1977    31.2 6978607      525.\n 8 Mozambique   Africa     1952    31.3 6446316      469.\n 9 Sierra Leone Africa     1957    31.6 2295678     1004.\n10 Burkina Faso Africa     1952    32.0 4469979      543.\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\nThis shows us that Rwanda in 1992 is the lowest life expectancy in the dataset. By default, the `arrange()` function sorts your data in ascending order. What if we want to sort the data by the largest GDP per capita (variable is **gdpPercap**) in the dataset? \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  arrange(-gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 6\n   country   continent  year lifeExp     pop gdpPercap\n   <fct>     <fct>     <int>   <dbl>   <int>     <dbl>\n 1 Kuwait    Asia       1957    58.0  212846   113523.\n 2 Kuwait    Asia       1972    67.7  841934   109348.\n 3 Kuwait    Asia       1952    55.6  160000   108382.\n 4 Kuwait    Asia       1962    60.5  358266    95458.\n 5 Kuwait    Asia       1967    64.6  575003    80895.\n 6 Kuwait    Asia       1977    69.3 1140357    59265.\n 7 Norway    Europe     2007    80.2 4627926    49357.\n 8 Kuwait    Asia       2007    77.6 2505559    47307.\n 9 Singapore Asia       2007    80.0 4553009    47143.\n10 Norway    Europe     2002    79.0 4535591    44684.\n# ℹ 1,694 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n#you could also do...\n#gapminder %>% \n#  arrange(desc(gdpPercap))\n\n#or if you wanted to return the top X GDP per capita records\n#you could use the top_n() function from dplyr\n#gapminder %>%\n#  arrange(-gdpPercap) %>% \n#  top_n(15, gdpPercap)\n```\n:::\n\n\n---\n\n**Exercises**:\n\n*  You can also arrange by multiple variables with the `arrange()` function. Let's say that you want to arrange the gapminder data by year and by life expectancy. Try using `gapminder %>% arrange(year, lifeExp)`. What do you see? \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  arrange(year, lifeExp)\n```\n:::\n\n\n*  Let's put the `filter()` and `arrange()` functions together. I'd like to see the **life expectancy of all Asian countries from the year 2000 to the most recent year, sorted in ascending order**. How might we do that?  \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(year >= 2000,\n         continent == 'Asia') %>% \n  arrange(lifeExp)\n```\n:::\n\n\n<br>\n\nWhen you are combining multiple functions, the power and clarity of piping becomes more obvious. This is what the previous code would look like **without piping**.\n\n<br>\n\n<center>\n\n> arrange(filter(gapminder, year >= 2000, continent == 'Asia'), lifeExp)\n\n<br>\n\n**Who would like to try to read this?**\n\n</center>\n\n<br>\n\nWithout piping, you need to write this code inside-out! Does anyone actually find this easier?! \n\n<br>\n\n## mutate()  \n\n<center>\n![](mutate_graphic.png)\n\n</center>\n\nIn data analysis, it's common to want to create or *derive* new variables from your original dataset. This is done with the `dplyr::mutate()` function. For example, you might want to create a variable that is the distance in time from the beginning of the dataset. This is a typical derived variable used in regression modeling.\n\nFor these new variables, let's save this as a new data object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- gapminder %>% \n  mutate(time_dist = year - 1952)\n\nprint(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap time_dist\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.         0\n 2 Afghanistan Asia       1957    30.3  9240934      821.         5\n 3 Afghanistan Asia       1962    32.0 10267083      853.        10\n 4 Afghanistan Asia       1967    34.0 11537966      836.        15\n 5 Afghanistan Asia       1972    36.1 13079460      740.        20\n 6 Afghanistan Asia       1977    38.4 14880372      786.        25\n 7 Afghanistan Asia       1982    39.9 12881816      978.        30\n 8 Afghanistan Asia       1987    40.8 13867957      852.        35\n 9 Afghanistan Asia       1992    41.7 16317921      649.        40\n10 Afghanistan Asia       1997    41.8 22227415      635.        45\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n---\n\n**Exercises**:  \n\n*  Use `dplyr::mutate()` to create two other variables -- **GDP** and **population (in millions)**. Note that just like the `filter()` function, which allows you to have multiple conditions, you can also create multiple new variables by using a comma within `mutate()`.  \n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- gapminder %>% \n  mutate(gdp = gdpPercap * pop,\n         pop = pop/1000000)\n```\n:::\n\n\n*  What are the countries with the largest total GDP in 2007?  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(year == 2007) %>% \n  arrange(desc(gdp))\n```\n:::\n\n\n---\n\n<br>\n\n## summarise()   \n\nIn your own anlayses, you've probably calculated summary stats for variables. Earlier, we used `summary(gapminder)` to get an overview of the gapminder dataset, based on some preset functions. `summarise()` can produce the same summary statistics as `summary()`, but you have total control over the output (it can do some neat things with grouped data, too, which you will see later). Think of `summarise()` as useful when you want to condense many rows of data down into a smaller number of rows with summary information.\n\n<center>\n![](summarise_graphic.png)\n\n</center>\n\nThe `summarise()` function follows the same syntax as `mutate()`, which is used for creating or deriving new variables, too. The difference is that `summarise()` is creating a new **grouped** variable with an **aggregate function**. Using the gapminder dataset as an example, what is the mean life expectancy from the dataset? \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  summarise(meanlifeExp = mean(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  meanlifeExp\n        <dbl>\n1        59.5\n```\n\n\n:::\n:::\n\n\nThis code is returning the average life expectancy for all countries and years in the dataset. \n\n---\n\n**Exercise**:  \n\n*  What happens if you use `mutate()` instead of `summarise()` to calculate the average life expectancy for the data? Why is that different from using `summarise()`?  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  mutate(meanlifeExp = mean(lifeExp))\n```\n:::\n\n\n---\n\nThis may be useful for your research question, but it is far more likely that you'll want to summarise a variable like **lifeExp** by a **grouping variable**. For instance, what is the average life expectancy from this dataset **by year**? Anytime you want to summarise a variable \"BY\" another variable, `dplyr::group_by()` comes in handy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  group_by(year) %>% \n  summarise(meanlifeExp = mean(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n    year meanlifeExp\n   <int>       <dbl>\n 1  1952        49.1\n 2  1957        51.5\n 3  1962        53.6\n 4  1967        55.7\n 5  1972        57.6\n 6  1977        59.6\n 7  1982        61.5\n 8  1987        63.2\n 9  1992        64.2\n10  1997        65.0\n11  2002        65.7\n12  2007        67.0\n```\n\n\n:::\n:::\n\n\nThe above code groups the gapminder dataset by the **year** variable and computes the average life expectancy per year. This shows the gradual advancement in global average life expectancy over time. Pretty neat!\n\nThe gapminder dataset begs the question: how has the average life expectancy changed over time and across continents? Said another way, how has average life expectancy changed **BY** year and **BY** continent? **BY** is a hint that you want to group your data to answer your question. Just like previous functions that we've learned (such as `filter()` and `mutate()`), you can group your data by multiple conditions with comma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  group_by(year, continent) %>% \n  summarise(meanlifeExp = mean(lifeExp))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 × 3\n# Groups:   year [12]\n    year continent meanlifeExp\n   <int> <fct>           <dbl>\n 1  1952 Africa           39.1\n 2  1952 Americas         53.3\n 3  1952 Asia             46.3\n 4  1952 Europe           64.4\n 5  1952 Oceania          69.3\n 6  1957 Africa           41.3\n 7  1957 Americas         56.0\n 8  1957 Asia             49.3\n 9  1957 Europe           66.7\n10  1957 Oceania          70.3\n# ℹ 50 more rows\n```\n\n\n:::\n:::\n\n\nWith this code, we're able to see some strong variability in average life expectancy by continent. This is worth exploring more closely.  \n\n---\n\n**Exercises**:  \n\nI'd like to create a new **grouped** summary dataframe with the gapminder dataset. Group gapminder by year and continent, and generate the following summary calculations:  \n\n*  The total population (`sum()`)  \n*  The mean life expectancy (`mean()`) \n*  The mean GDP per capita (`mean()`)  \n*  The count of countries in the dataset in each continent/year pair (`n()`)\n\nSave this to a new object called `gapminder_by_year_continent`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_by_year_continent <- gapminder %>% \n  group_by(year, continent) %>% \n  summarise(totalPop = sum(pop), \n            meanlifeExp = mean(lifeExp),\n            meanGdpPercap = mean(gdpPercap),\n            count_countries = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\nNow, answer the following questions:\n\n*  Which continent had the lowest mean life expectancy in 1982?  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_by_year_continent %>% \n  filter(year == 1982) %>% \n  arrange(meanlifeExp)\n```\n:::\n\n\n*  How many countries in Oceania are in the dataset in 2007?  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_by_year_continent %>% \n  filter(year == 2007,\n         continent == 'Oceania')\n```\n:::\n\n\n*  What was Africa's mean GDP per capita value in 1987?  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_by_year_continent %>% \n  filter(year == 1987,\n         continent == 'Africa')\n```\n:::\n\n\n*  What is the difference between `summary()` and `summarise()`, and when would you use them?  \n\n---\n\nThere's so much that you can do with the `dplyr` verbs working together. `group_by()` is often combined with `summarise()`, but you can also use it with `mutate()`. For instance, you could group the gapminder dataset by year and produce within year rankings for life expectancy. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  group_by(year) %>% \n  mutate(lifeExp_rank = rank(desc(lifeExp))) %>% \n  arrange(year, lifeExp_rank)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 9\n# Groups:   year [12]\n   country        continent  year lifeExp    pop gdpPercap time_dist         gdp\n   <fct>          <fct>     <int>   <dbl>  <dbl>     <dbl>     <dbl>       <dbl>\n 1 Norway         Europe     1952    72.7  3.33     10095.         0     3.36e10\n 2 Iceland        Europe     1952    72.5  0.148     7268.         0     1.08e 9\n 3 Netherlands    Europe     1952    72.1 10.4       8942.         0     9.28e10\n 4 Sweden         Europe     1952    71.9  7.12      8528.         0     6.08e10\n 5 Denmark        Europe     1952    70.8  4.33      9692.         0     4.20e10\n 6 Switzerland    Europe     1952    69.6  4.82     14734.         0     7.09e10\n 7 New Zealand    Oceania    1952    69.4  1.99     10557.         0     2.11e10\n 8 United Kingdom Europe     1952    69.2 50.4       9980.         0     5.03e11\n 9 Australia      Oceania    1952    69.1  8.69     10040.         0     8.73e10\n10 Canada         Americas   1952    68.8 14.8      11367.         0     1.68e11\n# ℹ 1,694 more rows\n# ℹ 1 more variable: lifeExp_rank <dbl>\n```\n\n\n:::\n:::\n\n\n<br> \n\n# Visualization with ggplot2  \n\n`ggplot2` is a tremendously flexible visualization package in R. \"Gg\" stands for the \"grammar of graphics\", which is an effort to build a language around how analysts define elements of a visualization. The rationale behind the development of `ggplot2` is simple. If you have a way of communicating elements of a data visualization **with precision**, then you can develop and collaborate more effectively.  \n\nThere are three primary elements of `ggplot2` graphics:  \n\n1.  The **data** that you want to visualize.    \n2.  The **aesthetics** (or aesthetic mappings) of the graphic, the variables that make up the visualization.  \n3.  The **geoms**, or the type of visualization that you want to create (scatterplot, bar plot, line graph, histogram, etc.). \n\nThere are many, many types of visualizations supported, so mastering these elements unleashes a ton of possibilities.[^4] We will come back to each of the elements for every viz that we create.\n\n[^4]: This is a useful reference for learning about all of the geom options in ggplot. This might look overwhelming, but it is something that you pick up more as you move into more exotic visualization types. (http://ggplot2.tidyverse.org/reference/#section-layer-geoms)\n\n## Histograms\n\nLet's begin with **histograms**:  \n\n*  First, using the **piping** that we learned previously, filter the gapminder data to only include the 2007 rows.  \n*  Then, let's start defining the `ggplot2` elements (data, aesthetics, geoms). Click on the \"Code\" box below to walk through an example.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngapminder %>%                           #DATA\n  filter(year == 2007) %>%              #DATA\n  ggplot(aes(x=lifeExp)) +              #AESTHETICS\n  geom_histogram()                      #GEOM\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/gapminder_histogram_1-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nLet's examine the code before we unpack the graphic:  \n\n*  You'll recall from the `dplyr` functions that we've learned so far that **piping** is an effective way to write code that flows between functions. First, we piped the gapminder data to `filter()`, then we piped that filtered dataframe to `ggplot()`.  \n*  Within ggplot's functions (`ggplot()` and `geom_histogram()`) we **always use a plus sign**. Think of ggplot as a canvas where the graphic is built by the addition of elements.  \n*  Then, we defined the aesthetics (`aes()`), or what we wanted to graph. In a histogram, you are simply visualizing the distribution of one variable, so you only need to tell ggplot which variable to visualize (within **x=**).  \n*  Finally, we added the **geom** to the aesthetic, which tells ggplot the type of graphic that we wanted to create (`geom_histogram()`).    \n\nWe'll get more practice with ggplot's three elements -- data, aesthetics, and geoms -- as we go. \n\n<br>\n\n## Scatter plots  \n\nWhat might explain the variation in life expectancy across countries (*think variables from the Gapminder dataset*)? \n\n**Scatter plots** show the relationship between two variables. Let's create a viz of the **relationship between GDP per capita and life expectancy in 2007**. Using the previous histogram code as our starting point, we would need to change two things:    \n\n*  Since scatter plots visualize **two** variables, we need to add a **`y=gdpPercap`** to our aesthetic.   \n*  Instead of using `geom_histogram()`, we will use `geom_point()` for a scatter plot.  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngapminder %>%                           #DATA\n  filter(year == 2007) %>%              #DATA\n  ggplot(aes(x=gdpPercap,               #AESTHETICS\n                 y=lifeExp)) +          #AESTHETICS\n  geom_point()                          #GEOM\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/gapminder_scatter_1-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThe graphic shows some interesting behavior:  \n\n*  Many countries are clustered below $10,000 per capita, but the range of average life expectancy is quite dramatic. \n*  There is a saturating behavior in the data, meaning that at a certain average life expectancy (about 75 and up), income does not seem to have a strong relationship with life expectancy outcomes.  \n*  There appears to be a strong logarithmic relationship between these variables, meaning that the x-axis has a scale that increases in orders of magnitude (1,000 - 10,000 - 100,000).  \n\nThe above graphic is very interesting. However, the gapminder dataset has additional information that could be put to use to extract more value from this viz. Let's see what this looks like when you color each point by the continent. To do this, add `color=continent` to the aesthetic.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngapminder %>%                         #DATA\n  filter(year == 2007) %>%            #DATA\n  ggplot(aes(x=gdpPercap,             #AESTHETIC\n             y=lifeExp,               #AESTHETIC    \n             color=continent)) +      #AESTHETIC\n  geom_point()                        #GEOM\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/gapminder_scatter_2-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThis illustrates that many of the poorest performing countries are located in Africa.\n\n---\n\n**Exercises**:\n\n*  Set `color=\"blue\"` in the previous code. What do you see? Why do you think that is happening?  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngapminder %>%                         #DATA\n  filter(year == 2007) %>%            #DATA\n  ggplot(aes(x=gdpPercap,             #AESTHETIC\n             y=lifeExp,               #AESTHETIC\n             color=\"blue\")) +         #AESTHETIC    \n  geom_point()                        #GEOM\n```\n:::\n\n\n---\n\nThere are dozens of ways that you can customize `ggplot2` visualizations. With enough practice, you can have total control of the visualizations that you create. Let's start with two very common and useful customizations:  \n\n1.  Putting the x-axis on a logarithmic scale, and  \n2.  Changing the axis labels.\n\nTo transform the x-axis to a logarithmic scale, simply add `scale_x_log10()` to the previous visualization's code. This will compress the x-axis and show a more linear relationship than the previous graphic.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngapminder %>%                             #DATA\n  filter(year == 2007) %>%                #DATA\n  ggplot(aes(x=gdpPercap,                 #AESTHETIC\n                 y=lifeExp,               #AESTHETIC\n                 color=continent)) +      #AESTHETIC\n  geom_point() +                          #GEOM\n  scale_x_log10()                         #CUSTOMIZING ELEMENT\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/gapminder_scatter_3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThe `labs()` command in ggplot allows users to take control of the axis labels.  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngapminder %>%                             #DATA\n  filter(year == 2007) %>%                #DATA\n  ggplot(aes(x=gdpPercap,                 #AESTHETIC\n             y=lifeExp,                   #AESTHETIC\n             color=continent)) +          #AESTHETIC\n  geom_point() +                          #GEOM\n  scale_x_log10() +                       #CUSTOMIZING ELEMENT\n  labs(x='GDP per capita (logged)',       #CUSTOMIZING ELEMENT\n       y='Average life expectancy')       #CUSTOMIZING ELEMENT\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/gapminder_scatter_4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n---\n\n**Exercise**:  \n\n*  Create another scatterplot with another variable combination from the gapminder dataset.  \n\n---\n\n<br>\n\n## Line plots \n\n**Line plots** are typically used to visualize the behavior of a variable over some component of time. Let's go back to the `gapminder_by_year_continent` dataframe that we created earlier. This is a dataframe with summary stats by continent and year. We'll use this data to create a **line graph** showing the average life expectancy by continent over time.\n\n---\n\n**Exercises**:  \n\n*  We have the **data** element already (`gapminder_by_year_continent`). What are the other two ggplot elements that we need to create a graphic?  \n*  What would be our `x=` and `y=` arguments in the aesthetic?  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngapminder_by_year_continent %>% \n  ggplot(aes(x=year,\n             y=meanlifeExp,\n             group=continent,\n             color=continent)) + \n  geom_line() + \n  ggtitle('Life expectancy by continent over time',\n          subtitle = 'Gapminder dataset') + \n  labs(x='Year',\n       y='Average life expectancy')\n```\n:::\n\n\n---\n\nThis plot shows us very clearly the gap between Africa and all other continents in life expectancy over time.\n\n---\n\n**Exercises**:  \n\n*  Plot another one of the summarised variables from the `gapminder_by_year_continent` dataframe over time.  \n*  Using the `gapminder` dataframe, `filter()` the data on a country of your choice, and visualize a line plot over time (any variable you'd like).  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nex_country <- c('Zambia', 'China', 'Argentina', 'Bulgaria')\n\ngapminder %>% \n  filter(country %in% ex_country) %>% \n  ggplot(aes(x=year,\n             y=lifeExp,\n             color=country)) + \n  ggtitle('Average life expectancy at birth, select countries',\n          subtitle = '1957-2007') + \n  labs(x='Year',\n       y='Life expectancy at birth (years)',\n       caption='Gapminder dataset',\n       color='') + \n  geom_line() + \n  theme(legend.position = 'top')\n```\n:::\n\n\n---\n\n<br>\n\n## Extended use of ggplot2\n\nThere are many, many ways that you can customize or expand your visualization repertoire by understanding the three basic elements of ggplot graphics. Here is a look at two other extensions (*you can just follow along*):  \n\n*  The `ggthemes` package allows for replicating the visualization themes of some major publications, including The Economist, The Wall Street Journal, and FiveThirtyEight.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"ggthemes\")\nlibrary(ggthemes)\n```\n:::\n\n\n*  You can also plot multiple geoms on the same graphic, which can be very useful in highlighting a story from your data.  \n\nWhat if you wanted to show a story of the improvement of life expectancy over time? You might want to fit a linear regression model to your scatter plot. The code below demonstrates how this might be done, using the visualization theme from The Economist.  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngapminder %>% \n  mutate(generation=ifelse(year < 1970, '1950s-60s',\n                    ifelse(year >= 1970 & year < 1990, '1970s-80s', '1990s-2000s'))) %>% \n  ggplot(aes(x=gdpPercap,\n                 y=lifeExp,\n                 color=generation)) + \n  geom_point() + \n  scale_x_log10() + \n  geom_smooth(method = \"lm\", se=FALSE) + \n  ggtitle('Relationship between GDP per capita, average life expectancy, and time') + \n  labs(x='GDP per capita (logged)',\n       y='Average life expectancy',\n       color='',\n       caption='Gapminder dataset') + \n  theme_economist()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/mult_geoms-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n<br>\n\n# Re-cap and resources  \n\nIf you've stayed with us this long, you've learned quite a few data management, manipulation, and visualization skills. The `dplyr` package has a collection of simple, yet powerful management and analysis tools. In this session, you practiced the following:  \n\ndplyr function                          | Purpose\n--------------------------------------- | ---------------------------------------------\n`dplyr::distinct()`                     | Returns the unique values of a variable\n`dplyr::filter()`                       | Returns the observations, or rows, based on logic that you determine\n`dplyr::arrange()`                      | Changes the ordering of the rows\n`dplyr::mutate()`                       | Adds new variables that are functions of existing variables\n`dplyr::summarise()`                    | Reduces multiple values down to a single summary\n`dplyr::group_by()`                     | Groups observations by categorical variables for summary analysis\n\n\nYou've also learned how to use `ggplot2` to visualize your data, by specifying the main elements of ggplot graphics:   \n\nggplot element                          | Purpose\n--------------------------------------- | --------------------------------------------\n**Data**                                | The dataset that you want to visualize\n**Aesthetics**, or aesthetic mappings   | The variables from the dataset that you want to visualize (and how you want to visualize them)\n**Geoms**                               | The type of visualization that you want to create (scatter, bar plot, line plot, histogram, etc.)\n\n\nFinally, you've learned three of the most common types of visualizations -- histograms, scatterplots and line plots -- with `geom_histogram()`, `geom_point()`, and `geom_line()`, respectively. You've learned how to make small customizations to your graphics to improve the effectiveness and the amount of information contained in your visualizations, such as adding axis labels and a title, coloring your plot by another variable, and changing the scale of an axis. There are endless options/customizations within `ggplot2`, and it's an incremental process to reach mastery. (Hopefully, a future Pardee Methods Workshop will focus exclusively on visualizing data in R!)\n\nThere are many other `dplyr` functions and `ggplot2` customizations that we couldn't cover, such as:   \n\n*  `dplyr::select()` returns the variables, or columns, that you wish to work with.  \n*  `dplyr::rename()` allows you to change a variable name.  \n*  `dplyr::left_join()` and `dplyr::inner_join()` are the most common functions to join two related dataframes.  \n*  And there are dozens of other ggplot geoms and themes to take complete control over your graphics.  \n\nThere are TONS of great resources for learning R. You might check out:  \n\n*  Package vignettes are a great way to learn about a package or a particular function. Just type in \"?InsertPackageName\" or \"?InsertFunctionName\" (quotations excluded) to find information from R Studio's help panel. (**FREE**)\n*  R-bloggers - \"How to Learn R\"[^5]  (**FREE**)  \n*  The John's Hopkins Data Science Coursera[^6] (**FREE** option available)  \n*  Swirl is an interactive course run through an R package[^7] (**FREE**)  \n*  R Studio hosts cheat sheets for some of the most common issues, packages, and functions -- including `dplyr` and `ggplot2`[^8] (**FREE**)  \n*  There are many ggplot galleries available online that might inspire you to learn new visualization types[^9] (**FREE**)\n\nSome parting thoughts, borrowed from a data science blog:   \n\n>1. **Type everything**. I know you can just copy and paste from the tutorial, but do yourself a favor and type it out. You will start learning the subtleties of the syntax and get used to typing in new ways.  \n>2. **Break everything and make mistakes**. When you run code that gives you the results you want, don't stop there. Change the wording, change the symbols, try different combinations. You reinforce what is correct by understanding what is wrong and of course how to fix mistakes. Learning to fix mistakes is the fastest most effective way of learning programming (actually this is true when learning anything).  \n>3. **Teach others**. One way to make sure you understand a concept is to explain it to someone else.\n>http://cierareports.org/blog/2013/10/18/rCourse2013/\n\n[^5]: https://www.r-bloggers.com/how-to-learn-r-2/  \n[^6]: https://www.coursera.org/specializations/jhu-data-science  \n[^7]: http://www.swirlstats.com/\n[^8]: https://www.rstudio.com/resources/cheatsheets/\n[^9]: http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html \n\n<br>",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
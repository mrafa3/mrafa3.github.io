{
  "hash": "590deeaaf380bc771a49222f536fbd06",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How do Beyonce and Taylor Swift lyrics differ?\"\ndescription: \"Using {tidytext} to process and visualize word pairs in song lyrics\"\nauthor:\n  - name: Mickey Rafa\n    url: https://mrafa3.github.io/\ndate: 10-04-2020\ncategories: [R, \"#TidyTuesday\", bar-plot, nlp] # self-defined categories\nimage: \"tt_2020_40_thumbnail.png\"\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    code-link: true\n    code-fold: true\n    code-tools: true\n    code-summary: \"Show code\"\n    self-contained: true\n\neditor_options: \n  chunk_output_type: inline\n  \nexecute: \n  error: false\n  message: false\n  warning: false\n  eval: true\n---\n\n\n\n![Barplot illustrating the top word pairs used by Taylor Swift and Beyonce in their song catalog.](tt_2020_40.png){#fig-1}\n\n# 1. Load Packages & Setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\n    tidyverse,\n    tidytuesdayR,\n    ggtext,\n    showtext,\n    patchwork,\n    janitor,   #for clean_names()\n    scales,\n    htmltools, #for tagList()\n    glue,\n    here,\n    stopwords,\n    tidytext,     #for text management\n    tidylo,\n    SnowballC    #for text stemming\n)    \n\nfont_add_google(\"Charm\")\nshowtext_auto()\n```\n:::\n\n\n\n# 2. Read in the Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntt_year <- 2020\ntt_week <- 40\n\ntuesdata <- tidytuesdayR::tt_load(tt_year, week = tt_week)\n\nbeyonce_lyrics <- tuesdata$beyonce_lyrics\ntaylor_swift_lyrics <- tuesdata$taylor_swift_lyrics\n```\n:::\n\n\n\n# 3. Examine the Data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeyonce_lyrics %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 22,616\nColumns: 6\n$ line        <chr> \"If I ain't got nothing, I got you\", \"If I ain't got somet…\n$ song_id     <dbl> 50396, 50396, 50396, 50396, 50396, 50396, 50396, 50396, 50…\n$ song_name   <chr> \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1+1\", \"1…\n$ artist_id   <dbl> 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498, 498…\n$ artist_name <chr> \"Beyoncé\", \"Beyoncé\", \"Beyoncé\", \"Beyoncé\", \"Beyoncé\", \"Be…\n$ song_line   <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n```\n\n\n:::\n\n```{.r .cell-code}\ntaylor_swift_lyrics %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 132\nColumns: 4\n$ `Artist ` <chr> \"Taylor Swift \", \"Taylor Swift \", \"Taylor Swift \", \"Taylor S…\n$ Album     <chr> \"Taylor Swift \", \"Taylor Swift \", \"Taylor Swift \", \"Taylor S…\n$ `Title `  <chr> \"Tim McGraw\", \"Picture to Burn\", \"Teardrops on my Guitar \", …\n$ Lyrics    <chr> \"He said the way my blue eyes shinx\\nPut those Georgia stars…\n```\n\n\n:::\n:::\n\n\n\n# 4. Tidy the Data \n\nStop words should be approached in a custom way given the context of the data. Because lyrics tend to use lots of traditional stop words that are meaningful to the song, I chose to only filter out stop words of three characters or less (using the snowball lexicon). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstop_words_lyrics <- stop_words %>% \n  filter(lexicon == 'snowball') %>% \n  filter(str_length(word) < 4)\n```\n:::\n\n\n\nI'd like to visualize the bigrams, or word pairs, in their lyrics, excluding any that are repeated words. I also considered removing any numbers, but given that I plan to only visualize the top bigrams, these won't be a factor.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntok_beyonce_lyrics <- beyonce_lyrics %>% \n   janitor::clean_names() %>%\n   tidytext::unnest_tokens(output = bigram, \n                          input = line,\n                          token = 'ngrams',\n                          n = 2) %>% \n   distinct(bigram, song_id, .keep_all = TRUE) %>% \n   select(bigram, artist_name) %>% \n   separate(bigram, into = c('first', 'second'), sep=' ', remove=FALSE) %>%\n   left_join(stop_words_lyrics, by=c('first' = 'word')) %>% \n   left_join(stop_words_lyrics, by=c('second' = 'word')) %>% \n   mutate(first_stopword = if_else(is.na(lexicon.x), 0, 1),\n          second_stopword = if_else(is.na(lexicon.y), 0, 1)) %>% \n   filter(first_stopword == 0 & second_stopword == 0,\n          first != second,\n          !is.na(bigram)) %>% \n   select(-starts_with('lexicon'),\n          -ends_with('stopword')) %>% \n   janitor::tabyl(bigram) %>%\n   as.data.frame() %>%\n   mutate(artist_name = 'Beyoncé')\n\ntok_taylor_swift_lyrics <- taylor_swift_lyrics %>% \n   janitor::clean_names() %>% \n   unnest_tokens(output = bigram, \n                 input = lyrics,\n                 token = 'ngrams',\n                 n = 2) %>% \n   distinct(bigram, title, .keep_all = TRUE) %>% \n   select(bigram, artist_name = artist) %>% \n   separate(bigram, into = c('first', 'second'), sep=' ', remove=FALSE) %>% \n   left_join(stop_words_lyrics, by=c('first' = 'word')) %>% \n   left_join(stop_words_lyrics, by=c('second' = 'word')) %>% \n   mutate(first_stopword = if_else(is.na(lexicon.x), 0, 1),\n          second_stopword = if_else(is.na(lexicon.y), 0, 1)) %>% \n   filter(first_stopword == 0 & second_stopword == 0,\n          first != second) %>% \n   select(-starts_with('lexicon'),\n          -ends_with('stopword')) %>% \n   janitor::tabyl(bigram) %>% \n   as.data.frame() %>% \n   mutate(artist_name = 'Taylor Swift')\n```\n:::\n\n\n\n# 5. Visualization Parameters \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_theme <- theme(\n  # choose font family\n  text = element_text(family = 'Charm', size=14, color='gray98'), \n  axis.ticks = element_blank(), \n  plot.background = element_rect(fill = \"gray20\", color = \"gray20\"),\n  panel.background =  element_rect(fill = \"gray20\", color = \"gray20\"),\n  panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  panel.border = element_blank(), \n  axis.line.x = element_line(color='gray98'), \n  axis.title.x = element_text(color='gray98'),\n  axis.text.y = element_blank(), \n  axis.text.x = element_text(color='gray98'), \n  legend.position = 'none')\n```\n:::\n\n\n\n# 6. Plot \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntswift_viz <- tok_taylor_swift_lyrics %>% \n  slice_max(percent, n=10) %>% \n  ggplot(.,\n         aes(x=percent,\n             y=reorder(bigram, percent))) + \n  geom_col(fill = 'cyan3') + \n  geom_text(aes(label = bigram),\n            hjust = 1.5,\n            size = 12,\n            color = 'gray98',\n            family = 'Charm',\n            fontface = 'bold') + \n  labs(x='Word Count (% of corpus)',\n       y='') + \n  scale_x_continuous(labels = percent) + \n  my_theme\n\nbeyonce_viz <- tok_beyonce_lyrics %>% \n  slice_max(percent, n=10) %>% \n  ggplot(.,\n         aes(x=percent,\n             y=reorder(bigram, percent))) + \n  geom_col(fill = 'green3') + \n  geom_text(aes(label = bigram),\n            hjust = 1.5,\n            size = 12,\n            color = 'gray98',\n            family = 'Charm',\n            fontface = 'bold') + \n  labs(x='Word Count (% of corpus)',\n       y='') + \n  scale_x_continuous(labels = percent) + \n  my_theme\n\np <- tswift_viz + beyonce_viz + \n  plot_annotation(title = glue(\"Most frequently used bigrams in <span style='color:cyan3'>**Taylor Swift**</span> and <span style='color:green3'>**Beyonce**</span> songs\"),\n                  subtitle = 'Top 10 bigrams by artist',\n                  caption = '<br>Tidy Tuesday Week 40 (2020)<br>Created by @mickey_rafa',\n                  theme = theme(plot.title = element_textbox_simple(size=rel(4), family='Charm', \n                                                                    face='bold', color='gray98',\n                                                                    margin = margin(t=10)), \n                                plot.subtitle = element_textbox_simple(size=rel(2.5), family='Charm', \n                                                                    face='bold', color='gray98'), \n                                plot.caption = element_textbox(size=rel(2), color='gray98', \n                                                               family='Charm', lineheight=.3), \n                                plot.background = element_rect(fill = \"gray20\", color = NA),\n                                panel.background = element_rect(fill = \"gray20\"),\n                                plot.margin = unit(c(0, 0, 0, 0), \"pt\")))\n```\n:::\n\n\n\n# 7. Save \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the plot as PNG\nggsave(\n  filename = glue(\"tt_{tt_year}_{tt_week}.png\"),\n  plot = p,\n  width = 6, height = 4, units = \"in\", dpi = 320\n)\n\n# make thumbnail for page\nmagick::image_read(glue(\"tt_{tt_year}_{tt_week}.png\")) %>%\n  magick::image_resize(geometry = \"400\") %>%\n  magick::image_write(glue(\"tt_{tt_year}_{tt_week}_thumbnail.png\"))\n```\n:::\n\n\n\n# 8. Session Info\n\n::: {.callout-tip collapse=\"true\"}\n##### Expand for Session Info\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.0 (2024-04-24)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sonoma 14.6.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Denver\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] SnowballC_0.7.1    tidylo_0.2.0       tidytext_0.4.2     stopwords_2.3     \n [5] here_1.0.1         glue_1.8.0         htmltools_0.5.8.1  scales_1.3.0      \n [9] janitor_2.2.0      patchwork_1.3.0    showtext_0.9-7     showtextdb_3.0    \n[13] sysfonts_0.8.9     ggtext_0.1.2       tidytuesdayR_1.1.2 lubridate_1.9.3   \n[17] forcats_1.0.0      stringr_1.5.1      dplyr_1.1.4        purrr_1.0.2       \n[21] readr_2.1.5        tidyr_1.3.1        tibble_3.2.1       ggplot2_3.5.1     \n[25] tidyverse_2.0.0    pacman_0.5.1      \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.5      httr2_1.0.5       xfun_0.48         htmlwidgets_1.6.4\n [5] gh_1.4.1          lattice_0.22-6    tzdb_0.4.0        vctrs_0.6.5      \n [9] tools_4.4.0       generics_0.1.3    parallel_4.4.0    curl_5.2.3       \n[13] fansi_1.0.6       janeaustenr_1.0.0 pkgconfig_2.0.3   tokenizers_0.3.0 \n[17] Matrix_1.7-1      lifecycle_1.0.4   compiler_4.4.0    farver_2.1.2     \n[21] textshaping_0.4.0 munsell_0.5.1     snakecase_0.11.1  yaml_2.3.10      \n[25] crayon_1.5.3      pillar_1.9.0      magick_2.8.5      commonmark_1.9.2 \n[29] tidyselect_1.2.1  digest_0.6.37     stringi_1.8.4     labeling_0.4.3   \n[33] rprojroot_2.0.4   fastmap_1.2.0     grid_4.4.0        colorspace_2.1-1 \n[37] cli_3.6.3         magrittr_2.0.3    utf8_1.2.4        withr_3.0.1      \n[41] rappdirs_0.3.3    bit64_4.5.2       timechange_0.3.0  rmarkdown_2.28   \n[45] gitcreds_0.1.2    bit_4.5.0         ragg_1.3.3        hms_1.1.3        \n[49] evaluate_1.0.1    knitr_1.48        markdown_1.13     rlang_1.1.4      \n[53] gridtext_0.1.5    Rcpp_1.0.13       xml2_1.3.6        vroom_1.6.5      \n[57] rstudioapi_0.17.1 jsonlite_1.8.9    R6_2.5.1          systemfonts_1.1.0\n```\n\n\n:::\n:::\n\n\n:::\n\n# 9. Github Repository \n\n::: {.callout-tip collapse=\"true\"}\n\n##### Expand for GitHub Repo\n \n[Access the GitHub repository here](https://github.com/mrafa3/mrafa3.github.io)\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
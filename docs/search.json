[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Portfolio",
    "section": "",
    "text": "Part Three: Exploring even smaller geographies with tidycensus\n\n\n\nR\n\n\ntidyverse\n\n\ntidycensus\n\n\nmapping\n\n\napi\n\n\n\nThis post shows how to fetch data at smaller scales for analysis of Census data\n\n\n\nMickey Rafa\n\n\nAug 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPart Two: Wrangling Census data for longitudinal analysis of child poverty\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ntidycensus\n\n\napi\n\n\njavascript\n\n\npurrr\n\n\n\nThis post shows how to fetch many years of data simply, unlocking longitudinal analysis of Census data\n\n\n\nMickey Rafa\n\n\nAug 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting up an EPA air quality database using DuckDB\n\n\n\nR\n\n\ntidyverse\n\n\nduckdb\n\n\nenvironment\n\n\nsql\n\n\napi\n\n\n\nThis post uses the RAQSAPI package to access the EPA API and query the results with DuckDB\n\n\n\nMickey Rafa\n\n\nAug 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPart One: Exploring child poverty data with the tidycensus R package\n\n\n\nR\n\n\ntidyverse\n\n\nmapping\n\n\ngt\n\n\ntidycensus\n\n\napi\n\n\n\nThis post uses the tidycensus package to access the Census API and visualize data on child poverty in the U.S.\n\n\n\nMickey Rafa\n\n\nAug 13, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExploring interactive mapping with mapboxgl\n\n\n\nR\n\n\ntidyverse\n\n\nmapping\n\n\n\nThis post explores some mapboxgl features\n\n\n\nMickey Rafa\n\n\nAug 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBrainTree SQL challenge\n\n\n\nSQL\n\n\nQuarto\n\n\n\nThis post works through the SQL challenges used by PayPal\n\n\n\nMickey Rafa\n\n\nJul 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuery comparison: SQL, R, and Python using Chicago Employees dataset\n\n\n\nR\n\n\nSQL\n\n\nPython\n\n\nQuarto\n\n\ngenerative-AI\n\n\n\nThis post demonstrates how to run these languages in Quarto\n\n\n\nMickey Rafa\n\n\nJul 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Science Workflows in Javascript: Part Three\n\n\n\nQuarto\n\n\nJavascript\n\n\ndata-viz\n\n\npca\n\n\nenvironment\n\n\n\nThis post is from the third session led by Observable HQ\n\n\n\nMickey Rafa\n\n\nJul 29, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Science Workflows in Javascript: Part Two\n\n\n\nQuarto\n\n\nJavascript\n\n\ndata-viz\n\n\ncluster-analysis\n\n\nenvironment\n\n\n\nThis post is from the second session led by Observable HQ\n\n\n\nMickey Rafa\n\n\nJul 22, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Science Workflows in Javascript: Part One\n\n\n\nQuarto\n\n\nJavascript\n\n\ndata-viz\n\n\nregression\n\n\nenvironment\n\n\n\nThis post is from the first session led by Observable HQ\n\n\n\nMickey Rafa\n\n\nJul 11, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding beautiful tables with the gt:: package in R\n\n\n\nR\n\n\nweb-scraping\n\n\ngt\n\n\nsports\n\n\n\nThis post outlines how to quickly scrape and clean data from Wikipedia and build a beautiful table in R\n\n\n\nMickey Rafa\n\n\nDec 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPART TWO: Mapping of African Health Clusters\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ninternational-development\n\n\ncluster-analysis\n\n\nmapping\n\n\n\nCreating maps of cluster results using ggplot\n\n\n\nMickey Rafa\n\n\nJun 18, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPART ONE: Cluster Analysis of African Health Outcomes\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ninternational-development\n\n\ncluster-analysis\n\n\n\nExploring how African countries cluster based on their health outcomes\n\n\n\nMickey Rafa\n\n\nJun 18, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExperimenting with distance as a concept for SDG achievement\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ninternational-development\n\n\ncluster-analysis\n\n\nmapping\n\n\n\nExploring how to conceptualize and visualize distance from Sustainable Development Goal targets\n\n\n\nMickey Rafa\n\n\nApr 15, 2019\n\n\n\n\n\n\n\n\n\n\n\n\nAnimating the Gapminder dataset using gganimate\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ngganimate\n\n\n\nThis post outlines how to easily add animation to ggplot graphics\n\n\n\nMickey Rafa\n\n\nOct 15, 2017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis of Gapminder data using nested models in R\n\n\n\nR\n\n\nregression\n\n\ndata-viz\n\n\ntidyverse\n\n\ninternational-development\n\n\n\nThis post outlines the value in building nested models using the purrr and broom packages\n\n\n\nMickey Rafa\n\n\nOct 1, 2017\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2017-10-15-gapminder-gganimate/index.html",
    "href": "posts/2017-10-15-gapminder-gganimate/index.html",
    "title": "Animating the Gapminder dataset using gganimate",
    "section": "",
    "text": "In this project, I wanted to experiment with gganimate:: to reproduce the classic animated visualization by Hans Rosling of Gapminder data.\n\n\n\nThe Gapminder dataset, compiled by the Gapminder Foundation, provides data on global development trends, including indicators like life expectancy, GDP per capita, and population. The dataset is known for its use in dynamic visualizations that illustrate changes in global indicators over time.\n\n\n\n\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\n\nIn this graphic, I want to spotlight China’s development path, and also show the story of differences by continent. First, I’ll show all the data, which makes clear the need for animation of this data.\n\ngapminder %&gt;% \n  ggplot(.,\n         aes(x=gdpPercap,\n             y=lifeExp,\n             size=pop,\n             color=continent)) +\n  geom_point() + \n  geom_text(data=gapminder %&gt;% filter(country == 'China'),\n                           aes(label=country), \n                           family='Arial', size= 3, color='black', nudge_y = 2) + \n  scale_x_log10() + \n  ggtitle('Change in life expectancy and income over time',\n          subtitle = 'Bubble size indicates population size') + \n  labs(x='GDP per capita (logged)\\n',\n       y='Life expectancy (years)',\n       caption='Source: Gapminder dataset') + \n  theme(legend.position = 'top',\n        legend.title = element_blank()) + \n  guides(size='none')\n\n\n\n\n\n\n\n\n\n\n\n\ngapminder %&gt;% \n  ggplot(.,\n         aes(x=gdpPercap,\n             y=lifeExp,\n             size=pop,\n             color=continent)) +\n  geom_point() + \n  geom_text(data=gapminder %&gt;% filter(country == 'China'),\n                           aes(label=country), \n                           family='Arial', size= 3, color='black', nudge_y = 2) + \n  geom_text(aes(x=min(gdpPercap), \n                y=min(lifeExp),\n                label=as.factor(year)), \n            hjust=-3.5, vjust=-0.2, alpha=0.2, color='gray70', size=20) +\n  scale_x_log10() + \n  ggtitle('Change in life expectancy and income over time',\n          subtitle = 'Bubble size indicates population size') + \n  labs(x='GDP per capita (logged)\\n',\n       y='Life expectancy (years)',\n       caption='Source: Gapminder dataset') + \n  theme(legend.position = 'top') + \n  guides(size='none') + \n  my.theme + \n  transition_states(\n    year,\n    transition_length = 2,\n    state_length = 0,\n    wrap = TRUE\n  ) + \n  enter_fade() + \n  exit_shrink() +\n  ease_aes()\n\n\n\n\n\n\n\n\n\n\n\n\ngapminder %&gt;% \n  ggplot(.,\n         aes(x=gdpPercap,\n             y=lifeExp,\n             size=pop,\n             color=continent)) +\n  geom_point() + \n  geom_text(data=gapminder %&gt;% filter(country == 'China'),\n                           aes(label=country), \n                           family='Arial', size= 3, color='black', nudge_y = 2) + \n  geom_text(aes(x=min(gdpPercap), \n                y=min(lifeExp),\n                label=as.factor(year)), \n            hjust=-3.5, vjust=-0.2, alpha=0.2, color='gray70', size=20) +\n  scale_x_log10() + \n  ggtitle('Change in life expectancy and income over time',\n          subtitle = 'Bubble size indicates population size') + \n  labs(x='GDP per capita (logged)\\n',\n       y='Life expectancy (years)',\n       caption='Source: Gapminder dataset') + \n  theme(legend.position = 'top') + \n  guides(size='none') + \n  my.theme + \n  transition_states(\n    year,\n    transition_length = 2,\n    state_length = 0,\n    wrap = TRUE\n  ) + \n  shadow_wake(wake_length = 0.1, alpha = FALSE, exclude_layer = c(2,3)) + \n  enter_fade() + \n  exit_shrink() +\n  ease_aes()"
  },
  {
    "objectID": "posts/2017-10-15-gapminder-gganimate/index.html#purpose",
    "href": "posts/2017-10-15-gapminder-gganimate/index.html#purpose",
    "title": "Animating the Gapminder dataset using gganimate",
    "section": "",
    "text": "In this project, I wanted to experiment with gganimate:: to reproduce the classic animated visualization by Hans Rosling of Gapminder data."
  },
  {
    "objectID": "posts/2017-10-15-gapminder-gganimate/index.html#dataset",
    "href": "posts/2017-10-15-gapminder-gganimate/index.html#dataset",
    "title": "Animating the Gapminder dataset using gganimate",
    "section": "",
    "text": "The Gapminder dataset, compiled by the Gapminder Foundation, provides data on global development trends, including indicators like life expectancy, GDP per capita, and population. The dataset is known for its use in dynamic visualizations that illustrate changes in global indicators over time."
  },
  {
    "objectID": "posts/2017-10-15-gapminder-gganimate/index.html#setup",
    "href": "posts/2017-10-15-gapminder-gganimate/index.html#setup",
    "title": "Animating the Gapminder dataset using gganimate",
    "section": "",
    "text": "country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\n\nIn this graphic, I want to spotlight China’s development path, and also show the story of differences by continent. First, I’ll show all the data, which makes clear the need for animation of this data.\n\ngapminder %&gt;% \n  ggplot(.,\n         aes(x=gdpPercap,\n             y=lifeExp,\n             size=pop,\n             color=continent)) +\n  geom_point() + \n  geom_text(data=gapminder %&gt;% filter(country == 'China'),\n                           aes(label=country), \n                           family='Arial', size= 3, color='black', nudge_y = 2) + \n  scale_x_log10() + \n  ggtitle('Change in life expectancy and income over time',\n          subtitle = 'Bubble size indicates population size') + \n  labs(x='GDP per capita (logged)\\n',\n       y='Life expectancy (years)',\n       caption='Source: Gapminder dataset') + \n  theme(legend.position = 'top',\n        legend.title = element_blank()) + \n  guides(size='none')"
  },
  {
    "objectID": "posts/2017-10-15-gapminder-gganimate/index.html#gganimate",
    "href": "posts/2017-10-15-gapminder-gganimate/index.html#gganimate",
    "title": "Animating the Gapminder dataset using gganimate",
    "section": "",
    "text": "gapminder %&gt;% \n  ggplot(.,\n         aes(x=gdpPercap,\n             y=lifeExp,\n             size=pop,\n             color=continent)) +\n  geom_point() + \n  geom_text(data=gapminder %&gt;% filter(country == 'China'),\n                           aes(label=country), \n                           family='Arial', size= 3, color='black', nudge_y = 2) + \n  geom_text(aes(x=min(gdpPercap), \n                y=min(lifeExp),\n                label=as.factor(year)), \n            hjust=-3.5, vjust=-0.2, alpha=0.2, color='gray70', size=20) +\n  scale_x_log10() + \n  ggtitle('Change in life expectancy and income over time',\n          subtitle = 'Bubble size indicates population size') + \n  labs(x='GDP per capita (logged)\\n',\n       y='Life expectancy (years)',\n       caption='Source: Gapminder dataset') + \n  theme(legend.position = 'top') + \n  guides(size='none') + \n  my.theme + \n  transition_states(\n    year,\n    transition_length = 2,\n    state_length = 0,\n    wrap = TRUE\n  ) + \n  enter_fade() + \n  exit_shrink() +\n  ease_aes()"
  },
  {
    "objectID": "posts/2017-10-15-gapminder-gganimate/index.html#using-the-gganimateshadow_wake-function-to-leave-a-trail",
    "href": "posts/2017-10-15-gapminder-gganimate/index.html#using-the-gganimateshadow_wake-function-to-leave-a-trail",
    "title": "Animating the Gapminder dataset using gganimate",
    "section": "",
    "text": "gapminder %&gt;% \n  ggplot(.,\n         aes(x=gdpPercap,\n             y=lifeExp,\n             size=pop,\n             color=continent)) +\n  geom_point() + \n  geom_text(data=gapminder %&gt;% filter(country == 'China'),\n                           aes(label=country), \n                           family='Arial', size= 3, color='black', nudge_y = 2) + \n  geom_text(aes(x=min(gdpPercap), \n                y=min(lifeExp),\n                label=as.factor(year)), \n            hjust=-3.5, vjust=-0.2, alpha=0.2, color='gray70', size=20) +\n  scale_x_log10() + \n  ggtitle('Change in life expectancy and income over time',\n          subtitle = 'Bubble size indicates population size') + \n  labs(x='GDP per capita (logged)\\n',\n       y='Life expectancy (years)',\n       caption='Source: Gapminder dataset') + \n  theme(legend.position = 'top') + \n  guides(size='none') + \n  my.theme + \n  transition_states(\n    year,\n    transition_length = 2,\n    state_length = 0,\n    wrap = TRUE\n  ) + \n  shadow_wake(wake_length = 0.1, alpha = FALSE, exclude_layer = c(2,3)) + \n  enter_fade() + \n  exit_shrink() +\n  ease_aes()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mickey Rafa",
    "section": "",
    "text": "My name is Mickey – welcome to my portfolio website! I’m an analytics leader with nearly a decade of experience in high-growth environments, in both non-profit and for-profit organizations. I specialize in turning data into insights, improving the accessibility of dashboards and reports, and creating compelling data stories.\nOn this site, I include a selection of data science and viz projects that showcase the breadth of work that I’ve completed.\nLet’s connect! Feel free to reach out to me on LinkedIn or send me an email.\n\nEducation\n\nMS in Business Analytics | University of Denver\nMA in International Studies | University of Denver\nBA in Political Science | West Virginia University\n\nWork Experience\n\nSr. Manager, Employer Analytics | Guild Education\nAssistant Director of Research | Pardee Center for International Futures, University of Denver\n\nPeer-Reviewed Publications\n\nMoyer, J., Matthews, A., Rafa, M., Xiong, Y. “Identifying Patterns in the Structural Drivers of Intrastate Conflict.” British Journal of Political Science. (2022).\nWang, X., Rafa, M., Moyer, J., Li, J., Scheer, J., Sutton, P. “Estimation and Mapping of Sub-National GDP in Uganda Using NPP-VIIRS Imagery.” Remote Sensing. (2019)."
  },
  {
    "objectID": "posts/2024-08-13-tidycensus-exploration/index.html",
    "href": "posts/2024-08-13-tidycensus-exploration/index.html",
    "title": "Part One: Exploring child poverty data with the tidycensus R package",
    "section": "",
    "text": "I’ve used data from the U.S. Census Bureau several times, and for this project, I wanted to reacquaint myself with the tidycensus:: package to gather and wrangle data. I also wanted to use the usmap:: package to generate a simple U.S. map, and the gt:: package to display the data in a nice table format.\n\n\n\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(janitor)\nlibrary(glue)\nlibrary(gt)\nlibrary(usmap)\n\n# census_api_key('INSERT KEY HERE')\n\n\n\n\nFor this analysis, I’m interested in looking at the most recent state-level child poverty data available from the U.S. Census Bureau. The tidycensus:: package allows API access to the decennial Census, as well as the more frequent American Community Survey (ACS), which I’ll use in this project.\nIf you’ve worked with ACS data before, you may know that there are a few survey products offered in the ACS suite. Most commonly, the choice of data is between the 1-year estimates and the 5-year estimates.\nWhat’s the difference between these, and how do you choose which survey product to use for your purposes?1\n\n\n\n\n\n\n\n\nFeature\nACS 1-Year Estimates\nACS 5-Year Estimates\n\n\n\n\nData Collection Period\n12 months\n60 months\n\n\nPopulation Coverage\nAreas with 65,000 or more people\nAll geographic areas, including those with fewer than 65,000 people\n\n\nSample Size\nSmallest\nLargest\n\n\nReliability\nLess reliable due to smaller sample size\nMore reliable due to larger sample size\n\n\nCurrency\nMost current data\nLess current, includes older data\n\n\nRelease Frequency\nAnnually\nAnnually\n\n\nBest Used For\nAnalyzing large populations, when currency is more important than precision\nAnalyzing small populations, where precision is more important than currency\n\n\nExample Usage\nExamining recent economic changes\nExamining trends in small geographic areas or small population subgroups\n\n\n\n\nTo start, I am interested in reviewing the most stable, geographically-available data on child poverty. Given that I’m less concerned with recency and more interested in broad availability, the ACS 5-year estimates are what I’ll use here.\n\n\n\nThe tidycensus:: package has so much to offer (and I still have plenty to learn!). The tidycensus::load_variables() function provides a simple way to query the available data within each survey. Combining this with stringr::str_detect() is a nice way to search through the tens of thousands of data series that are available through the U.S. Census API.\n\nload_variables(2022, \"acs5\", cache = TRUE) %&gt;% \n  # used this to search for some Under 5 years variables of interest\n  filter(str_detect(label, \"Under 5 years\"))\n\n# A tibble: 240 × 4\n   name        label                                    concept        geography\n   &lt;chr&gt;       &lt;chr&gt;                                    &lt;chr&gt;          &lt;chr&gt;    \n 1 B01001A_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (W… tract    \n 2 B01001A_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (W… tract    \n 3 B01001B_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (B… tract    \n 4 B01001B_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (B… tract    \n 5 B01001C_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (A… tract    \n 6 B01001C_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (A… tract    \n 7 B01001D_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (A… tract    \n 8 B01001D_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (A… tract    \n 9 B01001E_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (N… tract    \n10 B01001E_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (N… tract    \n# ℹ 230 more rows\n\n\nFor this demo, I’ll use the following series:\n\nB01001_003: Estimate!!Total:!!Male:!!Under 5 years (all racial groups)\nB01001_027: Estimate!!Total:!!Female:!!Under 5 years (all racial groups)\nB17001_004: Estimate!!Total:!!Income in the past 12 months below poverty level:!!Male:!!Under 5 years\nB17001_018: Estimate!!Total:!!Income in the past 12 months below poverty level:!!Female:!!Under 5 years\n\nThere are a bunch of useful helper functions/arguments to assist in fetching data from the Census API. Some noteworthy ones include:\n\nEach variable returns the geography, an estimate, and the margin of error (“moe”). Geographies can span from states, regions and the country as a whole, down to areas like school districts, voting districts, census block groups, and many others.\nsurvey=: this defines the produce that you’re using of the American Community Survey. Responses can include “acs1”, “acs3”, or (the default) “acs5”.\nsummary_var=: often the variable that you want would be made more meaningful as a ratio or with a demonminator. For example, the number of children in poverty could be useful on its own, but you’re likely to want to see that series as a percent of the total children. With the summary_var argument, you can tell the function which secondary variable you want to grab in the same API call.\nouput=wide: related to the above, I wanted to look at child poverty in a way that would require multiple summary variables (e.g. the percent of girls and boys in poverty). Since you can only have one summary variable, output='wide' allows you to grab all of the series that you may need in the same call.\ngeometry=TRUE: this argument returns the geospatial data in tidy format to create quick ggplot-based maps using geom_sf().\n\n\ndf &lt;- get_acs(geography = 'state',\n        variables = c(male_u5_pop = 'B01001_003', \n                      female_u5_pop = 'B01001_027', \n                      male_u5_poverty = 'B17001_004', \n                      female_u5_poverty = 'B17001_018'),\n        survey = 'acs5',\n        year = 2022,\n        output = 'wide')\n\nGetting data from the 2018-2022 5-year ACS\n\n\nNext, I’ll create some fields to combine gender-based poverty estimates and calculate a percent of the child population measure.\n\n(df &lt;- df %&gt;% \n  rename(state = NAME) %&gt;% \n  mutate(total_u5_popE = male_u5_popE + female_u5_popE,\n         total_u5_povertyE = male_u5_povertyE + male_u5_povertyE,\n         perc_u5_in_poverty = total_u5_povertyE / total_u5_popE))\n\n# A tibble: 52 × 13\n   GEOID state           male_u5_popE male_u5_popM female_u5_popE female_u5_popM\n   &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt;        &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 01    Alabama               149474          819         142382            757\n 2 02    Alaska                 25142          225          23849            239\n 3 04    Arizona               205506          198         197130            195\n 4 05    Arkansas               93300          585          88024            518\n 5 06    California           1156233          696        1102075            682\n 6 08    Colorado              162030          477         155159            444\n 7 09    Connecticut            93705          221          89063            181\n 8 10    Delaware               27470          154          26520            170\n 9 11    District of Co…        21273           38          20249             59\n10 12    Florida               563975          756         540590            778\n# ℹ 42 more rows\n# ℹ 7 more variables: male_u5_povertyE &lt;dbl&gt;, male_u5_povertyM &lt;dbl&gt;,\n#   female_u5_povertyE &lt;dbl&gt;, female_u5_povertyM &lt;dbl&gt;, total_u5_popE &lt;dbl&gt;,\n#   total_u5_povertyE &lt;dbl&gt;, perc_u5_in_poverty &lt;dbl&gt;\n\n\nYou can combine point estimates for gender-based poverty by simply adding them, but you can’t do the same for margins of error. The estimated margins of error for each estimate are based on their respective samples and the uncertainty in them. To re-weight the margins of error, you take the square root of the sum of squared margins of error:\n\nnew_MOE_calc = sqrt(male_u5_povertyM^2 + female_u5_povertyM^2)\n\nThe tidycensus::moe_sum() function will calculate the new margin of error for you!\n\ndf &lt;- df %&gt;% \n  group_by(state) %&gt;% \n  mutate(total_u5_poverty_MOEcalc = moe_sum(male_u5_povertyM, female_u5_povertyM),\n         perc_u5_in_poverty_MOEcalc = total_u5_poverty_MOEcalc / total_u5_popE)\n\nNow, I can visualize the new point estimates and margins of error for child poverty (not specific to gender).\n\nregion_color &lt;- c(\n  'South' = \"#66c2a5\", \n  'West' = \"#fc8d62\", \n  'Northeast' = \"#8da0cb\", \n  'Midwest' = \"#e78ac3\"\n)\n\n\ndf %&gt;% \n  filter(state != 'Puerto Rico') %&gt;% \n  ggplot(\n    aes(x=perc_u5_in_poverty, \n        y=reorder(state, perc_u5_in_poverty))) + \n  geom_point(size=3) +\n  geom_errorbarh(aes(xmin=perc_u5_in_poverty - perc_u5_in_poverty_MOEcalc, \n                     xmax=perc_u5_in_poverty + perc_u5_in_poverty_MOEcalc),\n                 height = 0.4) + \n  labs(y='',\n       x='',\n       caption=caption_text) + \n  ggtitle(title_text,\n          subtitle=subtitle_text) + \n  scale_x_continuous(labels = percent,\n                     position = 'top') + \n  my.theme"
  },
  {
    "objectID": "posts/2024-08-13-tidycensus-exploration/index.html#setup",
    "href": "posts/2024-08-13-tidycensus-exploration/index.html#setup",
    "title": "Part One: Exploring child poverty data with the tidycensus R package",
    "section": "",
    "text": "library(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(janitor)\nlibrary(glue)\nlibrary(gt)\nlibrary(usmap)\n\n# census_api_key('INSERT KEY HERE')"
  },
  {
    "objectID": "posts/2024-08-13-tidycensus-exploration/index.html#data",
    "href": "posts/2024-08-13-tidycensus-exploration/index.html#data",
    "title": "Part One: Exploring child poverty data with the tidycensus R package",
    "section": "",
    "text": "For this analysis, I’m interested in looking at the most recent state-level child poverty data available from the U.S. Census Bureau. The tidycensus:: package allows API access to the decennial Census, as well as the more frequent American Community Survey (ACS), which I’ll use in this project.\nIf you’ve worked with ACS data before, you may know that there are a few survey products offered in the ACS suite. Most commonly, the choice of data is between the 1-year estimates and the 5-year estimates.\nWhat’s the difference between these, and how do you choose which survey product to use for your purposes?1\n\n\n\n\n\n\n\n\nFeature\nACS 1-Year Estimates\nACS 5-Year Estimates\n\n\n\n\nData Collection Period\n12 months\n60 months\n\n\nPopulation Coverage\nAreas with 65,000 or more people\nAll geographic areas, including those with fewer than 65,000 people\n\n\nSample Size\nSmallest\nLargest\n\n\nReliability\nLess reliable due to smaller sample size\nMore reliable due to larger sample size\n\n\nCurrency\nMost current data\nLess current, includes older data\n\n\nRelease Frequency\nAnnually\nAnnually\n\n\nBest Used For\nAnalyzing large populations, when currency is more important than precision\nAnalyzing small populations, where precision is more important than currency\n\n\nExample Usage\nExamining recent economic changes\nExamining trends in small geographic areas or small population subgroups\n\n\n\n\nTo start, I am interested in reviewing the most stable, geographically-available data on child poverty. Given that I’m less concerned with recency and more interested in broad availability, the ACS 5-year estimates are what I’ll use here."
  },
  {
    "objectID": "posts/2024-08-13-tidycensus-exploration/index.html#initial-tour-of-key-tidycensusget_acs-function",
    "href": "posts/2024-08-13-tidycensus-exploration/index.html#initial-tour-of-key-tidycensusget_acs-function",
    "title": "Part One: Exploring child poverty data with the tidycensus R package",
    "section": "",
    "text": "The tidycensus:: package has so much to offer (and I still have plenty to learn!). The tidycensus::load_variables() function provides a simple way to query the available data within each survey. Combining this with stringr::str_detect() is a nice way to search through the tens of thousands of data series that are available through the U.S. Census API.\n\nload_variables(2022, \"acs5\", cache = TRUE) %&gt;% \n  # used this to search for some Under 5 years variables of interest\n  filter(str_detect(label, \"Under 5 years\"))\n\n# A tibble: 240 × 4\n   name        label                                    concept        geography\n   &lt;chr&gt;       &lt;chr&gt;                                    &lt;chr&gt;          &lt;chr&gt;    \n 1 B01001A_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (W… tract    \n 2 B01001A_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (W… tract    \n 3 B01001B_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (B… tract    \n 4 B01001B_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (B… tract    \n 5 B01001C_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (A… tract    \n 6 B01001C_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (A… tract    \n 7 B01001D_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (A… tract    \n 8 B01001D_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (A… tract    \n 9 B01001E_003 Estimate!!Total:!!Male:!!Under 5 years   Sex by Age (N… tract    \n10 B01001E_018 Estimate!!Total:!!Female:!!Under 5 years Sex by Age (N… tract    \n# ℹ 230 more rows\n\n\nFor this demo, I’ll use the following series:\n\nB01001_003: Estimate!!Total:!!Male:!!Under 5 years (all racial groups)\nB01001_027: Estimate!!Total:!!Female:!!Under 5 years (all racial groups)\nB17001_004: Estimate!!Total:!!Income in the past 12 months below poverty level:!!Male:!!Under 5 years\nB17001_018: Estimate!!Total:!!Income in the past 12 months below poverty level:!!Female:!!Under 5 years\n\nThere are a bunch of useful helper functions/arguments to assist in fetching data from the Census API. Some noteworthy ones include:\n\nEach variable returns the geography, an estimate, and the margin of error (“moe”). Geographies can span from states, regions and the country as a whole, down to areas like school districts, voting districts, census block groups, and many others.\nsurvey=: this defines the produce that you’re using of the American Community Survey. Responses can include “acs1”, “acs3”, or (the default) “acs5”.\nsummary_var=: often the variable that you want would be made more meaningful as a ratio or with a demonminator. For example, the number of children in poverty could be useful on its own, but you’re likely to want to see that series as a percent of the total children. With the summary_var argument, you can tell the function which secondary variable you want to grab in the same API call.\nouput=wide: related to the above, I wanted to look at child poverty in a way that would require multiple summary variables (e.g. the percent of girls and boys in poverty). Since you can only have one summary variable, output='wide' allows you to grab all of the series that you may need in the same call.\ngeometry=TRUE: this argument returns the geospatial data in tidy format to create quick ggplot-based maps using geom_sf().\n\n\ndf &lt;- get_acs(geography = 'state',\n        variables = c(male_u5_pop = 'B01001_003', \n                      female_u5_pop = 'B01001_027', \n                      male_u5_poverty = 'B17001_004', \n                      female_u5_poverty = 'B17001_018'),\n        survey = 'acs5',\n        year = 2022,\n        output = 'wide')\n\nGetting data from the 2018-2022 5-year ACS\n\n\nNext, I’ll create some fields to combine gender-based poverty estimates and calculate a percent of the child population measure.\n\n(df &lt;- df %&gt;% \n  rename(state = NAME) %&gt;% \n  mutate(total_u5_popE = male_u5_popE + female_u5_popE,\n         total_u5_povertyE = male_u5_povertyE + male_u5_povertyE,\n         perc_u5_in_poverty = total_u5_povertyE / total_u5_popE))\n\n# A tibble: 52 × 13\n   GEOID state           male_u5_popE male_u5_popM female_u5_popE female_u5_popM\n   &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt;        &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;\n 1 01    Alabama               149474          819         142382            757\n 2 02    Alaska                 25142          225          23849            239\n 3 04    Arizona               205506          198         197130            195\n 4 05    Arkansas               93300          585          88024            518\n 5 06    California           1156233          696        1102075            682\n 6 08    Colorado              162030          477         155159            444\n 7 09    Connecticut            93705          221          89063            181\n 8 10    Delaware               27470          154          26520            170\n 9 11    District of Co…        21273           38          20249             59\n10 12    Florida               563975          756         540590            778\n# ℹ 42 more rows\n# ℹ 7 more variables: male_u5_povertyE &lt;dbl&gt;, male_u5_povertyM &lt;dbl&gt;,\n#   female_u5_povertyE &lt;dbl&gt;, female_u5_povertyM &lt;dbl&gt;, total_u5_popE &lt;dbl&gt;,\n#   total_u5_povertyE &lt;dbl&gt;, perc_u5_in_poverty &lt;dbl&gt;\n\n\nYou can combine point estimates for gender-based poverty by simply adding them, but you can’t do the same for margins of error. The estimated margins of error for each estimate are based on their respective samples and the uncertainty in them. To re-weight the margins of error, you take the square root of the sum of squared margins of error:\n\nnew_MOE_calc = sqrt(male_u5_povertyM^2 + female_u5_povertyM^2)\n\nThe tidycensus::moe_sum() function will calculate the new margin of error for you!\n\ndf &lt;- df %&gt;% \n  group_by(state) %&gt;% \n  mutate(total_u5_poverty_MOEcalc = moe_sum(male_u5_povertyM, female_u5_povertyM),\n         perc_u5_in_poverty_MOEcalc = total_u5_poverty_MOEcalc / total_u5_popE)\n\nNow, I can visualize the new point estimates and margins of error for child poverty (not specific to gender).\n\nregion_color &lt;- c(\n  'South' = \"#66c2a5\", \n  'West' = \"#fc8d62\", \n  'Northeast' = \"#8da0cb\", \n  'Midwest' = \"#e78ac3\"\n)\n\n\ndf %&gt;% \n  filter(state != 'Puerto Rico') %&gt;% \n  ggplot(\n    aes(x=perc_u5_in_poverty, \n        y=reorder(state, perc_u5_in_poverty))) + \n  geom_point(size=3) +\n  geom_errorbarh(aes(xmin=perc_u5_in_poverty - perc_u5_in_poverty_MOEcalc, \n                     xmax=perc_u5_in_poverty + perc_u5_in_poverty_MOEcalc),\n                 height = 0.4) + \n  labs(y='',\n       x='',\n       caption=caption_text) + \n  ggtitle(title_text,\n          subtitle=subtitle_text) + \n  scale_x_continuous(labels = percent,\n                     position = 'top') + \n  my.theme"
  },
  {
    "objectID": "posts/2024-08-13-tidycensus-exploration/index.html#footnotes",
    "href": "posts/2024-08-13-tidycensus-exploration/index.html#footnotes",
    "title": "Part One: Exploring child poverty data with the tidycensus R package",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee the Census handbook for great detail: https://www.census.gov/programs-surveys/acs/library/handbooks/general.html.↩︎"
  },
  {
    "objectID": "posts/2024-08-20-tidycensus-exploration-pt2/index.html",
    "href": "posts/2024-08-20-tidycensus-exploration-pt2/index.html",
    "title": "Part Two: Wrangling Census data for longitudinal analysis of child poverty",
    "section": "",
    "text": "In Part One, I demonstrated how to fetch data and do some basic analysis of U.S. Census data. Each API call with the tidycensus:: package can only be for one year of data, so to do longitudinal analysis requires some additional wrangling.\nIn this post, I’ll build a script that iterates through the available years, fetches the data, then combines the data into a single dataframe. Then, I’ll unpack some of the trends seen in child poverty in Colorado.\n\n\n\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(janitor)\nlibrary(gt)\nlibrary(zoo)\nlibrary(glue)\n\n# census_api_key('INSERT KEY HERE')"
  },
  {
    "objectID": "posts/2024-08-20-tidycensus-exploration-pt2/index.html#setup",
    "href": "posts/2024-08-20-tidycensus-exploration-pt2/index.html#setup",
    "title": "Part Two: Wrangling Census data for longitudinal analysis of child poverty",
    "section": "",
    "text": "library(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(janitor)\nlibrary(gt)\nlibrary(zoo)\nlibrary(glue)\n\n# census_api_key('INSERT KEY HERE')"
  },
  {
    "objectID": "posts/2024-08-20-tidycensus-exploration-pt2/index.html#fetching-from-the-tidycensus-api",
    "href": "posts/2024-08-20-tidycensus-exploration-pt2/index.html#fetching-from-the-tidycensus-api",
    "title": "Part Two: Wrangling Census data for longitudinal analysis of child poverty",
    "section": "Fetching from the tidycensus:: API",
    "text": "Fetching from the tidycensus:: API\n\n# data for ACS-1 begins in 2005, but will start in 2015\nyears &lt;- seq(2005, 2022) %&gt;% \n  # no 2020 data from the ACS\n  setdiff(2020)\n\nNext, I’ll define a function to fetch the ACS data for each year in the vector.\n\nfetch_acs_data &lt;- function(year) {\n  get_acs(geography = \"county\", \n          state = \"Colorado\",\n          survey = 'acs1',\n          variables = c(male_u5_pop = 'B01001_003', \n                        female_u5_pop = 'B01001_027', \n                        male_u5_poverty = 'B17001_004', \n                        female_u5_poverty = 'B17001_018'),\n          year = year,\n          output = 'wide') %&gt;% \n    mutate(year = year)\n}\n\nThen, I’ll use purrr::map_df() to apply each year to the fetch_acs_data() function that I created, which will result in a single dataframe of all years.\n\ncombined_acs_data &lt;- map_df(years, fetch_acs_data)"
  },
  {
    "objectID": "posts/2024-08-20-tidycensus-exploration-pt2/index.html#data-wrangling",
    "href": "posts/2024-08-20-tidycensus-exploration-pt2/index.html#data-wrangling",
    "title": "Part Two: Wrangling Census data for longitudinal analysis of child poverty",
    "section": "Data wrangling",
    "text": "Data wrangling\n\nCreating some fields to combine gender-based poverty estimates and calculate a percent of the child population measure\n\n\ncombined_acs_data &lt;- combined_acs_data %&gt;% \n  mutate(total_u5_popE = male_u5_popE + female_u5_popE,\n         total_u5_povertyE = male_u5_povertyE + female_u5_povertyE,\n         perc_u5_poverty = total_u5_povertyE / total_u5_popE)\n\n\nCreating a county field that cleans the county_state field to only include the county name\n\n\ncombined_acs_data &lt;- combined_acs_data %&gt;% \n  mutate(county = str_remove(NAME, \" County.*\")) %&gt;% \n  select(county, everything())\n\n\nReading in a table that maps Colorado’s counties to a region of the state\n\n\ncolorado_regions &lt;- read_csv('.//data/colorado_regions.csv', show_col_types = FALSE) %&gt;%\n  mutate(region = as.factor(region))\n\n\n(Finally) creating the combined_acs_data dataframe for longitudinal analysis\n\n\ncombined_acs_data &lt;- combined_acs_data %&gt;% \n  left_join(x=.,\n            y=colorado_regions,\n            by='county')"
  },
  {
    "objectID": "posts/2024-08-20-tidycensus-exploration-pt2/index.html#footnotes",
    "href": "posts/2024-08-20-tidycensus-exploration-pt2/index.html#footnotes",
    "title": "Part Two: Wrangling Census data for longitudinal analysis of child poverty",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nScreenshot taken from the ACS 2018 Handbook, found here: https://www.census.gov/content/dam/Census/library/publications/2018/acs/acs_general_handbook_2018_ch03.pdf.↩︎\nBy default the tidycensus:: API provides the margin of error at the 90% confidence interval, but you can change this with the moe_level argument within get_acs().↩︎"
  },
  {
    "objectID": "posts/2024-08-28-tidycensus-exploration-pt3/index.html",
    "href": "posts/2024-08-28-tidycensus-exploration-pt3/index.html",
    "title": "Part Three: Exploring even smaller geographies with tidycensus",
    "section": "",
    "text": "In Part One, I demonstrated how to fetch data and do some basic analysis of U.S. Census data. Each API call with the tidycensus:: package can only be for one year of data, so to do longitudinal analysis requires some additional wrangling. In this post, I’ll build a script that iterates through the available years, fetches the data, then combines the data into a single dataframe. Then, I’ll unpack some of the trends seen in child poverty in Colorado.\nIn Part Two, I showed how to fetch multiple years of data from the American Community Survey and create a single dataframe using purrr::map_df(). Then, I showed some different ways of visualizing the data, including margins of error, time series, and using Observable Plot.\nIn this post, I’d like to drill down further – to the Census tract level – to demonstrate how to fetch, wrangle, and visualize data using tidycensus::. I’ll also use some of the tigris:: package to enhance my geospatial plots.\n\n\n\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(janitor)\nlibrary(gt)\nlibrary(tigris)\n\n# census_api_key('INSERT KEY HERE')"
  },
  {
    "objectID": "posts/2024-08-28-tidycensus-exploration-pt3/index.html#setup",
    "href": "posts/2024-08-28-tidycensus-exploration-pt3/index.html#setup",
    "title": "Part Three: Exploring even smaller geographies with tidycensus",
    "section": "",
    "text": "library(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(janitor)\nlibrary(gt)\nlibrary(tigris)\n\n# census_api_key('INSERT KEY HERE')"
  },
  {
    "objectID": "posts/2024-08-28-tidycensus-exploration-pt3/index.html#a-note-on-mapping-with-tidycensus",
    "href": "posts/2024-08-28-tidycensus-exploration-pt3/index.html#a-note-on-mapping-with-tidycensus",
    "title": "Part Three: Exploring even smaller geographies with tidycensus",
    "section": "A note on mapping with tidycensus::",
    "text": "A note on mapping with tidycensus::\nIn Part One, I used the usmap:: package to quickly map state and county-level data. This package is handy for a quick US map, but it does have limitations, including:\n\nIt doesn’t map using ggplot2, so it’s not as pretty or customizable than I like, and\nIt’s only built for US maps of states and counties (and in this post, I want to map smaller areas).\n\nFortunately, tidycensus:: is built for this, too! The get_decennial() and get_acs() functions have an argument for geometry=, which if set to TRUE, will return the polygons for your data along with the fields requested in the API call. Geographic options include: “state”, “county”, “block group”, “tract”, “block”, and “zcta” (zip code tabulation area).1\n\nacs_data_tract &lt;- get_acs(\n  geography = \"tract\",\n  state = \"CO\",\n  county = c(\"Denver\", \"Jefferson\"),\n  # table = \"B27001\",\n  variables = c(male_u6_pop = \"B27001_003\", \n                male_u6_insured = \"B27001_004\", \n                female_u6_pop = \"B27001_031\", \n                female_u6_insured = \"B27001_032\"),\n  year = 2022,\n  survey = \"acs5\",\n  output = 'wide',\n  geometry = TRUE\n)\n\nI’ll now create some aggregate measures of insurance coverage estimates, along with the corresponding re-weighted margin of error values.\n\nacs_data_tract &lt;- acs_data_tract %&gt;% \n  mutate(total_u6_popE = male_u6_popE + female_u6_popE,\n         total_u6_insuredE = male_u6_insuredE + female_u6_insuredE,\n         perc_u6_insured = total_u6_insuredE / total_u6_popE,\n         total_u6_insured_MOEcalc = moe_sum(male_u6_insuredM, female_u6_insuredM),\n         perc_u6_insured_MOEcalc = total_u6_insured_MOEcalc / total_u6_popE)\n\nWith the tigris:: package, you can download major map features, including roads and water areas, which make maps more immediately relatable. In this post, I’m exploring Census tract data, which is not a well known unit, so adding\n\nden_roads &lt;- roads(\"CO\", \"Denver\") %&gt;% \n  # this filter limits the roads to major streets only\n  filter(RTTYP %in% c(\"I\", \"S\", \"U\", \"C\"))\n\nden_water &lt;- area_water(\"CO\", \"Denver\")\n\njeff_roads &lt;- roads(\"CO\", \"Jefferson\") %&gt;%\n  filter(RTTYP %in% c(\"I\", \"S\", \"U\", \"C\"))\n\njeff_water &lt;- area_water(\"CO\", \"Jefferson\")"
  },
  {
    "objectID": "posts/2024-08-28-tidycensus-exploration-pt3/index.html#footnotes",
    "href": "posts/2024-08-28-tidycensus-exploration-pt3/index.html#footnotes",
    "title": "Part Three: Exploring even smaller geographies with tidycensus",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOther geometries, such as school districts, can be accessed directly from the tigris:: package.↩︎"
  }
]
[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Portfolio",
    "section": "",
    "text": "Braintree SQL challenge\n\n\n\nR\n\n\nSQL\n\n\nQuarto\n\n\n\nThis post works through the SQL challenges used by PayPal\n\n\n\nMickey Rafa\n\n\nJul 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuery comparison: SQL, R, and Python using Chicago Employees dataset\n\n\n\nR\n\n\nSQL\n\n\nPython\n\n\nQuarto\n\n\ngenerative-AI\n\n\n\nThis post demonstrates how to run these languages in Quarto\n\n\n\nMickey Rafa\n\n\nJul 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding beautiful tables with the gt:: package in R\n\n\n\nR\n\n\nweb-scraping\n\n\ngt\n\n\nsports\n\n\n\nThis post outlines how to quickly scrape and clean data from Wikipedia and build a beautiful table in R\n\n\n\nMickey Rafa\n\n\nDec 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPART TWO: Mapping of African Health Clusters\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ninternational-development\n\n\ncluster-analysis\n\n\nmapping\n\n\n\nCreating maps of cluster results using ggplot\n\n\n\nMickey Rafa\n\n\nJun 18, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPART ONE: Cluster Analysis of African Health Outcomes\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ninternational-development\n\n\ncluster-analysis\n\n\n\nExploring how African countries cluster based on their health outcomes\n\n\n\nMickey Rafa\n\n\nJun 18, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExperimenting with distance as a concept for SDG achievement\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ninternational-development\n\n\ncluster-analysis\n\n\nmapping\n\n\n\nExploring how to conceptualize and visualize distance from Sustainable Development Goal targets\n\n\n\nMickey Rafa\n\n\nApr 15, 2019\n\n\n\n\n\n\n\n\n\n\n\n\nAnimating the Gapminder dataset using gganimate\n\n\n\nR\n\n\ndata-viz\n\n\ntidyverse\n\n\ngganimate\n\n\n\nThis post outlines how to easily add animation to ggplot graphics\n\n\n\nMickey Rafa\n\n\nOct 15, 2017\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis of Gapminder data using nested models in R\n\n\n\nR\n\n\nregression\n\n\ndata-viz\n\n\ntidyverse\n\n\ninternational-development\n\n\n\nThis post outlines the value in building nested models using the purrr and broom packages\n\n\n\nMickey Rafa\n\n\nOct 1, 2017\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mickey Rafa",
    "section": "",
    "text": "My name is Mickey – welcome to my personal portfolio website! I’m an analytics leader with nearly a decade of experience in high-growth environments, in both non-profit and for-profit organizations. I specialize in turning data into insights, improving the accessibility of dashboards and reports, and creating compelling data stories.\nOn this page, I include a selection of data science and viz projects that showcase the breadth of work that I’ve completed.\nLet’s connect! Feel free to reach out to me on LinkedIn or send me an email.\n🚧 🚧 🚧\nI’ll be adding more past projects to this site over time. To see more of my projects today, I invite you to check out my LinkedIn or Github accounts!\n🚧 🚧 🚧\n\nEducation\n\nMS in Business Analytics | University of Denver\nMA in International Studies | University of Denver\nBA in Political Science | West Virginia University\n\nWork Experience\n\nSr. Manager, Employer Analytics | Guild Education\nAssistant Director of Research | Pardee Center for International Futures, University of Denver"
  },
  {
    "objectID": "posts/2024-07-24-chicago-employee-query-comparison/index.html",
    "href": "posts/2024-07-24-chicago-employee-query-comparison/index.html",
    "title": "Query comparison: SQL, R, and Python using Chicago Employees dataset",
    "section": "",
    "text": "This project has three purposes:\n\nTo show how to run R, SQL, and Python all interchangeably in a Quarto document\nTo compare the ease of writing code using dplyr (R), SQL, and pandas (Python)\nTo include some demonstration of SQL in my portfolio (which is often not included but remains a critical skill)\n\n\n\n\nRequired packages:\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(httr)           #to fetch the data\nlibrary(janitor)        #for the clean_names() function for data cleaning\nlibrary(reticulate)     #to enable Python within R\nlibrary(DBI)            #to establish in-memory database of R dataframe\nlibrary(RSQLite)        #for SQLite engine\nlibrary(lubridate)      #for functions to handle dates\n\nAbout the dataset:\nThis dataset is from data.world, and includes information from Chicago’s Department of Human Resources for city employees in 2017. It’s a simple dataset to allow for comparisons across languages.\n\n# reading as a temporary file, then saving as df\nGET(\"https://query.data.world/s/hu5dkviuxd6k2ipuhpxjuyuds7aplu?dws=00000\", write_disk(tf &lt;- tempfile(fileext = \".xls\")))\n\nResponse [https://download.data.world/file_download/wbezchicago/chicago-employee-positions-and-salaries-for-2017/Employee%20Salary%20Data%20as%20of%20Sept.%202017.xls?auth=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50Om1yYWZhMyIsImlzcyI6ImFnZW50Om1yYWZhMzo6ODg0MjQ2ZDItMTgzMy00NmZjLTk2YTMtZjQ2MWMzMDJjOTZiIiwiaWF0IjoxNzIxODc0NzgyLCJyb2xlIjpbInVzZXIiLCJ1c2VyX2FwaV9hZG1pbiIsInVzZXJfYXBpX2VudGVycHJpc2VfYWRtaW4iLCJ1c2VyX2FwaV9yZWFkIiwidXNlcl9hcGlfd3JpdGUiXSwiZ2VuZXJhbC1wdXJwb3NlIjpmYWxzZSwidXJsIjoiMjM2ZDZlZGQ3NjdkZmVmOGRjYzM0Mzg3YTExMDQ1N2EzMmU1OGY3ZSJ9.oTr9PF0rrsLdVhewmy2v1vRgYvT0jy_PBmqhmrufaRSB25PEm48ZPxvswiSrZw8bNaACxDWpxwBiJVCVSaM-Zg]\n  Date: 2024-07-26 20:16\n  Status: 200\n  Content-Type: application/vnd.ms-excel\n  Size: 4.72 MB\n&lt;ON DISK&gt;  /var/folders/ck/dmgn8lbx6vl8sl89vlhr0sv00000gn/T//Rtmp44XQRB/filed76165bf9508.xls\n\n\n\ndf &lt;- read_excel(tf) %&gt;% \n  #clean_names() to make all column names lowercase\n  clean_names()\n\n\n\nRows: 32,806\nColumns: 8\n$ name                           &lt;chr&gt; \"AARON,  JEFFERY M\", \"AARON,  KARINA\", …\n$ title                          &lt;chr&gt; \"SERGEANT\", \"POLICE OFFICER (ASSIGNED A…\n$ department                     &lt;chr&gt; \"POLICE\", \"POLICE\", \"FLEET AND FACILITY…\n$ salary_annual                  &lt;dbl&gt; 101442.0, 94122.0, 101592.0, 110064.0, …\n$ original_hire_date             &lt;dttm&gt; 2005-09-26, 2005-09-26, 1991-08-01, 19…\n$ start_date_in_present_position &lt;dttm&gt; 2016-06-01, 2017-04-16, 2000-05-01, 20…\n$ salary_basis                   &lt;chr&gt; \"SALARY\", \"SALARY\", \"SALARY\", \"SALARY\",…\n$ employment_category            &lt;chr&gt; \"Fulltime-Regular\", \"Fulltime-Regular\",…\n\n\n\n\n\nThe DBI:: package allows you to create an in-memory database to query against. The DBI project site is a great place to learn more about it. I’ll start by doing some initial setup and establishing the connection between the R dataframe and the SQL table name that I’ll query.\n\ncon &lt;- DBI::dbConnect(SQLite(), \":memory:\")\nDBI::dbWriteTable(conn = con, name = \"df\", value = df, field.types = c(\"original_hire_date\" = \"Date\"), row.names = FALSE)\n\nThe reticulate:: package allows for executing Python code in an R environment. The reticulate project site includes useful examples for getting up and running with Python in R. This package includes an r_to_py() function that is needed to convert an R dataframe into a pandas dataframe.\n\npy$df &lt;- r_to_py(df)\n\nWhen inserting a code chunk to your Markdown file, it originally defaults to ‘{r}’. You can simply change this to ‘python’ or ‘sql’ and, with the above set up, the code works beautifully in a Quarto document!\nIn the sections that follow, I used ChatGPT to generate prompts as querying exercises. For the initial code chunks,"
  },
  {
    "objectID": "posts/2024-07-24-chicago-employee-query-comparison/index.html#purpose",
    "href": "posts/2024-07-24-chicago-employee-query-comparison/index.html#purpose",
    "title": "Query comparison: SQL, R, and Python using Chicago Employees dataset",
    "section": "",
    "text": "This project has three purposes:\n\nTo show how to run R, SQL, and Python all interchangeably in a Quarto document\nTo compare the ease of writing code using dplyr (R), SQL, and pandas (Python)\nTo include some demonstration of SQL in my portfolio (which is often not included but remains a critical skill)"
  },
  {
    "objectID": "posts/2024-07-24-chicago-employee-query-comparison/index.html#setup-and-data-preparation",
    "href": "posts/2024-07-24-chicago-employee-query-comparison/index.html#setup-and-data-preparation",
    "title": "Query comparison: SQL, R, and Python using Chicago Employees dataset",
    "section": "",
    "text": "Required packages:\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(httr)           #to fetch the data\nlibrary(janitor)        #for the clean_names() function for data cleaning\nlibrary(reticulate)     #to enable Python within R\nlibrary(DBI)            #to establish in-memory database of R dataframe\nlibrary(RSQLite)        #for SQLite engine\nlibrary(lubridate)      #for functions to handle dates\n\nAbout the dataset:\nThis dataset is from data.world, and includes information from Chicago’s Department of Human Resources for city employees in 2017. It’s a simple dataset to allow for comparisons across languages.\n\n# reading as a temporary file, then saving as df\nGET(\"https://query.data.world/s/hu5dkviuxd6k2ipuhpxjuyuds7aplu?dws=00000\", write_disk(tf &lt;- tempfile(fileext = \".xls\")))\n\nResponse [https://download.data.world/file_download/wbezchicago/chicago-employee-positions-and-salaries-for-2017/Employee%20Salary%20Data%20as%20of%20Sept.%202017.xls?auth=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50Om1yYWZhMyIsImlzcyI6ImFnZW50Om1yYWZhMzo6ODg0MjQ2ZDItMTgzMy00NmZjLTk2YTMtZjQ2MWMzMDJjOTZiIiwiaWF0IjoxNzIxODc0NzgyLCJyb2xlIjpbInVzZXIiLCJ1c2VyX2FwaV9hZG1pbiIsInVzZXJfYXBpX2VudGVycHJpc2VfYWRtaW4iLCJ1c2VyX2FwaV9yZWFkIiwidXNlcl9hcGlfd3JpdGUiXSwiZ2VuZXJhbC1wdXJwb3NlIjpmYWxzZSwidXJsIjoiMjM2ZDZlZGQ3NjdkZmVmOGRjYzM0Mzg3YTExMDQ1N2EzMmU1OGY3ZSJ9.oTr9PF0rrsLdVhewmy2v1vRgYvT0jy_PBmqhmrufaRSB25PEm48ZPxvswiSrZw8bNaACxDWpxwBiJVCVSaM-Zg]\n  Date: 2024-07-26 20:16\n  Status: 200\n  Content-Type: application/vnd.ms-excel\n  Size: 4.72 MB\n&lt;ON DISK&gt;  /var/folders/ck/dmgn8lbx6vl8sl89vlhr0sv00000gn/T//Rtmp44XQRB/filed76165bf9508.xls\n\n\n\ndf &lt;- read_excel(tf) %&gt;% \n  #clean_names() to make all column names lowercase\n  clean_names()\n\n\n\nRows: 32,806\nColumns: 8\n$ name                           &lt;chr&gt; \"AARON,  JEFFERY M\", \"AARON,  KARINA\", …\n$ title                          &lt;chr&gt; \"SERGEANT\", \"POLICE OFFICER (ASSIGNED A…\n$ department                     &lt;chr&gt; \"POLICE\", \"POLICE\", \"FLEET AND FACILITY…\n$ salary_annual                  &lt;dbl&gt; 101442.0, 94122.0, 101592.0, 110064.0, …\n$ original_hire_date             &lt;dttm&gt; 2005-09-26, 2005-09-26, 1991-08-01, 19…\n$ start_date_in_present_position &lt;dttm&gt; 2016-06-01, 2017-04-16, 2000-05-01, 20…\n$ salary_basis                   &lt;chr&gt; \"SALARY\", \"SALARY\", \"SALARY\", \"SALARY\",…\n$ employment_category            &lt;chr&gt; \"Fulltime-Regular\", \"Fulltime-Regular\",…"
  },
  {
    "objectID": "posts/2024-07-24-chicago-employee-query-comparison/index.html#setting-up-python-and-sql-to-execute",
    "href": "posts/2024-07-24-chicago-employee-query-comparison/index.html#setting-up-python-and-sql-to-execute",
    "title": "Query comparison: SQL, R, and Python using Chicago Employees dataset",
    "section": "",
    "text": "The DBI:: package allows you to create an in-memory database to query against. The DBI project site is a great place to learn more about it. I’ll start by doing some initial setup and establishing the connection between the R dataframe and the SQL table name that I’ll query.\n\ncon &lt;- DBI::dbConnect(SQLite(), \":memory:\")\nDBI::dbWriteTable(conn = con, name = \"df\", value = df, field.types = c(\"original_hire_date\" = \"Date\"), row.names = FALSE)\n\nThe reticulate:: package allows for executing Python code in an R environment. The reticulate project site includes useful examples for getting up and running with Python in R. This package includes an r_to_py() function that is needed to convert an R dataframe into a pandas dataframe.\n\npy$df &lt;- r_to_py(df)\n\nWhen inserting a code chunk to your Markdown file, it originally defaults to ‘{r}’. You can simply change this to ‘python’ or ‘sql’ and, with the above set up, the code works beautifully in a Quarto document!\nIn the sections that follow, I used ChatGPT to generate prompts as querying exercises. For the initial code chunks,"
  },
  {
    "objectID": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html",
    "href": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html",
    "title": "Building beautiful tables with the gt:: package in R",
    "section": "",
    "text": "In this project, I wanted to experiment with the gt:: package to create a beautiful table using R. This code will walk through scraping a table from Wikipedia of the top international goal scorers in men’s soccer history.\n\n\n\nRequired packages:\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(scales)\nlibrary(htmltools)\nlibrary(rvest)\nlibrary(gt)\nlibrary(countrycode)\n\nData.world has a dataset that consists of country names and URLs associated with .svg images of their national flags, which I’d like to include within the table for extra style.\n\nflag_db &lt;- read.csv(\"https://query.data.world/s/cnheo22w5mwowz2tfxrbb3z2i3mzya?dws=00000\", header=TRUE, stringsAsFactors=FALSE) %&gt;% \n  #Convert country names into 3-letter country codes\n  mutate(Code = countrycode(sourcevar = Country, origin = \"country.name\", destination = \"iso3c\", warn = FALSE)) %&gt;% \n  select(Country, flag_URL = ImageURL)\n\n\n\n\n\nurl_goals &lt;- 'https://en.wikipedia.org/wiki/List_of_men%27s_footballers_with_50_or_more_international_goals'\n\n\n(raw &lt;- url_goals %&gt;%\n  rvest::read_html() %&gt;%\n  rvest::html_nodes(xpath='//*[@id=\"mw-content-text\"]/div[1]/table[2]') %&gt;% \n  html_table() %&gt;% \n  .[[1]] %&gt;% \n  clean_names())\n\n# A tibble: 80 × 10\n    rank player      nation confederation goals caps  goalsper_match career_span\n   &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt;      \n 1     1 Cristiano … Portu… UEFA          130   212   0.61           2003–      \n 2     2 Lionel Mes… Argen… CONMEBOL      109   187   0.58           2005–      \n 3     3 Ali Daei    Iran   AFC           108[… 148[… 0.73           1993–2006  \n 4     4 Sunil Chhe… India  AFC           94    151[… 0.62           2005–2024  \n 5     5 Mokhtar Da… Malay… AFC           89    142   0.63           1972–1985  \n 6     6 Ali Mabkho… Unite… AFC           85    115   0.74           2009–      \n 7     6 Romelu Luk… Belgi… UEFA          85    119   0.71           2010–      \n 8     8 Ferenc Pus… Hunga… UEFA          84    89    0.94           1945–1962  \n 9     9 Robert Lew… Poland UEFA          83    152   0.55           2008–      \n10    10 Godfrey Ch… Zambia CAF           79    111   0.71           1968–1980  \n# ℹ 70 more rows\n# ℹ 2 more variables: date_of_50th_goal &lt;chr&gt;, ref &lt;chr&gt;\n\n\nFor data cleaning of this Wiki table, we need to: * Remove all footnotes within the table * Convert all chr columns to numeric values * Re-code one of the confederation values so that it’s clean for the by confederation table\n\n(raw &lt;- raw %&gt;% \n  #Remove extra spaces in nation to clean this column\n  mutate(nation = str_replace_all(str_trim(nation), \"\\\\s+\", \" \")) %&gt;%\n  mutate(nation = case_when(\n    str_detect(nation, \"^Hungary\\\\s+Spain$\") ~ \"Hungary\",\n    #re-coding this as United Kingdom to bring in flag\n    str_detect(nation, \"^England\\\\s+England\\\\s+amateurs$\") ~ \"United Kingdom\",\n    TRUE ~ nation\n  )) %&gt;%\n  mutate(confederation = case_when(\n    confederation == \"AFC / OFC[h]\" ~ \"AFC\",\n    TRUE ~ confederation)) %&gt;% \n  #remove footnotes and transform columns to numeric values\n  mutate_at(vars(player, career_span, goals, caps, goalsper_match), \n            ~ str_remove(., \"\\\\[.*\\\\]\")) %&gt;% \n  mutate_at(vars(goals, caps, goalsper_match), \n            as.numeric) %&gt;% \n  left_join(flag_db, by = c('nation' = 'Country')) %&gt;% \n  select(flag_URL, everything()))\n\n# A tibble: 80 × 11\n   flag_URL          rank player nation confederation goals  caps goalsper_match\n   &lt;chr&gt;            &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;          &lt;dbl&gt;\n 1 https://upload.…     1 Crist… Portu… UEFA            130   212           0.61\n 2 https://upload.…     2 Lione… Argen… CONMEBOL        109   187           0.58\n 3 https://upload.…     3 Ali D… Iran   AFC             108   148           0.73\n 4 https://upload.…     4 Sunil… India  AFC              94   151           0.62\n 5 https://upload.…     5 Mokht… Malay… AFC              89   142           0.63\n 6 https://upload.…     6 Ali M… Unite… AFC              85   115           0.74\n 7 https://upload.…     6 Romel… Belgi… UEFA             85   119           0.71\n 8 https://upload.…     8 Feren… Hunga… UEFA             84    89           0.94\n 9 https://upload.…     9 Rober… Poland UEFA             83   152           0.55\n10 https://upload.…    10 Godfr… Zambia CAF              79   111           0.71\n# ℹ 70 more rows\n# ℹ 3 more variables: career_span &lt;chr&gt;, date_of_50th_goal &lt;chr&gt;, ref &lt;chr&gt;\n\n\nNow that I have the data scraped and cleaned, I’m interested in making some tables using the ::gt() package. Tables are great for communicating summary information, so I’ll first build a graphic of the top 12 international goal scorers of all time.\n\ndf_top_scorers &lt;- raw %&gt;% \n  slice(1:12)\n\nThen, I’ll extract the min and max values from the table for conditional formatting of the table.\n\nmin_goals &lt;- df_top_scorers$goals %&gt;% min()\nmax_goals &lt;- df_top_scorers$goals %&gt;% max()\n\ngoals_palette &lt;- col_numeric(c(\"lightgreen\", \"darkgreen\"), \n                             domain = c(min_goals, max_goals), \n                             alpha = .75)\n\nFor the first table, I’ll put the columns and styling in place first. I’m going to build a table that includes the flag_url column – which is messy at first – and then I’ll use a function to render the flag graphics from those URLs. This blog post is excellent – it showed me how to do this step-by-step.\n\n(tbl_top_scorers &lt;- df_top_scorers %&gt;% \n  select(rank, player, career_span, flag_URL, nation, goals, caps, goalsper_match) %&gt;% \n  gt() %&gt;% \n  #rename columns\n  cols_label(rank = 'Rank',\n             player = 'Name',\n             career_span = 'Career Span',\n             nation = 'Country',\n             goals = 'Total Goals Scored',\n             caps = 'Matches',\n             goalsper_match = 'Goals per Match') %&gt;% \n  #add table title\n  tab_header(title = md(\"**Total Goals Scored in Men's International Soccer Matches**\")) %&gt;% \n  tab_source_note(source_note = \"Data from Wikipedia\") %&gt;% \n  #apply new style to all column headers\n  tab_style(\n    locations = cells_column_labels(columns = everything()),\n    style = list(\n      #thick border\n      cell_borders(sides = \"bottom\", weight = px(3)),\n      #make text bold\n      cell_text(weight = \"bold\")\n    )\n  ) %&gt;% \n  #apply different style to title\n  tab_style(locations = cells_title(groups = \"title\"),\n            style = list(\n              cell_text(weight = \"bold\", size = 24)\n            )) %&gt;% \n  data_color(columns = c(goals),\n             colors = goals_palette) %&gt;% \n  opt_all_caps() %&gt;% \n  opt_table_font(\n    font = list(\n      google_font(\"Chivo\"),\n      default_fonts()\n    )\n  ) %&gt;% \n  tab_options(\n    #remove border between column headers and title\n    column_labels.border.top.width = px(3),\n    column_labels.border.top.color = \"transparent\",\n    #remove border around the table\n    table.border.top.color = \"transparent\",\n    table.border.bottom.color = \"transparent\",\n    #adjust font sizes and alignment\n    source_notes.font.size = 12,\n    heading.align = \"left\"\n  ))\n\n\n\n\n\n\n\nTotal Goals Scored in Men’s International Soccer Matches\n\n\nRank\nName\nCareer Span\nflag_URL\nCountry\nTotal Goals Scored\nMatches\nGoals per Match\n\n\n\n\n1\nCristiano Ronaldo\n2003–\nhttps://upload.wikimedia.org/wikipedia/commons/5/5c/Flag_of_Portugal.svg\nPortugal\n130\n212\n0.61\n\n\n2\nLionel Messi\n2005–\nhttps://upload.wikimedia.org/wikipedia/commons/1/1a/Flag_of_Argentina.svg\nArgentina\n109\n187\n0.58\n\n\n3\nAli Daei\n1993–2006\nhttps://upload.wikimedia.org/wikipedia/commons/c/ca/Flag_of_Iran.svg\nIran\n108\n148\n0.73\n\n\n4\nSunil Chhetri\n2005–2024\nhttps://upload.wikimedia.org/wikipedia/en/4/41/Flag_of_India.svg\nIndia\n94\n151\n0.62\n\n\n5\nMokhtar Dahari\n1972–1985\nhttps://upload.wikimedia.org/wikipedia/commons/6/66/Flag_of_Malaysia.svg\nMalaysia\n89\n142\n0.63\n\n\n6\nAli Mabkhout\n2009–\nhttps://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_United_Arab_Emirates.svg\nUnited Arab Emirates\n85\n115\n0.74\n\n\n6\nRomelu Lukaku\n2010–\nhttps://upload.wikimedia.org/wikipedia/commons/9/92/Flag_of_Belgium_%28civil%29.svg\nBelgium\n85\n119\n0.71\n\n\n8\nFerenc Puskás\n1945–1962\nhttps://upload.wikimedia.org/wikipedia/commons/c/c1/Flag_of_Hungary.svg\nHungary\n84\n89\n0.94\n\n\n9\nRobert Lewandowski\n2008–\nhttps://upload.wikimedia.org/wikipedia/en/1/12/Flag_of_Poland.svg\nPoland\n83\n152\n0.55\n\n\n10\nGodfrey Chitalu\n1968–1980\nhttps://upload.wikimedia.org/wikipedia/commons/0/06/Flag_of_Zambia.svg\nZambia\n79\n111\n0.71\n\n\n10\nNeymar\n2010–\nhttps://upload.wikimedia.org/wikipedia/en/0/05/Flag_of_Brazil.svg\nBrazil\n79\n128\n0.62\n\n\n12\nHussein Saeed\n1977–1990\nhttps://upload.wikimedia.org/wikipedia/commons/f/f6/Flag_of_Iraq.svg\nIraq\n78\n137\n0.57\n\n\n\nData from Wikipedia\n\n\n\n\n\n\n\n\n\n(tbl_top_scorers &lt;- tbl_top_scorers %&gt;% \n    text_transform(\n    #Apply a function to a column\n    locations = cells_body(c(flag_URL)),\n    fn = function(x) {\n      #Return an image of set dimensions\n      web_image(\n        url = x,\n        height = 12\n      )\n    }\n  ) %&gt;% \n  #Hide column header flag_URL and reduce width\n  cols_width(c(flag_URL) ~ px(30)) %&gt;% \n  cols_label(flag_URL = \"\"))\n\n\n\n\n\n\n\nTotal Goals Scored in Men’s International Soccer Matches\n\n\nRank\nName\nCareer Span\n\nCountry\nTotal Goals Scored\nMatches\nGoals per Match\n\n\n\n\n1\nCristiano Ronaldo\n2003–\n\nPortugal\n130\n212\n0.61\n\n\n2\nLionel Messi\n2005–\n\nArgentina\n109\n187\n0.58\n\n\n3\nAli Daei\n1993–2006\n\nIran\n108\n148\n0.73\n\n\n4\nSunil Chhetri\n2005–2024\n\nIndia\n94\n151\n0.62\n\n\n5\nMokhtar Dahari\n1972–1985\n\nMalaysia\n89\n142\n0.63\n\n\n6\nAli Mabkhout\n2009–\n\nUnited Arab Emirates\n85\n115\n0.74\n\n\n6\nRomelu Lukaku\n2010–\n\nBelgium\n85\n119\n0.71\n\n\n8\nFerenc Puskás\n1945–1962\n\nHungary\n84\n89\n0.94\n\n\n9\nRobert Lewandowski\n2008–\n\nPoland\n83\n152\n0.55\n\n\n10\nGodfrey Chitalu\n1968–1980\n\nZambia\n79\n111\n0.71\n\n\n10\nNeymar\n2010–\n\nBrazil\n79\n128\n0.62\n\n\n12\nHussein Saeed\n1977–1990\n\nIraq\n78\n137\n0.57\n\n\n\nData from Wikipedia"
  },
  {
    "objectID": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html#purpose",
    "href": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html#purpose",
    "title": "Building beautiful tables with the gt:: package in R",
    "section": "",
    "text": "In this project, I wanted to experiment with the gt:: package to create a beautiful table using R. This code will walk through scraping a table from Wikipedia of the top international goal scorers in men’s soccer history."
  },
  {
    "objectID": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html#setup-and-data-preparation",
    "href": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html#setup-and-data-preparation",
    "title": "Building beautiful tables with the gt:: package in R",
    "section": "",
    "text": "Required packages:\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(scales)\nlibrary(htmltools)\nlibrary(rvest)\nlibrary(gt)\nlibrary(countrycode)\n\nData.world has a dataset that consists of country names and URLs associated with .svg images of their national flags, which I’d like to include within the table for extra style.\n\nflag_db &lt;- read.csv(\"https://query.data.world/s/cnheo22w5mwowz2tfxrbb3z2i3mzya?dws=00000\", header=TRUE, stringsAsFactors=FALSE) %&gt;% \n  #Convert country names into 3-letter country codes\n  mutate(Code = countrycode(sourcevar = Country, origin = \"country.name\", destination = \"iso3c\", warn = FALSE)) %&gt;% \n  select(Country, flag_URL = ImageURL)"
  },
  {
    "objectID": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html#scrape-wikipedia-data",
    "href": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html#scrape-wikipedia-data",
    "title": "Building beautiful tables with the gt:: package in R",
    "section": "",
    "text": "url_goals &lt;- 'https://en.wikipedia.org/wiki/List_of_men%27s_footballers_with_50_or_more_international_goals'\n\n\n(raw &lt;- url_goals %&gt;%\n  rvest::read_html() %&gt;%\n  rvest::html_nodes(xpath='//*[@id=\"mw-content-text\"]/div[1]/table[2]') %&gt;% \n  html_table() %&gt;% \n  .[[1]] %&gt;% \n  clean_names())\n\n# A tibble: 80 × 10\n    rank player      nation confederation goals caps  goalsper_match career_span\n   &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt;      \n 1     1 Cristiano … Portu… UEFA          130   212   0.61           2003–      \n 2     2 Lionel Mes… Argen… CONMEBOL      109   187   0.58           2005–      \n 3     3 Ali Daei    Iran   AFC           108[… 148[… 0.73           1993–2006  \n 4     4 Sunil Chhe… India  AFC           94    151[… 0.62           2005–2024  \n 5     5 Mokhtar Da… Malay… AFC           89    142   0.63           1972–1985  \n 6     6 Ali Mabkho… Unite… AFC           85    115   0.74           2009–      \n 7     6 Romelu Luk… Belgi… UEFA          85    119   0.71           2010–      \n 8     8 Ferenc Pus… Hunga… UEFA          84    89    0.94           1945–1962  \n 9     9 Robert Lew… Poland UEFA          83    152   0.55           2008–      \n10    10 Godfrey Ch… Zambia CAF           79    111   0.71           1968–1980  \n# ℹ 70 more rows\n# ℹ 2 more variables: date_of_50th_goal &lt;chr&gt;, ref &lt;chr&gt;\n\n\nFor data cleaning of this Wiki table, we need to: * Remove all footnotes within the table * Convert all chr columns to numeric values * Re-code one of the confederation values so that it’s clean for the by confederation table\n\n(raw &lt;- raw %&gt;% \n  #Remove extra spaces in nation to clean this column\n  mutate(nation = str_replace_all(str_trim(nation), \"\\\\s+\", \" \")) %&gt;%\n  mutate(nation = case_when(\n    str_detect(nation, \"^Hungary\\\\s+Spain$\") ~ \"Hungary\",\n    #re-coding this as United Kingdom to bring in flag\n    str_detect(nation, \"^England\\\\s+England\\\\s+amateurs$\") ~ \"United Kingdom\",\n    TRUE ~ nation\n  )) %&gt;%\n  mutate(confederation = case_when(\n    confederation == \"AFC / OFC[h]\" ~ \"AFC\",\n    TRUE ~ confederation)) %&gt;% \n  #remove footnotes and transform columns to numeric values\n  mutate_at(vars(player, career_span, goals, caps, goalsper_match), \n            ~ str_remove(., \"\\\\[.*\\\\]\")) %&gt;% \n  mutate_at(vars(goals, caps, goalsper_match), \n            as.numeric) %&gt;% \n  left_join(flag_db, by = c('nation' = 'Country')) %&gt;% \n  select(flag_URL, everything()))\n\n# A tibble: 80 × 11\n   flag_URL          rank player nation confederation goals  caps goalsper_match\n   &lt;chr&gt;            &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;          &lt;dbl&gt;\n 1 https://upload.…     1 Crist… Portu… UEFA            130   212           0.61\n 2 https://upload.…     2 Lione… Argen… CONMEBOL        109   187           0.58\n 3 https://upload.…     3 Ali D… Iran   AFC             108   148           0.73\n 4 https://upload.…     4 Sunil… India  AFC              94   151           0.62\n 5 https://upload.…     5 Mokht… Malay… AFC              89   142           0.63\n 6 https://upload.…     6 Ali M… Unite… AFC              85   115           0.74\n 7 https://upload.…     6 Romel… Belgi… UEFA             85   119           0.71\n 8 https://upload.…     8 Feren… Hunga… UEFA             84    89           0.94\n 9 https://upload.…     9 Rober… Poland UEFA             83   152           0.55\n10 https://upload.…    10 Godfr… Zambia CAF              79   111           0.71\n# ℹ 70 more rows\n# ℹ 3 more variables: career_span &lt;chr&gt;, date_of_50th_goal &lt;chr&gt;, ref &lt;chr&gt;\n\n\nNow that I have the data scraped and cleaned, I’m interested in making some tables using the ::gt() package. Tables are great for communicating summary information, so I’ll first build a graphic of the top 12 international goal scorers of all time.\n\ndf_top_scorers &lt;- raw %&gt;% \n  slice(1:12)\n\nThen, I’ll extract the min and max values from the table for conditional formatting of the table.\n\nmin_goals &lt;- df_top_scorers$goals %&gt;% min()\nmax_goals &lt;- df_top_scorers$goals %&gt;% max()\n\ngoals_palette &lt;- col_numeric(c(\"lightgreen\", \"darkgreen\"), \n                             domain = c(min_goals, max_goals), \n                             alpha = .75)\n\nFor the first table, I’ll put the columns and styling in place first. I’m going to build a table that includes the flag_url column – which is messy at first – and then I’ll use a function to render the flag graphics from those URLs. This blog post is excellent – it showed me how to do this step-by-step.\n\n(tbl_top_scorers &lt;- df_top_scorers %&gt;% \n  select(rank, player, career_span, flag_URL, nation, goals, caps, goalsper_match) %&gt;% \n  gt() %&gt;% \n  #rename columns\n  cols_label(rank = 'Rank',\n             player = 'Name',\n             career_span = 'Career Span',\n             nation = 'Country',\n             goals = 'Total Goals Scored',\n             caps = 'Matches',\n             goalsper_match = 'Goals per Match') %&gt;% \n  #add table title\n  tab_header(title = md(\"**Total Goals Scored in Men's International Soccer Matches**\")) %&gt;% \n  tab_source_note(source_note = \"Data from Wikipedia\") %&gt;% \n  #apply new style to all column headers\n  tab_style(\n    locations = cells_column_labels(columns = everything()),\n    style = list(\n      #thick border\n      cell_borders(sides = \"bottom\", weight = px(3)),\n      #make text bold\n      cell_text(weight = \"bold\")\n    )\n  ) %&gt;% \n  #apply different style to title\n  tab_style(locations = cells_title(groups = \"title\"),\n            style = list(\n              cell_text(weight = \"bold\", size = 24)\n            )) %&gt;% \n  data_color(columns = c(goals),\n             colors = goals_palette) %&gt;% \n  opt_all_caps() %&gt;% \n  opt_table_font(\n    font = list(\n      google_font(\"Chivo\"),\n      default_fonts()\n    )\n  ) %&gt;% \n  tab_options(\n    #remove border between column headers and title\n    column_labels.border.top.width = px(3),\n    column_labels.border.top.color = \"transparent\",\n    #remove border around the table\n    table.border.top.color = \"transparent\",\n    table.border.bottom.color = \"transparent\",\n    #adjust font sizes and alignment\n    source_notes.font.size = 12,\n    heading.align = \"left\"\n  ))\n\n\n\n\n\n\n\nTotal Goals Scored in Men’s International Soccer Matches\n\n\nRank\nName\nCareer Span\nflag_URL\nCountry\nTotal Goals Scored\nMatches\nGoals per Match\n\n\n\n\n1\nCristiano Ronaldo\n2003–\nhttps://upload.wikimedia.org/wikipedia/commons/5/5c/Flag_of_Portugal.svg\nPortugal\n130\n212\n0.61\n\n\n2\nLionel Messi\n2005–\nhttps://upload.wikimedia.org/wikipedia/commons/1/1a/Flag_of_Argentina.svg\nArgentina\n109\n187\n0.58\n\n\n3\nAli Daei\n1993–2006\nhttps://upload.wikimedia.org/wikipedia/commons/c/ca/Flag_of_Iran.svg\nIran\n108\n148\n0.73\n\n\n4\nSunil Chhetri\n2005–2024\nhttps://upload.wikimedia.org/wikipedia/en/4/41/Flag_of_India.svg\nIndia\n94\n151\n0.62\n\n\n5\nMokhtar Dahari\n1972–1985\nhttps://upload.wikimedia.org/wikipedia/commons/6/66/Flag_of_Malaysia.svg\nMalaysia\n89\n142\n0.63\n\n\n6\nAli Mabkhout\n2009–\nhttps://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_United_Arab_Emirates.svg\nUnited Arab Emirates\n85\n115\n0.74\n\n\n6\nRomelu Lukaku\n2010–\nhttps://upload.wikimedia.org/wikipedia/commons/9/92/Flag_of_Belgium_%28civil%29.svg\nBelgium\n85\n119\n0.71\n\n\n8\nFerenc Puskás\n1945–1962\nhttps://upload.wikimedia.org/wikipedia/commons/c/c1/Flag_of_Hungary.svg\nHungary\n84\n89\n0.94\n\n\n9\nRobert Lewandowski\n2008–\nhttps://upload.wikimedia.org/wikipedia/en/1/12/Flag_of_Poland.svg\nPoland\n83\n152\n0.55\n\n\n10\nGodfrey Chitalu\n1968–1980\nhttps://upload.wikimedia.org/wikipedia/commons/0/06/Flag_of_Zambia.svg\nZambia\n79\n111\n0.71\n\n\n10\nNeymar\n2010–\nhttps://upload.wikimedia.org/wikipedia/en/0/05/Flag_of_Brazil.svg\nBrazil\n79\n128\n0.62\n\n\n12\nHussein Saeed\n1977–1990\nhttps://upload.wikimedia.org/wikipedia/commons/f/f6/Flag_of_Iraq.svg\nIraq\n78\n137\n0.57\n\n\n\nData from Wikipedia\n\n\n\n\n\n\n\n\n\n(tbl_top_scorers &lt;- tbl_top_scorers %&gt;% \n    text_transform(\n    #Apply a function to a column\n    locations = cells_body(c(flag_URL)),\n    fn = function(x) {\n      #Return an image of set dimensions\n      web_image(\n        url = x,\n        height = 12\n      )\n    }\n  ) %&gt;% \n  #Hide column header flag_URL and reduce width\n  cols_width(c(flag_URL) ~ px(30)) %&gt;% \n  cols_label(flag_URL = \"\"))\n\n\n\n\n\n\n\nTotal Goals Scored in Men’s International Soccer Matches\n\n\nRank\nName\nCareer Span\n\nCountry\nTotal Goals Scored\nMatches\nGoals per Match\n\n\n\n\n1\nCristiano Ronaldo\n2003–\n\nPortugal\n130\n212\n0.61\n\n\n2\nLionel Messi\n2005–\n\nArgentina\n109\n187\n0.58\n\n\n3\nAli Daei\n1993–2006\n\nIran\n108\n148\n0.73\n\n\n4\nSunil Chhetri\n2005–2024\n\nIndia\n94\n151\n0.62\n\n\n5\nMokhtar Dahari\n1972–1985\n\nMalaysia\n89\n142\n0.63\n\n\n6\nAli Mabkhout\n2009–\n\nUnited Arab Emirates\n85\n115\n0.74\n\n\n6\nRomelu Lukaku\n2010–\n\nBelgium\n85\n119\n0.71\n\n\n8\nFerenc Puskás\n1945–1962\n\nHungary\n84\n89\n0.94\n\n\n9\nRobert Lewandowski\n2008–\n\nPoland\n83\n152\n0.55\n\n\n10\nGodfrey Chitalu\n1968–1980\n\nZambia\n79\n111\n0.71\n\n\n10\nNeymar\n2010–\n\nBrazil\n79\n128\n0.62\n\n\n12\nHussein Saeed\n1977–1990\n\nIraq\n78\n137\n0.57\n\n\n\nData from Wikipedia"
  },
  {
    "objectID": "posts/2019-04-15-distance-sustainable-development-health/index.html",
    "href": "posts/2019-04-15-distance-sustainable-development-health/index.html",
    "title": "Experimenting with distance as a concept for SDG achievement",
    "section": "",
    "text": "The United Nations created the Sustainable Development Goals (SDGs) to set an ambitious global development agenda to work toward by 2030. A continental development organization in Africa asked, how could we think about SDG 3 (the health goals) in a holistic and aggregate sense?\nIn this analysis, I explore measuring a country’s distance to target achievement. I build a composite score of standardized distance to SDG 3 achievement, and find that Nigeria is furthest from achieving SDG 3 of all African countries.\n\n\n\nThis analysis uses results from the International Futures global forecasting model and its Current Path scenario. The results span many of the measurable targets of SDG3, including:\n\nMaternal mortality ratio\nNeonatal mortality ratio\nUnder-5 mortality rate\nNon-communicable disease death rate\nTraffic accident death rate\nAIDS death rate\nMalaria death rate"
  },
  {
    "objectID": "posts/2019-04-15-distance-sustainable-development-health/index.html#purpose",
    "href": "posts/2019-04-15-distance-sustainable-development-health/index.html#purpose",
    "title": "Experimenting with distance as a concept for SDG achievement",
    "section": "",
    "text": "The United Nations created the Sustainable Development Goals (SDGs) to set an ambitious global development agenda to work toward by 2030. A continental development organization in Africa asked, how could we think about SDG 3 (the health goals) in a holistic and aggregate sense?\nIn this analysis, I explore measuring a country’s distance to target achievement. I build a composite score of standardized distance to SDG 3 achievement, and find that Nigeria is furthest from achieving SDG 3 of all African countries."
  },
  {
    "objectID": "posts/2019-04-15-distance-sustainable-development-health/index.html#dataset",
    "href": "posts/2019-04-15-distance-sustainable-development-health/index.html#dataset",
    "title": "Experimenting with distance as a concept for SDG achievement",
    "section": "",
    "text": "This analysis uses results from the International Futures global forecasting model and its Current Path scenario. The results span many of the measurable targets of SDG3, including:\n\nMaternal mortality ratio\nNeonatal mortality ratio\nUnder-5 mortality rate\nNon-communicable disease death rate\nTraffic accident death rate\nAIDS death rate\nMalaria death rate"
  },
  {
    "objectID": "posts/2019-04-15-distance-sustainable-development-health/index.html#setting-order-by-distance-from-achievement",
    "href": "posts/2019-04-15-distance-sustainable-development-health/index.html#setting-order-by-distance-from-achievement",
    "title": "Experimenting with distance as a concept for SDG achievement",
    "section": "Setting order by distance from achievement",
    "text": "Setting order by distance from achievement\n\n\n# A tibble: 54 × 2\n   country               avg_val\n   &lt;chr&gt;                   &lt;dbl&gt;\n 1 Libya                  -0.703\n 2 Sao Tome and Principe  -0.677\n 3 Cape Verde             -0.661\n 4 Seychelles             -0.635\n 5 Egypt                  -0.630\n 6 Tunisia                -0.552\n 7 Senegal                -0.453\n 8 Niger                  -0.387\n 9 Eritrea                -0.373\n10 Algeria                -0.363\n# ℹ 44 more rows\n\n\n\n(dist_plot_df &lt;- df_scaled_dist_results %&gt;% \n  filter(country != 'TARGET') %&gt;% \n  left_join(x=.,\n            y=df_scaled_dist_results_rel_targets,\n            by='country') %&gt;% \n  left_join(x=.,\n            y=cntry_order,\n            by='country') %&gt;% \n  arrange(-avg_val) %&gt;% \n  gather(var, val, 2:8))\n\nWarning: attributes are not identical across measure variables; they will be\ndropped\n\n\n# A tibble: 378 × 4\n   country     avg_val var        val\n   &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;\n 1 Nigeria       1.15  AIDS  -0.00515\n 2 Somalia       0.922 AIDS  -0.711  \n 3 Equa Guinea   0.843 AIDS   0.902  \n 4 Chad          0.766 AIDS  -0.558  \n 5 Central AfR   0.741 AIDS   0.569  \n 6 SierraLeo     0.610 AIDS  -0.372  \n 7 Lesotho       0.610 AIDS   3.90   \n 8 Angola        0.551 AIDS  -0.340  \n 9 Sudan South   0.527 AIDS   1.02   \n10 Cameroon      0.449 AIDS   0.432  \n# ℹ 368 more rows\n\n\n\ncntry_order$country &lt;- as.factor(cntry_order$country)\n\n\n(df_target_scaled_vals &lt;- df_scaled_dist_results %&gt;% \n  filter(country == 'TARGET') %&gt;% \n  left_join(x=.,\n            y=df_scaled_dist_results_rel_targets %&gt;% filter(country == 'TARGET'),\n            by='country') %&gt;% \n  gather(var, target, 2:8) %&gt;% \n  select(2:3))\n\nWarning: attributes are not identical across measure variables; they will be\ndropped\n\n\n# A tibble: 7 × 2\n  var          target\n  &lt;chr&gt;         &lt;dbl&gt;\n1 AIDS         -0.821\n2 CHILDDTHR    -0.868\n3 Malaria      -0.782\n4 MATMORTRATIO -1.08 \n5 NEONATMOR    -0.516\n6 NonCommun    -3.05 \n7 TrafficAcc   -6.07 \n\n\n\ncbPalette &lt;- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\ntarg_cols &lt;- c('AIDS' = \"#E69F00\", \n               'CHILDDTHR' = \"#56B4E9\",\n               'Malaria' = \"#009E73\",\n               'MATMORTRATIO' = \"#F0E442\",\n               'NEONATMOR' = \"#0072B2\",\n               'NonCommun' = \"#D55E00\",\n               'TrafficAcc' = \"#CC79A7\")\n\n\n(dist_plot_df_2 &lt;- dist_plot_df %&gt;% \n  left_join(x=.,\n            y=df_target_scaled_vals,\n            by='var'))\n\n# A tibble: 378 × 5\n   country     avg_val var        val target\n   &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n 1 Nigeria       1.15  AIDS  -0.00515 -0.821\n 2 Somalia       0.922 AIDS  -0.711   -0.821\n 3 Equa Guinea   0.843 AIDS   0.902   -0.821\n 4 Chad          0.766 AIDS  -0.558   -0.821\n 5 Central AfR   0.741 AIDS   0.569   -0.821\n 6 SierraLeo     0.610 AIDS  -0.372   -0.821\n 7 Lesotho       0.610 AIDS   3.90    -0.821\n 8 Angola        0.551 AIDS  -0.340   -0.821\n 9 Sudan South   0.527 AIDS   1.02    -0.821\n10 Cameroon      0.449 AIDS   0.432   -0.821\n# ℹ 368 more rows\n\n\n\n(seg_length &lt;- dist_plot_df_2 %&gt;% \n  mutate(achieve = ifelse(val &lt;= target, 1, 0)) %&gt;% \n  filter(achieve == 0) %&gt;% \n  group_by(country) %&gt;% \n  summarise(min_val = min(val),\n            max_val = max(val)))\n\n# A tibble: 54 × 3\n   country      min_val max_val\n   &lt;chr&gt;          &lt;dbl&gt;   &lt;dbl&gt;\n 1 Algeria       -1.04    1.52 \n 2 Angola        -0.570   3.07 \n 3 Benin         -0.553   0.513\n 4 Botswana      -0.766   1.66 \n 5 Burkina Faso  -0.648   1.16 \n 6 Burundi       -1.03    1.11 \n 7 Cameroon      -0.761   1.29 \n 8 Cape Verde    -0.388   0.539\n 9 Central AfR   -0.497   1.73 \n10 Chad          -0.974   2.78 \n# ℹ 44 more rows\n\n\n\ndist_plot_df_2 %&gt;% \n  mutate(achieve = ifelse(val &lt;= target, 1, 0)) %&gt;% \n  filter(achieve == 0) %&gt;% \n  ggplot(.,\n         aes(x=val, \n             y=factor(country, levels=cntry_order$country))) + \n  geom_point(aes(color=var), \n             #height=.25, width=0,\n             alpha=.5, size=8) + \n  geom_segment(data=seg_length,\n               aes(x=min_val, xend=max_val, yend=country),\n               color='gray60', linewidth=1) + \n  labs(x='',\n       y='') + \n  my.theme.minimal + \n  theme(legend.position = 'top') + \n  scale_color_manual(values = targ_cols,\n                     labels = c('MATMORTRATIO' = 'Maternal Mortality',\n                               'NEONATMOR' = 'Neonatal Mortality',\n                               'CHILDDTHR' = '&lt; 5 Mortality',\n                               'NonCommun' = 'NCDs',\n                               'TrafficAcc' = 'Traffic Mortality')) + \n  scale_y_discrete(labels = function(x) str_wrap(x, width = 10)) + \n  scale_x_continuous(position = 'top')"
  },
  {
    "objectID": "posts/2019-06-25-mapping-african-health-clusters/index.html",
    "href": "posts/2019-06-25-mapping-african-health-clusters/index.html",
    "title": "PART TWO: Mapping of African Health Clusters",
    "section": "",
    "text": "library(tidyverse)\nlibrary(sf)\nlibrary(maps)\nlibrary(ggsci)\nlibrary(patchwork)\n\nFirst, I’ll read in the cluster analysis results from Part One.\n\nkmeans_viz_data &lt;- read_csv('.//data/kmeans_viz_data.csv')\n\nGet the country polygons from the sf:: package.\n\nworld1 &lt;- sf::st_as_sf(map('world', plot = FALSE, fill = TRUE))\n\nPlot these polygons using ggplot().\n\nggplot() + \n  geom_sf(data = world1) + \n  coord_sf(xlim = c(-30, 60),\n            ylim = c(39, -37))\n\n\n\n\n\n\n\n\nCreate custom map themes.\n\nmap.theme &lt;- theme(text = element_text(family = \"Arial\", color = \"black\"), \n                   panel.background = element_rect(fill = \"white\"),\n                   plot.background = element_rect(fill = \"white\"),\n                   #panel.grid = element_blank(),\n                   #panel.border = element_blank(),\n                   plot.title = element_text(size = 25, hjust = 0),\n                   plot.subtitle = element_text(size = 25),\n                   plot.caption = element_text(size = 20), \n                   axis.text = element_blank(),\n                   axis.title = element_blank(),\n                   axis.ticks = element_blank(),\n                   legend.position = \"inside\", \n                   legend.key.size = unit(.7, \"cm\"),\n                   legend.direction = \"horizontal\",\n                   legend.background = element_rect(fill=\"white\"))\n\nmap.theme.small &lt;- theme(text = element_text(family = \"Arial\", color = \"black\"), \n                   panel.background = element_rect(fill = \"white\"),\n                   plot.background = element_rect(fill = \"white\"),\n                   panel.grid = element_blank(),\n                   plot.title = element_text(size = 8, face = 'bold', hjust = 0.5),\n                   plot.subtitle = element_text(size = 8),\n                   axis.text = element_blank(),\n                   axis.title = element_blank(),\n                   axis.ticks = element_blank(),\n                   legend.position = \"none\", \n                   legend.background = element_rect(fill=\"white\"),\n                   legend.title = element_blank())\n\n\nMapping\nRecode some country names to make sf:: and the cluster results compatible.\n\nmap.world &lt;- map_data(\"world\") %&gt;% \n  mutate(region = recode(region, \n                         \"Central African Republic\" = \"Central AfR\",\n                         'Democratic Republic of the Congo' = 'Congo, Democratic Republic of',\n                         'Republic of Congo' = 'Congo, Republic of',\n                         'Equatorial Guinea' = 'Equa Guinea',\n                         'Guinea-Bissau' = 'GuineaBiss',\n                         'Ivory Coast' = \"Cote d'Ivoire\",\n                         'Sierra Leone' = 'SierraLeo', \n                         'South Sudan' = 'Sudan South'))\n\n\n\nCluster maps\n\njoined.world.map &lt;- left_join(x=map.world,\n                             y=kmeans_viz_data,\n                             by=c('region' = 'country'))\n\nUsing the coordinates from above to focus on Africa, I’ll map the cluster results.\n\n(l_map_clust &lt;- joined.world.map %&gt;% \n  filter(africa == '1') %&gt;% \n  ggplot(.) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = clust_name), color=\"gray90\") +\n  geom_polygon(data=. %&gt;% filter(region == 'Western Sahara'),\n               aes(x = long, y = lat, group = group), fill = \"gray90\", color=\"gray90\") +\n  coord_map(xlim = c(-30, 60),\n            ylim = c(39, -37)) + \n  labs(fill = '') + \n  scale_fill_jco() + \n  map.theme + \n  guides(fill=guide_legend(nrow=2, byrow=TRUE)) + \n  theme(legend.position.inside = c(.2, .3)))\n\n\n\n\n\n\n\n\nI want to plot each of the island nations alongside the continental map, so that you can see their results more clearly. I’ll generate a zoomed in map for each, and then use patchwork:: to bring them all together.\n\n(s_map_1 &lt;- joined.world.map %&gt;% \n  filter(africa == 1) %&gt;% \n  ggplot(.) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = clust_name), color=\"gray90\") +\n  scale_fill_jco() + \n  ggtitle('Cabo Verde') + \n  coord_map(xlim = c(-25.5, -22.2), ylim = c(14.5, 17.8)) + \n  map.theme.small)\n\n\n\n\n\n\n\n\n\n(s_map_2 &lt;- joined.world.map %&gt;% \n  filter(africa == 1) %&gt;% \n  ggplot(.) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = clust_name), color=\"gray90\") +\n  scale_fill_jco() + \n  ggtitle('Comoros') + \n  coord_map(xlim = c(42.1, 45.4), ylim = c(-13.4, -10.1)) + \n  map.theme.small)\n\n\n\n\n\n\n\n\n\n(s_map_3 &lt;- joined.world.map %&gt;% \n  filter(africa == 1) %&gt;% \n  ggplot(.) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = clust_name), color=\"gray90\") +\n  scale_fill_jco() + \n  ggtitle('Mauritius') + \n  coord_map(xlim = c(56, 59.3), ylim = c(-22.3, -19)) + \n  map.theme.small)\n\n\n\n\n\n\n\n\n\n(s_map_4 &lt;- joined.world.map %&gt;% \n  filter(africa == 1) %&gt;% \n  ggplot(.) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = clust_name), color=\"gray90\") +\n  scale_fill_jco() + \n  ggtitle('Sao Tome and Principe') + \n  coord_map(xlim = c(5, 8.3), ylim = c(-.5, 2.8)) + \n  map.theme.small)\n\n\n\n\n\n\n\n\n\n(s_map_5 &lt;- joined.world.map %&gt;% \n  filter(africa == 1) %&gt;% \n  ggplot(.) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = clust_name), color=\"gray90\") +\n  scale_fill_jco() + \n  ggtitle('Seychelles') + \n  coord_map(xlim = c(55.2, 55.8), ylim = c(-4.9, -4.4)) + \n  map.theme.small)\n\n\n\n\n\n\n\n\n\n(s_map_plot_grid &lt;- s_map_1 / s_map_2 / s_map_3 / s_map_4 / s_map_5)\n\n\n\n\n\n\n\n\nNow, the final plot that brings them all together.\n\n(l_map_clust + s_map_plot_grid + plot_layout(widths = c(8, 1, 1)))\n\n\n\n\n\n\n\n\nThese results demonstrate that, while there are some discernible regional patterns in health outcomes, some countries in West, Central, and East Africa do not necessarily look like their neighbors."
  },
  {
    "objectID": "posts/2019-06-18-clustering-african-health-outcomes/index.html",
    "href": "posts/2019-06-18-clustering-african-health-outcomes/index.html",
    "title": "PART ONE: Cluster Analysis of African Health Outcomes",
    "section": "",
    "text": "The United Nations created the Sustainable Development Goals (SDGs) to set an ambitious global development agenda to work toward by 2030. A continental development organization in Africa asked, how could we think about SDG 3 (the health goals) in a holistic and aggregate sense?\nTo get a clearer picture of how health outcomes are spread across the continent, I use cluster analysis to group countries by primary health outcomes data.\n\n\n\nThis analysis uses results from the International Futures global forecasting model and its Base Case (or Current Path) scenario. The dataset contains country-level health outcomes projections from 2015-2065. For this clustering exercise, I am using the 2019 results. The variables in this analysis include:\n\nDR_OthCommumDis: Death Rate from other communicable diseases\n\nDR_MaligNeoPl: Death Rate from malignant neoplasms (cancers)\nDR_CardioVasc: Death Rate from cariovascular diseases\nDR_Digestive: Death Rate from digestive illnesses\nDR_Respiratory: Death Rate from respiratory illnesses\nDR_OtherNonComm: Death Rate from other non-communicable diseases\nDR_TrafficAcc: Death Rate from traffic accidents\nDR_UnIntInj: Death Rate from unintentional injuries\nDR_IntInj: Death Rate from intentional injuries\nDR_Diabetes: Death Rate from diabetes\nDR_AIDS: Death Rate from HIV/AIDS\nDR_Diarrhea: Death Rate from diarrheal illnesses\nDR_Malaria: Death Rate from malaria\nDR_RespInfec: Death Rate from respiratory infections\nDR_MentalHealth: Death Rate from mental health illnesses\nCLPC: Calories consumed per capita\nHLSTUNT: Stunting rate for under-5 population\nHLSMOKING: Smoking rate\nINFMOR: Infant mortality rate (deaths per 1,000 live births)\nMATMORTRATIO: Maternal mortality rate (deaths per 100,000 live births)\n\nFor more information on these fields, see the International Futures Health Model documentation.\n\n\n\n\nlibrary(tidyverse)\nlibrary(factoextra)\nlibrary(NbClust)\nlibrary(ggsci)              #for jco color palette\nlibrary(psych)              \n\nmy.theme &lt;- theme(\n  plot.title = element_text(color=\"black\", face=\"plain\", size=17, hjust=0), \n  plot.subtitle = element_text(color=\"black\", size=15, hjust=0), \n  axis.title = element_text(color=\"black\", face=\"plain\", size=14), \n  axis.text.y = element_text(size=16), \n  axis.text.x = element_text(angle = 90, hjust = 1, size=13), \n  plot.caption = element_text(color=\"black\", size=13), \n  panel.background =  element_rect(fill = \"#F7F7F7\", colour = NA), \n  panel.grid.major = element_line(colour = \"grey90\", linewidth = 0.5),\n  panel.grid.minor = element_line(colour = \"grey93\", linewidth = 0.5),\n  panel.border = element_rect(colour = \"black\", linewidth = 0.5, fill=NA, linetype = 1),\n  legend.title=element_blank(), \n  legend.text = element_text(color=\"black\", size=14, hjust=0),\n  legend.spacing.x = unit(.5, 'cm'), \n  legend.position = 'bottom',\n  strip.text = element_text(color=\"black\", face=\"plain\", size=16),\n  strip.background = element_rect(fill = \"white\"))\n\n\ndf &lt;- readxl::read_xlsx('.//data/cluster_health_afr_14mar2019.xlsx')\n\ndf %&gt;% glimpse()\n\nRows: 1,080\nColumns: 56\n$ variable &lt;chr&gt; \"DR_OthCommumDis\", \"DR_MaligNeoPl\", \"DR_CardioVasc\", \"DR_Dige…\n$ country  &lt;chr&gt; \"Algeria\", \"Algeria\", \"Algeria\", \"Algeria\", \"Algeria\", \"Alger…\n$ dim      &lt;chr&gt; \"Total\", \"Total\", \"Total\", \"Total\", \"Total\", \"Total\", \"Total\"…\n$ unit     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ scenario &lt;chr&gt; \"Base\", \"Base\", \"Base\", \"Base\", \"Base\", \"Base\", \"Base\", \"Base…\n$ `2015`   &lt;dbl&gt; 0.4450, 0.5120, 1.7640, 0.0630, 0.1530, 0.6220, 0.2760, 0.146…\n$ `2016`   &lt;dbl&gt; 0.4250, 0.5170, 1.8020, 0.0640, 0.1570, 0.6180, 0.2800, 0.146…\n$ `2017`   &lt;dbl&gt; 0.4100, 0.5210, 1.8300, 0.0640, 0.1610, 0.6170, 0.2790, 0.148…\n$ `2018`   &lt;dbl&gt; 0.3940, 0.5260, 1.8630, 0.0640, 0.1640, 0.6160, 0.2780, 0.149…\n$ `2019`   &lt;dbl&gt; 0.3770, 0.5310, 1.8940, 0.0650, 0.1680, 0.6140, 0.2780, 0.150…\n$ `2020`   &lt;dbl&gt; 0.3600, 0.5360, 1.9260, 0.0660, 0.1720, 0.6110, 0.2780, 0.151…\n$ `2021`   &lt;dbl&gt; 0.3430, 0.5420, 1.9530, 0.0670, 0.1760, 0.6080, 0.2780, 0.151…\n$ `2022`   &lt;dbl&gt; 0.3260, 0.5480, 1.9830, 0.0670, 0.1800, 0.6050, 0.2790, 0.152…\n$ `2023`   &lt;dbl&gt; 0.3110, 0.5550, 2.0140, 0.0680, 0.1850, 0.6040, 0.2790, 0.153…\n$ `2024`   &lt;dbl&gt; 0.2970, 0.5610, 2.0430, 0.0690, 0.1890, 0.6030, 0.2790, 0.153…\n$ `2025`   &lt;dbl&gt; 0.2840, 0.5680, 2.0720, 0.0700, 0.1940, 0.6020, 0.2800, 0.154…\n$ `2026`   &lt;dbl&gt; 0.2720, 0.5750, 2.1020, 0.0710, 0.1980, 0.6030, 0.2810, 0.154…\n$ `2027`   &lt;dbl&gt; 0.2610, 0.5820, 2.1330, 0.0720, 0.2030, 0.6030, 0.2830, 0.154…\n$ `2028`   &lt;dbl&gt; 0.2500, 0.5900, 2.1680, 0.0730, 0.2080, 0.6050, 0.2840, 0.155…\n$ `2029`   &lt;dbl&gt; 0.2400, 0.5980, 2.2020, 0.0740, 0.2140, 0.6070, 0.2860, 0.155…\n$ `2030`   &lt;dbl&gt; 0.2320, 0.6050, 2.2400, 0.0760, 0.2190, 0.6100, 0.2880, 0.156…\n$ `2031`   &lt;dbl&gt; 0.2230, 0.6130, 2.2760, 0.0770, 0.2250, 0.6140, 0.2910, 0.157…\n$ `2032`   &lt;dbl&gt; 0.2160, 0.6210, 2.3170, 0.0780, 0.2310, 0.6180, 0.2930, 0.157…\n$ `2033`   &lt;dbl&gt; 0.2080, 0.6290, 2.3580, 0.0800, 0.2380, 0.6230, 0.2950, 0.158…\n$ `2034`   &lt;dbl&gt; 0.2020, 0.6370, 2.4020, 0.0810, 0.2440, 0.6280, 0.2980, 0.159…\n$ `2035`   &lt;dbl&gt; 0.1960, 0.6440, 2.4440, 0.0830, 0.2510, 0.6330, 0.3000, 0.159…\n$ `2036`   &lt;dbl&gt; 0.1900, 0.6520, 2.4870, 0.0840, 0.2580, 0.6390, 0.3030, 0.160…\n$ `2037`   &lt;dbl&gt; 0.1840, 0.6600, 2.5320, 0.0860, 0.2650, 0.6450, 0.3050, 0.161…\n$ `2038`   &lt;dbl&gt; 0.1790, 0.6680, 2.5770, 0.0870, 0.2720, 0.6510, 0.3080, 0.162…\n$ `2039`   &lt;dbl&gt; 0.1740, 0.6750, 2.6220, 0.0890, 0.2790, 0.6570, 0.3100, 0.163…\n$ `2040`   &lt;dbl&gt; 0.1690, 0.6830, 2.6660, 0.0910, 0.2870, 0.6640, 0.3130, 0.165…\n$ `2041`   &lt;dbl&gt; 0.1650, 0.6910, 2.7110, 0.0930, 0.2950, 0.6700, 0.3150, 0.166…\n$ `2042`   &lt;dbl&gt; 0.1610, 0.6990, 2.7550, 0.0940, 0.3030, 0.6770, 0.3170, 0.167…\n$ `2043`   &lt;dbl&gt; 0.1580, 0.7070, 2.8010, 0.0960, 0.3110, 0.6850, 0.3190, 0.169…\n$ `2044`   &lt;dbl&gt; 0.1560, 0.7150, 2.8470, 0.0990, 0.3190, 0.6940, 0.3210, 0.171…\n$ `2045`   &lt;dbl&gt; 0.1540, 0.7220, 2.8920, 0.1010, 0.3270, 0.7020, 0.3230, 0.173…\n$ `2046`   &lt;dbl&gt; 0.1510, 0.7290, 2.9410, 0.1030, 0.3360, 0.7110, 0.3240, 0.175…\n$ `2047`   &lt;dbl&gt; 0.1490, 0.7360, 2.9880, 0.1050, 0.3450, 0.7190, 0.3250, 0.177…\n$ `2048`   &lt;dbl&gt; 0.1460, 0.7430, 3.0370, 0.1070, 0.3540, 0.7280, 0.3260, 0.179…\n$ `2049`   &lt;dbl&gt; 0.1430, 0.7500, 3.0860, 0.1100, 0.3630, 0.7370, 0.3280, 0.182…\n$ `2050`   &lt;dbl&gt; 0.1400, 0.7560, 3.1340, 0.1120, 0.3720, 0.7440, 0.3290, 0.184…\n$ `2051`   &lt;dbl&gt; 0.1360, 0.7630, 3.1780, 0.1150, 0.3810, 0.7510, 0.3300, 0.186…\n$ `2052`   &lt;dbl&gt; 0.1330, 0.7690, 3.2230, 0.1170, 0.3900, 0.7570, 0.3310, 0.188…\n$ `2053`   &lt;dbl&gt; 0.1300, 0.7750, 3.2690, 0.1190, 0.4000, 0.7640, 0.3320, 0.190…\n$ `2054`   &lt;dbl&gt; 0.1260, 0.7810, 3.3190, 0.1220, 0.4100, 0.7720, 0.3330, 0.193…\n$ `2055`   &lt;dbl&gt; 0.1230, 0.7870, 3.3690, 0.1250, 0.4200, 0.7790, 0.3330, 0.195…\n$ `2056`   &lt;dbl&gt; 0.1200, 0.7920, 3.4220, 0.1280, 0.4300, 0.7870, 0.3340, 0.198…\n$ `2057`   &lt;dbl&gt; 0.1180, 0.7970, 3.4830, 0.1300, 0.4410, 0.7970, 0.3340, 0.201…\n$ `2058`   &lt;dbl&gt; 0.1150, 0.8030, 3.5360, 0.1330, 0.4520, 0.8050, 0.3350, 0.204…\n$ `2059`   &lt;dbl&gt; 0.1120, 0.8080, 3.5950, 0.1370, 0.4640, 0.8130, 0.3360, 0.207…\n$ `2060`   &lt;dbl&gt; 0.1100, 0.8130, 3.6500, 0.1400, 0.4750, 0.8210, 0.3360, 0.210…\n$ `2061`   &lt;dbl&gt; 0.108, 0.817, 3.705, 0.143, 0.487, 0.829, 0.337, 0.213, 0.061…\n$ `2062`   &lt;dbl&gt; 0.105, 0.822, 3.755, 0.146, 0.498, 0.835, 0.338, 0.215, 0.061…\n$ `2063`   &lt;dbl&gt; 0.103, 0.826, 3.805, 0.149, 0.509, 0.842, 0.339, 0.218, 0.061…\n$ `2064`   &lt;dbl&gt; 0.101, 0.830, 3.852, 0.152, 0.520, 0.848, 0.340, 0.222, 0.061…\n$ `2065`   &lt;dbl&gt; 0.099, 0.833, 3.894, 0.155, 0.531, 0.854, 0.340, 0.224, 0.061…\n\n\n\n(df &lt;- df %&gt;% \n  #pivot data\n   gather(year, val, 6:56) %&gt;% \n  #filter on 2019 results\n   filter(year == '2019') %&gt;% \n  #select variable, country, and val\n   select(1:2, 7) %&gt;% \n  #group by variable and generate z-score for clustering\n   group_by(variable) %&gt;% \n   mutate(val = scale(val)) %&gt;% \n   ungroup() %&gt;% \n   spread(variable, val)) \n\n# A tibble: 54 × 21\n   country       CLPC DR_AIDS DR_CardioVasc DR_Diabetes DR_Diarrhea DR_Digestive\n   &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n 1 Algeria     1.63    -0.948         1.19       0.102      -1.42        -1.95  \n 2 Angola     -0.0927  -0.427        -0.951     -0.510       1.10         0.443 \n 3 Benin       0.609   -0.610        -0.427     -0.385       0.815        0.0179\n 4 Botswana   -0.846    1.68         -0.224      0.835      -0.601       -1.28  \n 5 Burkina F…  0.821   -0.709        -0.624     -0.471      -0.0198       0.307 \n 6 Burundi    -1.41    -0.636        -0.777     -0.436       2.16         0.597 \n 7 Cameroon    0.821    0.663        -0.513     -0.178      -0.117        0.346 \n 8 Cape Verde -0.494   -0.637         0.788      0.0205     -1.30        -1.62  \n 9 Central A… -1.29     0.902         0.166     -0.367       1.56         1.81  \n10 Chad       -0.887   -0.621        -0.466     -0.428       3.26         1.48  \n# ℹ 44 more rows\n# ℹ 14 more variables: DR_IntInj &lt;dbl&gt;, DR_Malaria &lt;dbl&gt;, DR_MaligNeoPl &lt;dbl&gt;,\n#   DR_MentalHealth &lt;dbl&gt;, DR_OthCommumDis &lt;dbl&gt;, DR_OtherNonComm &lt;dbl&gt;,\n#   DR_RespInfec &lt;dbl&gt;, DR_Respiratory &lt;dbl&gt;, DR_TrafficAcc &lt;dbl&gt;,\n#   DR_UnIntInj &lt;dbl&gt;, HLSMOKING &lt;dbl&gt;, HLSTUNT &lt;dbl&gt;, INFMOR &lt;dbl&gt;,\n#   MATMORTRATIO &lt;dbl&gt;"
  },
  {
    "objectID": "posts/2019-06-18-clustering-african-health-outcomes/index.html#purpose",
    "href": "posts/2019-06-18-clustering-african-health-outcomes/index.html#purpose",
    "title": "PART ONE: Cluster Analysis of African Health Outcomes",
    "section": "",
    "text": "The United Nations created the Sustainable Development Goals (SDGs) to set an ambitious global development agenda to work toward by 2030. A continental development organization in Africa asked, how could we think about SDG 3 (the health goals) in a holistic and aggregate sense?\nTo get a clearer picture of how health outcomes are spread across the continent, I use cluster analysis to group countries by primary health outcomes data."
  },
  {
    "objectID": "posts/2019-06-18-clustering-african-health-outcomes/index.html#dataset",
    "href": "posts/2019-06-18-clustering-african-health-outcomes/index.html#dataset",
    "title": "PART ONE: Cluster Analysis of African Health Outcomes",
    "section": "",
    "text": "This analysis uses results from the International Futures global forecasting model and its Base Case (or Current Path) scenario. The dataset contains country-level health outcomes projections from 2015-2065. For this clustering exercise, I am using the 2019 results. The variables in this analysis include:\n\nDR_OthCommumDis: Death Rate from other communicable diseases\n\nDR_MaligNeoPl: Death Rate from malignant neoplasms (cancers)\nDR_CardioVasc: Death Rate from cariovascular diseases\nDR_Digestive: Death Rate from digestive illnesses\nDR_Respiratory: Death Rate from respiratory illnesses\nDR_OtherNonComm: Death Rate from other non-communicable diseases\nDR_TrafficAcc: Death Rate from traffic accidents\nDR_UnIntInj: Death Rate from unintentional injuries\nDR_IntInj: Death Rate from intentional injuries\nDR_Diabetes: Death Rate from diabetes\nDR_AIDS: Death Rate from HIV/AIDS\nDR_Diarrhea: Death Rate from diarrheal illnesses\nDR_Malaria: Death Rate from malaria\nDR_RespInfec: Death Rate from respiratory infections\nDR_MentalHealth: Death Rate from mental health illnesses\nCLPC: Calories consumed per capita\nHLSTUNT: Stunting rate for under-5 population\nHLSMOKING: Smoking rate\nINFMOR: Infant mortality rate (deaths per 1,000 live births)\nMATMORTRATIO: Maternal mortality rate (deaths per 100,000 live births)\n\nFor more information on these fields, see the International Futures Health Model documentation."
  },
  {
    "objectID": "posts/2019-06-18-clustering-african-health-outcomes/index.html#setup-and-data-preparation",
    "href": "posts/2019-06-18-clustering-african-health-outcomes/index.html#setup-and-data-preparation",
    "title": "PART ONE: Cluster Analysis of African Health Outcomes",
    "section": "",
    "text": "library(tidyverse)\nlibrary(factoextra)\nlibrary(NbClust)\nlibrary(ggsci)              #for jco color palette\nlibrary(psych)              \n\nmy.theme &lt;- theme(\n  plot.title = element_text(color=\"black\", face=\"plain\", size=17, hjust=0), \n  plot.subtitle = element_text(color=\"black\", size=15, hjust=0), \n  axis.title = element_text(color=\"black\", face=\"plain\", size=14), \n  axis.text.y = element_text(size=16), \n  axis.text.x = element_text(angle = 90, hjust = 1, size=13), \n  plot.caption = element_text(color=\"black\", size=13), \n  panel.background =  element_rect(fill = \"#F7F7F7\", colour = NA), \n  panel.grid.major = element_line(colour = \"grey90\", linewidth = 0.5),\n  panel.grid.minor = element_line(colour = \"grey93\", linewidth = 0.5),\n  panel.border = element_rect(colour = \"black\", linewidth = 0.5, fill=NA, linetype = 1),\n  legend.title=element_blank(), \n  legend.text = element_text(color=\"black\", size=14, hjust=0),\n  legend.spacing.x = unit(.5, 'cm'), \n  legend.position = 'bottom',\n  strip.text = element_text(color=\"black\", face=\"plain\", size=16),\n  strip.background = element_rect(fill = \"white\"))\n\n\ndf &lt;- readxl::read_xlsx('.//data/cluster_health_afr_14mar2019.xlsx')\n\ndf %&gt;% glimpse()\n\nRows: 1,080\nColumns: 56\n$ variable &lt;chr&gt; \"DR_OthCommumDis\", \"DR_MaligNeoPl\", \"DR_CardioVasc\", \"DR_Dige…\n$ country  &lt;chr&gt; \"Algeria\", \"Algeria\", \"Algeria\", \"Algeria\", \"Algeria\", \"Alger…\n$ dim      &lt;chr&gt; \"Total\", \"Total\", \"Total\", \"Total\", \"Total\", \"Total\", \"Total\"…\n$ unit     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ scenario &lt;chr&gt; \"Base\", \"Base\", \"Base\", \"Base\", \"Base\", \"Base\", \"Base\", \"Base…\n$ `2015`   &lt;dbl&gt; 0.4450, 0.5120, 1.7640, 0.0630, 0.1530, 0.6220, 0.2760, 0.146…\n$ `2016`   &lt;dbl&gt; 0.4250, 0.5170, 1.8020, 0.0640, 0.1570, 0.6180, 0.2800, 0.146…\n$ `2017`   &lt;dbl&gt; 0.4100, 0.5210, 1.8300, 0.0640, 0.1610, 0.6170, 0.2790, 0.148…\n$ `2018`   &lt;dbl&gt; 0.3940, 0.5260, 1.8630, 0.0640, 0.1640, 0.6160, 0.2780, 0.149…\n$ `2019`   &lt;dbl&gt; 0.3770, 0.5310, 1.8940, 0.0650, 0.1680, 0.6140, 0.2780, 0.150…\n$ `2020`   &lt;dbl&gt; 0.3600, 0.5360, 1.9260, 0.0660, 0.1720, 0.6110, 0.2780, 0.151…\n$ `2021`   &lt;dbl&gt; 0.3430, 0.5420, 1.9530, 0.0670, 0.1760, 0.6080, 0.2780, 0.151…\n$ `2022`   &lt;dbl&gt; 0.3260, 0.5480, 1.9830, 0.0670, 0.1800, 0.6050, 0.2790, 0.152…\n$ `2023`   &lt;dbl&gt; 0.3110, 0.5550, 2.0140, 0.0680, 0.1850, 0.6040, 0.2790, 0.153…\n$ `2024`   &lt;dbl&gt; 0.2970, 0.5610, 2.0430, 0.0690, 0.1890, 0.6030, 0.2790, 0.153…\n$ `2025`   &lt;dbl&gt; 0.2840, 0.5680, 2.0720, 0.0700, 0.1940, 0.6020, 0.2800, 0.154…\n$ `2026`   &lt;dbl&gt; 0.2720, 0.5750, 2.1020, 0.0710, 0.1980, 0.6030, 0.2810, 0.154…\n$ `2027`   &lt;dbl&gt; 0.2610, 0.5820, 2.1330, 0.0720, 0.2030, 0.6030, 0.2830, 0.154…\n$ `2028`   &lt;dbl&gt; 0.2500, 0.5900, 2.1680, 0.0730, 0.2080, 0.6050, 0.2840, 0.155…\n$ `2029`   &lt;dbl&gt; 0.2400, 0.5980, 2.2020, 0.0740, 0.2140, 0.6070, 0.2860, 0.155…\n$ `2030`   &lt;dbl&gt; 0.2320, 0.6050, 2.2400, 0.0760, 0.2190, 0.6100, 0.2880, 0.156…\n$ `2031`   &lt;dbl&gt; 0.2230, 0.6130, 2.2760, 0.0770, 0.2250, 0.6140, 0.2910, 0.157…\n$ `2032`   &lt;dbl&gt; 0.2160, 0.6210, 2.3170, 0.0780, 0.2310, 0.6180, 0.2930, 0.157…\n$ `2033`   &lt;dbl&gt; 0.2080, 0.6290, 2.3580, 0.0800, 0.2380, 0.6230, 0.2950, 0.158…\n$ `2034`   &lt;dbl&gt; 0.2020, 0.6370, 2.4020, 0.0810, 0.2440, 0.6280, 0.2980, 0.159…\n$ `2035`   &lt;dbl&gt; 0.1960, 0.6440, 2.4440, 0.0830, 0.2510, 0.6330, 0.3000, 0.159…\n$ `2036`   &lt;dbl&gt; 0.1900, 0.6520, 2.4870, 0.0840, 0.2580, 0.6390, 0.3030, 0.160…\n$ `2037`   &lt;dbl&gt; 0.1840, 0.6600, 2.5320, 0.0860, 0.2650, 0.6450, 0.3050, 0.161…\n$ `2038`   &lt;dbl&gt; 0.1790, 0.6680, 2.5770, 0.0870, 0.2720, 0.6510, 0.3080, 0.162…\n$ `2039`   &lt;dbl&gt; 0.1740, 0.6750, 2.6220, 0.0890, 0.2790, 0.6570, 0.3100, 0.163…\n$ `2040`   &lt;dbl&gt; 0.1690, 0.6830, 2.6660, 0.0910, 0.2870, 0.6640, 0.3130, 0.165…\n$ `2041`   &lt;dbl&gt; 0.1650, 0.6910, 2.7110, 0.0930, 0.2950, 0.6700, 0.3150, 0.166…\n$ `2042`   &lt;dbl&gt; 0.1610, 0.6990, 2.7550, 0.0940, 0.3030, 0.6770, 0.3170, 0.167…\n$ `2043`   &lt;dbl&gt; 0.1580, 0.7070, 2.8010, 0.0960, 0.3110, 0.6850, 0.3190, 0.169…\n$ `2044`   &lt;dbl&gt; 0.1560, 0.7150, 2.8470, 0.0990, 0.3190, 0.6940, 0.3210, 0.171…\n$ `2045`   &lt;dbl&gt; 0.1540, 0.7220, 2.8920, 0.1010, 0.3270, 0.7020, 0.3230, 0.173…\n$ `2046`   &lt;dbl&gt; 0.1510, 0.7290, 2.9410, 0.1030, 0.3360, 0.7110, 0.3240, 0.175…\n$ `2047`   &lt;dbl&gt; 0.1490, 0.7360, 2.9880, 0.1050, 0.3450, 0.7190, 0.3250, 0.177…\n$ `2048`   &lt;dbl&gt; 0.1460, 0.7430, 3.0370, 0.1070, 0.3540, 0.7280, 0.3260, 0.179…\n$ `2049`   &lt;dbl&gt; 0.1430, 0.7500, 3.0860, 0.1100, 0.3630, 0.7370, 0.3280, 0.182…\n$ `2050`   &lt;dbl&gt; 0.1400, 0.7560, 3.1340, 0.1120, 0.3720, 0.7440, 0.3290, 0.184…\n$ `2051`   &lt;dbl&gt; 0.1360, 0.7630, 3.1780, 0.1150, 0.3810, 0.7510, 0.3300, 0.186…\n$ `2052`   &lt;dbl&gt; 0.1330, 0.7690, 3.2230, 0.1170, 0.3900, 0.7570, 0.3310, 0.188…\n$ `2053`   &lt;dbl&gt; 0.1300, 0.7750, 3.2690, 0.1190, 0.4000, 0.7640, 0.3320, 0.190…\n$ `2054`   &lt;dbl&gt; 0.1260, 0.7810, 3.3190, 0.1220, 0.4100, 0.7720, 0.3330, 0.193…\n$ `2055`   &lt;dbl&gt; 0.1230, 0.7870, 3.3690, 0.1250, 0.4200, 0.7790, 0.3330, 0.195…\n$ `2056`   &lt;dbl&gt; 0.1200, 0.7920, 3.4220, 0.1280, 0.4300, 0.7870, 0.3340, 0.198…\n$ `2057`   &lt;dbl&gt; 0.1180, 0.7970, 3.4830, 0.1300, 0.4410, 0.7970, 0.3340, 0.201…\n$ `2058`   &lt;dbl&gt; 0.1150, 0.8030, 3.5360, 0.1330, 0.4520, 0.8050, 0.3350, 0.204…\n$ `2059`   &lt;dbl&gt; 0.1120, 0.8080, 3.5950, 0.1370, 0.4640, 0.8130, 0.3360, 0.207…\n$ `2060`   &lt;dbl&gt; 0.1100, 0.8130, 3.6500, 0.1400, 0.4750, 0.8210, 0.3360, 0.210…\n$ `2061`   &lt;dbl&gt; 0.108, 0.817, 3.705, 0.143, 0.487, 0.829, 0.337, 0.213, 0.061…\n$ `2062`   &lt;dbl&gt; 0.105, 0.822, 3.755, 0.146, 0.498, 0.835, 0.338, 0.215, 0.061…\n$ `2063`   &lt;dbl&gt; 0.103, 0.826, 3.805, 0.149, 0.509, 0.842, 0.339, 0.218, 0.061…\n$ `2064`   &lt;dbl&gt; 0.101, 0.830, 3.852, 0.152, 0.520, 0.848, 0.340, 0.222, 0.061…\n$ `2065`   &lt;dbl&gt; 0.099, 0.833, 3.894, 0.155, 0.531, 0.854, 0.340, 0.224, 0.061…\n\n\n\n(df &lt;- df %&gt;% \n  #pivot data\n   gather(year, val, 6:56) %&gt;% \n  #filter on 2019 results\n   filter(year == '2019') %&gt;% \n  #select variable, country, and val\n   select(1:2, 7) %&gt;% \n  #group by variable and generate z-score for clustering\n   group_by(variable) %&gt;% \n   mutate(val = scale(val)) %&gt;% \n   ungroup() %&gt;% \n   spread(variable, val)) \n\n# A tibble: 54 × 21\n   country       CLPC DR_AIDS DR_CardioVasc DR_Diabetes DR_Diarrhea DR_Digestive\n   &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n 1 Algeria     1.63    -0.948         1.19       0.102      -1.42        -1.95  \n 2 Angola     -0.0927  -0.427        -0.951     -0.510       1.10         0.443 \n 3 Benin       0.609   -0.610        -0.427     -0.385       0.815        0.0179\n 4 Botswana   -0.846    1.68         -0.224      0.835      -0.601       -1.28  \n 5 Burkina F…  0.821   -0.709        -0.624     -0.471      -0.0198       0.307 \n 6 Burundi    -1.41    -0.636        -0.777     -0.436       2.16         0.597 \n 7 Cameroon    0.821    0.663        -0.513     -0.178      -0.117        0.346 \n 8 Cape Verde -0.494   -0.637         0.788      0.0205     -1.30        -1.62  \n 9 Central A… -1.29     0.902         0.166     -0.367       1.56         1.81  \n10 Chad       -0.887   -0.621        -0.466     -0.428       3.26         1.48  \n# ℹ 44 more rows\n# ℹ 14 more variables: DR_IntInj &lt;dbl&gt;, DR_Malaria &lt;dbl&gt;, DR_MaligNeoPl &lt;dbl&gt;,\n#   DR_MentalHealth &lt;dbl&gt;, DR_OthCommumDis &lt;dbl&gt;, DR_OtherNonComm &lt;dbl&gt;,\n#   DR_RespInfec &lt;dbl&gt;, DR_Respiratory &lt;dbl&gt;, DR_TrafficAcc &lt;dbl&gt;,\n#   DR_UnIntInj &lt;dbl&gt;, HLSMOKING &lt;dbl&gt;, HLSTUNT &lt;dbl&gt;, INFMOR &lt;dbl&gt;,\n#   MATMORTRATIO &lt;dbl&gt;"
  },
  {
    "objectID": "posts/2019-06-18-clustering-african-health-outcomes/index.html#analysis-of-results",
    "href": "posts/2019-06-18-clustering-african-health-outcomes/index.html#analysis-of-results",
    "title": "PART ONE: Cluster Analysis of African Health Outcomes",
    "section": "Analysis of results",
    "text": "Analysis of results\nFirst, I’ll use the fiz_cluster() function to visualize cluster membership. (There’s further clean-up needed, but I want to see the initial viz).\n\n(kmeans_viz &lt;- fviz_cluster(kmeans_sdg3, \n             data=df %&gt;% select(-1),\n             stand = FALSE, \n             ellipse.type = \"convex\",\n             palette = \"jco\") + \n  my.theme)\n\n\n\n\n\n\n\n\nWhat do each of these clusters mean? What do they represent?\n\ncluster_fill &lt;- c(\"#868686FF\", \"#CD534CFF\", \"#EFC000FF\", \"#0073C2FF\")\n\ndf_cluster_4_results %&gt;% \n  gather(variable, val, 4:23) %&gt;% \n  filter(variable %in% spot_vars) %&gt;% \n  mutate(variable = recode(variable,\n                           'DR_AIDS' = 'AIDS death rate',\n                           'DR_CardioVasc' = 'Cardiovascular death rate',\n                           'MATMORTRATIO' = 'Maternal mortality rate',\n                           'DR_Respiratory' = 'Respiratory mortality rate', \n                           'HLSTUNT' = 'Stunting rate',\n                           'DR_IntInj' = 'Intentional injury death rate', \n                           'DR_Malaria' = 'Malaria death rate', \n                           'DR_Diabetes' = 'Diabetes death rate'),\n         clust_name = case_when(.cluster == '1' ~ 'CDs',\n                                .cluster == '2' ~ 'NCDs',\n                                .cluster == '3' ~ 'NCDs & HIV',\n                                .cluster == '4' ~ 'Double Burden')) %&gt;% \n  ggplot(., \n         aes(x=.cluster,\n             y=val,\n             fill=.cluster)) + \n  geom_violin() + \n  geom_jitter(width = .2, height = .1) + \n  facet_wrap(~variable, \n             nrow = 2,\n             scales = 'free',\n             labeller = label_wrap_gen()) + \n  ggtitle('',\n          subtitle = 'Each dot represents an African country within its cluster') + \n  labs(y='z-score',\n       x='Cluster') + \n  my.theme + \n  scale_fill_manual(values = cluster_fill) + \n  theme(strip.text = element_text(size = 12),\n        strip.text.x = element_text(margin = margin(.25,0,.25,0, \"cm\")),\n        legend.position = 'none')\n\n\n\n\n\n\n\n\nCluster 1: Higher levels of non-communicable disease reflecting higher development.\nCluster 2: Highest burdens of HIV/AIDS, diabetes, respiratory illnesses, traffic fatalities, and deaths from intentional injuries.\nCluster 3: Countries in the middle of the “double burden” of disease, with elevated (but generally falling) burden of communicable disease and rising burdens from non-communicable disease.\nCluster 4: Communicable disease mortality characterizes these countries. Countries in this cluster are at the beginning of development towards the “double burden” of disease.\nSome quick clean-up to support putting labels on the cluster graphic.\n\n(df_label_help &lt;- df %&gt;% \n  select(1) %&gt;%\n  rownames_to_column())\n\n# A tibble: 54 × 2\n   rowname country     \n   &lt;chr&gt;   &lt;chr&gt;       \n 1 1       Algeria     \n 2 2       Angola      \n 3 3       Benin       \n 4 4       Botswana    \n 5 5       Burkina Faso\n 6 6       Burundi     \n 7 7       Cameroon    \n 8 8       Cape Verde  \n 9 9       Central AfR \n10 10      Chad        \n# ℹ 44 more rows\n\n\n\n\n   name          x           y       coord cluster\n1     1 -4.3024636  1.80865284 21.78241826       1\n2     2  2.5755214 -0.07889390  6.63953471       4\n3     3  1.0169684  0.33706615  1.14783841       3\n4     4 -2.3642511  0.63494494  5.99283814       2\n5     5  0.8993824  0.82947169  1.49691205       3\n6     6  3.5790154  0.12038452 12.82384342       4\n7     7  0.9569876 -1.10554744  2.13806044       4\n8     8 -3.1992280  1.56693482 12.69034466       1\n9     9  4.1259704 -2.22199890 21.96091056       4\n10   10  5.6425998 -2.51144500 38.14628795       4\n11   11  0.6317898  0.79935106  1.03812047       3\n12   12  2.8034932  0.29375838  7.94586811       4\n13   13  0.3687783  1.02798718  1.19275508       3\n14   14  1.2758298 -2.43850287  7.57403791       4\n15   15 -0.2122328 -0.08452750  0.05218765       3\n16   16 -4.8746473  0.56767475 24.08444092       1\n17   17  2.1326087 -1.89742082  8.14822560       4\n18   18  1.0316133  1.46454137  3.20910741       3\n19   19  0.8334748  1.56408985  3.14105736       3\n20   20 -0.8819849  0.08342655  0.78485739       3\n21   21  0.4273448  0.99698232  1.17659728       3\n22   22 -0.7456978  0.84322822  1.26709904       3\n23   23  1.0721493 -0.06478235  1.15370079       3\n24   24  1.9407232 -0.56190798  4.08214716       4\n25   25  0.6686306  3.08182329  9.94470168       3\n26   26 -1.6442519 -4.73840005 25.15599931       2\n27   27  0.8823869  1.08552443  1.95696991       3\n28   28 -5.0939159  1.05318693 27.05718209       1\n29   29 -0.1219820  1.81595847  3.31258478       3\n30   30  0.7539831  1.67684599  3.38030304       3\n31   31  0.9899307  0.48061503  1.21095368       3\n32   32  0.4174827  0.35810341  0.30252987       3\n33   33 -7.1835908 -2.57711364 58.24549129       1\n34   34 -4.8250325  1.68917653 26.13425564       1\n35   35  0.8549720  0.78819666  1.35223117       3\n36   36 -1.8082677 -0.69571408  3.75385013       2\n37   37  2.1517074  1.51364425  6.92096363       3\n38   38  3.2091357 -2.09075227 14.66979676       4\n39   39 -0.2361615  2.02429432  4.15353976       3\n40   40 -0.9941374  0.91320146  1.82224606       3\n41   41 -0.9138675  2.43145802  6.74714196       3\n42   42 -5.2103788 -3.34420231 38.33173673       1\n43   43  2.1218142 -2.41530504 10.33579390       4\n44   44  5.2056186 -0.93944297 27.98101823       4\n45   45 -3.6462041 -4.98956383 38.19055169       2\n46   46 -1.0108568 -0.38050415  1.16661488       3\n47   47  4.0455876 -0.62946960 16.76301062       4\n48   48 -0.6776526 -1.84331557  3.85702536       2\n49   49  0.3131814  1.70183621  2.99432904       3\n50   50  0.2815917  0.64157101  0.49090723       3\n51   51 -6.5797150 -0.47025448 43.51378831       1\n52   52  1.8420731  0.91715107  4.23439936       3\n53   53  1.3506020  1.25844087  3.40779929       3\n54   54  0.1235718 -0.29045781  0.09963573       3\n                         country\n1                        Algeria\n2                         Angola\n3                          Benin\n4                       Botswana\n5                   Burkina Faso\n6                        Burundi\n7                       Cameroon\n8                     Cape Verde\n9                    Central AfR\n10                          Chad\n11                       Comoros\n12 Congo, Democratic Republic of\n13            Congo, Republic of\n14                 Cote d'Ivoire\n15                      Djibouti\n16                         Egypt\n17                   Equa Guinea\n18                       Eritrea\n19                      Ethiopia\n20                         Gabon\n21                        Gambia\n22                         Ghana\n23                        Guinea\n24                    GuineaBiss\n25                         Kenya\n26                       Lesotho\n27                       Liberia\n28                         Libya\n29                    Madagascar\n30                        Malawi\n31                          Mali\n32                    Mauritania\n33                     Mauritius\n34                       Morocco\n35                    Mozambique\n36                       Namibia\n37                         Niger\n38                       Nigeria\n39                        Rwanda\n40         Sao Tome and Principe\n41                       Senegal\n42                    Seychelles\n43                     SierraLeo\n44                       Somalia\n45                  South Africa\n46                         Sudan\n47                   Sudan South\n48                     Swaziland\n49                      Tanzania\n50                          Togo\n51                       Tunisia\n52                        Uganda\n53                        Zambia\n54                      Zimbabwe\n\n\n\n\n   name          x           y       coord cluster\n1     1 -4.3024636  1.80865284 21.78241826       1\n2     2  2.5755214 -0.07889390  6.63953471       4\n3     3  1.0169684  0.33706615  1.14783841       3\n4     4 -2.3642511  0.63494494  5.99283814       2\n5     5  0.8993824  0.82947169  1.49691205       3\n6     6  3.5790154  0.12038452 12.82384342       4\n7     7  0.9569876 -1.10554744  2.13806044       4\n8     8 -3.1992280  1.56693482 12.69034466       1\n9     9  4.1259704 -2.22199890 21.96091056       4\n10   10  5.6425998 -2.51144500 38.14628795       4\n11   11  0.6317898  0.79935106  1.03812047       3\n12   12  2.8034932  0.29375838  7.94586811       4\n13   13  0.3687783  1.02798718  1.19275508       3\n14   14  1.2758298 -2.43850287  7.57403791       4\n15   15 -0.2122328 -0.08452750  0.05218765       3\n16   16 -4.8746473  0.56767475 24.08444092       1\n17   17  2.1326087 -1.89742082  8.14822560       4\n18   18  1.0316133  1.46454137  3.20910741       3\n19   19  0.8334748  1.56408985  3.14105736       3\n20   20 -0.8819849  0.08342655  0.78485739       3\n21   21  0.4273448  0.99698232  1.17659728       3\n22   22 -0.7456978  0.84322822  1.26709904       3\n23   23  1.0721493 -0.06478235  1.15370079       3\n24   24  1.9407232 -0.56190798  4.08214716       4\n25   25  0.6686306  3.08182329  9.94470168       3\n26   26 -1.6442519 -4.73840005 25.15599931       2\n27   27  0.8823869  1.08552443  1.95696991       3\n28   28 -5.0939159  1.05318693 27.05718209       1\n29   29 -0.1219820  1.81595847  3.31258478       3\n30   30  0.7539831  1.67684599  3.38030304       3\n31   31  0.9899307  0.48061503  1.21095368       3\n32   32  0.4174827  0.35810341  0.30252987       3\n33   33 -7.1835908 -2.57711364 58.24549129       1\n34   34 -4.8250325  1.68917653 26.13425564       1\n35   35  0.8549720  0.78819666  1.35223117       3\n36   36 -1.8082677 -0.69571408  3.75385013       2\n37   37  2.1517074  1.51364425  6.92096363       3\n38   38  3.2091357 -2.09075227 14.66979676       4\n39   39 -0.2361615  2.02429432  4.15353976       3\n40   40 -0.9941374  0.91320146  1.82224606       3\n41   41 -0.9138675  2.43145802  6.74714196       3\n42   42 -5.2103788 -3.34420231 38.33173673       1\n43   43  2.1218142 -2.41530504 10.33579390       4\n44   44  5.2056186 -0.93944297 27.98101823       4\n45   45 -3.6462041 -4.98956383 38.19055169       2\n46   46 -1.0108568 -0.38050415  1.16661488       3\n47   47  4.0455876 -0.62946960 16.76301062       4\n48   48 -0.6776526 -1.84331557  3.85702536       2\n49   49  0.3131814  1.70183621  2.99432904       3\n50   50  0.2815917  0.64157101  0.49090723       3\n51   51 -6.5797150 -0.47025448 43.51378831       1\n52   52  1.8420731  0.91715107  4.23439936       3\n53   53  1.3506020  1.25844087  3.40779929       3\n54   54  0.1235718 -0.29045781  0.09963573       3\n                         country    clust_name africa\n1                        Algeria          NCDs      1\n2                         Angola           CDs      1\n3                          Benin Double Burden      1\n4                       Botswana    NCDs & HIV      1\n5                   Burkina Faso Double Burden      1\n6                        Burundi           CDs      1\n7                       Cameroon           CDs      1\n8                     Cape Verde          NCDs      1\n9                    Central AfR           CDs      1\n10                          Chad           CDs      1\n11                       Comoros Double Burden      1\n12 Congo, Democratic Republic of           CDs      1\n13            Congo, Republic of Double Burden      1\n14                 Cote d'Ivoire           CDs      1\n15                      Djibouti Double Burden      1\n16                         Egypt          NCDs      1\n17                   Equa Guinea           CDs      1\n18                       Eritrea Double Burden      1\n19                      Ethiopia Double Burden      1\n20                         Gabon Double Burden      1\n21                        Gambia Double Burden      1\n22                         Ghana Double Burden      1\n23                        Guinea Double Burden      1\n24                    GuineaBiss           CDs      1\n25                         Kenya Double Burden      1\n26                       Lesotho    NCDs & HIV      1\n27                       Liberia Double Burden      1\n28                         Libya          NCDs      1\n29                    Madagascar Double Burden      1\n30                        Malawi Double Burden      1\n31                          Mali Double Burden      1\n32                    Mauritania Double Burden      1\n33                     Mauritius          NCDs      1\n34                       Morocco          NCDs      1\n35                    Mozambique Double Burden      1\n36                       Namibia    NCDs & HIV      1\n37                         Niger Double Burden      1\n38                       Nigeria           CDs      1\n39                        Rwanda Double Burden      1\n40         Sao Tome and Principe Double Burden      1\n41                       Senegal Double Burden      1\n42                    Seychelles          NCDs      1\n43                     SierraLeo           CDs      1\n44                       Somalia           CDs      1\n45                  South Africa    NCDs & HIV      1\n46                         Sudan Double Burden      1\n47                   Sudan South           CDs      1\n48                     Swaziland    NCDs & HIV      1\n49                      Tanzania Double Burden      1\n50                          Togo Double Burden      1\n51                       Tunisia          NCDs      1\n52                        Uganda Double Burden      1\n53                        Zambia Double Burden      1\n54                      Zimbabwe Double Burden      1\n\n\n\nkmeans_viz_data %&gt;% \n  ggplot(aes(x=x,\n             y=y,\n             color=clust_name,\n             shape=clust_name)) + \n  geom_point(size=3) + \n  ggrepel::geom_text_repel(data=. %&gt;% filter(country %in% spotlight),\n                           aes(label = country), force = 10, size=4) + \n  #ggtitle('K-means') + \n  labs(x=expression('' %&lt;-% '  Higher NCD burden, higher life expectancy    -    Higher CD burden, lower life expectancy  ' %-&gt;% ''),\n       y=expression('' %&lt;-% '  Higher burden from AIDS, respiratory and injury deaths')) + \n  scale_color_jco() + \n  my.theme"
  },
  {
    "objectID": "posts/2017-10-01-gapminder-nested-models/index.html",
    "href": "posts/2017-10-01-gapminder-nested-models/index.html",
    "title": "Analysis of Gapminder data using nested models in R",
    "section": "",
    "text": "Working on nesting models following the workflow from R for Data Science.\n\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\n\n\n#create year_since_1950\ngapminder &lt;- gapminder %&gt;% \n  mutate(year_since_1950 = year - 1950)\n#group by data that you want to produce multiple models by\n#then nest to create data column of remaining columns\nnest_gapminder &lt;- gapminder %&gt;% \n  group_by(continent, country) %&gt;% \n  nest()\n\n#create function for model that you want to build\n#df will be the only parametre\ncontinent_year_model &lt;- function(df) {\n  lm(lifeExp ~ year_since_1950, data = df)\n}\n\n#take nested df and map function to the data column\n#model will keep nested model statistics by country/year\nnest_gapminder &lt;- nest_gapminder %&gt;% \n  mutate(model = map(data, continent_year_model),\n         glance = map(model, broom::glance))\n\nglance_gapminder_model &lt;- nest_gapminder %&gt;% \n  unnest(glance) %&gt;% \n  arrange(desc(adj.r.squared))\n\n\nglance_gapminder_model %&gt;% \n  ggplot(.) + \n  geom_jitter(aes(x=continent,\n                 y=r.squared,\n                 color=continent)) + \n  ggtitle('Distribution of model fit by continent',\n          subtitle = 'Each dot is a country model') + \n  labs(x='Continent',\n       y='R-squared',\n       caption='LifeExp ~ year') + \n  my.theme\n\n\n\n\n\n\n\n\n\nglance_gapminder_model %&gt;% \n  ggplot(.) + \n  geom_density_ridges(aes(x=r.squared, \n                          y=continent,\n                          fill=continent)) + \n  ggtitle('Distribution of model fits by continent',\n          subtitle = 'Time does not explain variance in African life expectancy as strongly as others') + \n  labs(x='R-squared',\n       y='Continent',\n       caption='LifeExp ~ year') + \n  my.theme\n\nPicking joint bandwidth of 0.0392\n\n\n\n\n\n\n\n\n\n\n#which countries have the poor fits?\nbad_fit &lt;- glance_gapminder_model %&gt;% filter(r.squared &lt; 0.4)\n\ngapminder %&gt;% \n  semi_join(bad_fit, by = \"country\") %&gt;% \n  ggplot(.) + \n    geom_line(aes(x=year, \n                  y=lifeExp, \n                  color=country), linewidth=1.1) + \n  ggtitle('Countries in which time does not adequately explain life expectancy',\n          subtitle = 'Visualizing countries with model fits less than .4') + \n  labs(x='Year',\n       y='Life expectancy',\n       caption='LifeExp ~ year') + \n  my.theme\n\n\n\n\n\n\n\n\nThis demonstrates that:\n\nThe 10 countries with the poorest model fits are all in Africa.\n\nThe fit seems to be due to a dramatic decline in life expectancy that begins around 1990. This is the HIV/AIDS epidemic.\nFrom R for Data Science (http://r4ds.had.co.nz/many-models.html#making-tidy-data-with-broom):\n\nMaking tidy data with broom:\nThe broom package provides three general tools for turning models into tidy data frames:\n\nbroom::glance(model) returns a row for each model. Each column gives a model summary: either a measure of model quality, or complexity, or a combination of the two.\n\nbroom::tidy(model) returns a row for each coefficient in the model. Each column gives information about the estimate or its variability.\n\nbroom::augment(model, data) returns a row for each row in data, adding extra values like residuals, and influence statistics."
  },
  {
    "objectID": "workshops.html",
    "href": "workshops.html",
    "title": "Workshops",
    "section": "",
    "text": "PART TWO: Data Manipulation and Visualization Basics using R\n\n\n\nR\n\n\ntidyverse\n\n\nggplot\n\n\ndata-viz\n\n\ndomestic-politics\n\n\n\nThis skills workshop introduced R and the tidyverse to Master’s students at the University of Denver\n\n\n\nMickey Rafa\n\n\nMay 15, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPART ONE: Data Manipulation and Visualization Basics using R\n\n\n\nR\n\n\ntidyverse\n\n\nggplot\n\n\ndata-viz\n\n\ninternational-development\n\n\n\nThis skills workshop introduced R and the tidyverse to Master’s students at the University of Denver\n\n\n\nMickey Rafa\n\n\nMay 15, 2018\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "In progress"
  },
  {
    "objectID": "posts/2024-07-30-braintree-sql-questions/index.html",
    "href": "posts/2024-07-30-braintree-sql-questions/index.html",
    "title": "Braintree SQL challenge",
    "section": "",
    "text": "The BrainTree SQL coding challenge is known as a great challenge for data analysts looking to test their skills. In this project, I am putting my skills to the test, using Quarto and the DBI:: and RSQLite:: packages to run SQL queries on an in-memory database.\n\n\nRequired packages:\n\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RSQLite)\n\nAbout the dataset:\nHere is some text from the BrainTree challenge site:\n\nThis is an opportunity for you to show us your grasp of SQL which plays a key role in the day-to-day job that you’re applying for. All members of the Analytics Data team have taken this challenge and participated in its creation. If you feel that there are any questions that are either not fair or not clear, please do let us know; this is VERY important to us! A few important things to note before you get started:\n\n\n\nAll work should be done in SQL. Any variant is fine (e.g. MS SQL, Postgres, MySQL, etc.). If you normally use R, SAS, or other similar tools with SQL it’s important that you show that you can work in SQL by itself to produce the correct answers to this challenge.\nIf you are confused by a specific question, you can request clarification by replying to the message that this challenge was attached to. This is NOT intended for you to obtain technical help with solving the problems on this challenge or asking for hints; it should only be used for question clarification. This challenge is due back within 1 week (7 calendar days) of being sent to you.\nIf you cannot answer a question, please do your best, show your work, leave comments, and let us know your general thoughts.\nWe are interested in BOTH your answers and the work/code that you write to get them. Please leave plenty of comments for us to read when we review your work.\nThere are some blank/null values in this set. That’s how we found it and it reflects the nature of imperfect data. Please work with this and provide explanations of any issues or workarounds required to arrive at your answers.\nThere are no intentional gotchas, trick questions, or traps; the challenge is intended to demonstrate some of the typical day-to-day SQL skills that the job requires.\nSome of these questions may seem nonsensical and you may find yourself asking, “why would anyone want to know that?!” They are intended purely as a measure of your SQL skills and not as actual questions that we would expect to ask of this type of data set. Please take them with a grain of salt.\n\n\n\ncountries &lt;- read_csv('.//data/countries.csv')\ncontinent_map &lt;- read_csv('.//data/continent_map.csv')\ncontinents &lt;- read_csv('.//data/continents.csv')\nper_capita &lt;- read_csv('.//data/per_capita.csv')\n\n\n\n\nThe DBI:: package allows you to create an in-memory database to query against. The DBI project site is a great place to learn more about it. I’ll start by doing some initial setup and establishing the connection between the R dataframe and the SQL table name that I’ll query.\n\ncon &lt;- DBI::dbConnect(SQLite(), \":memory:\")\nDBI::dbWriteTable(conn = con, name = \"continent_map\", value = continent_map)\nDBI::dbWriteTable(conn = con, name = \"per_capita\", value = per_capita)\nDBI::dbWriteTable(conn = con, name = \"continents\", value = continents)\nDBI::dbWriteTable(conn = con, name = \"countries\", value = countries)"
  },
  {
    "objectID": "posts/2024-07-30-braintree-sql-questions/index.html#setup-and-data-preparation",
    "href": "posts/2024-07-30-braintree-sql-questions/index.html#setup-and-data-preparation",
    "title": "Braintree SQL challenge",
    "section": "",
    "text": "Required packages:\n\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RSQLite)\n\nAbout the dataset:\nHere is some text from the BrainTree challenge site:\n\nThis is an opportunity for you to show us your grasp of SQL which plays a key role in the day-to-day job that you’re applying for. All members of the Analytics Data team have taken this challenge and participated in its creation. If you feel that there are any questions that are either not fair or not clear, please do let us know; this is VERY important to us! A few important things to note before you get started:\n\n\n\nAll work should be done in SQL. Any variant is fine (e.g. MS SQL, Postgres, MySQL, etc.). If you normally use R, SAS, or other similar tools with SQL it’s important that you show that you can work in SQL by itself to produce the correct answers to this challenge.\nIf you are confused by a specific question, you can request clarification by replying to the message that this challenge was attached to. This is NOT intended for you to obtain technical help with solving the problems on this challenge or asking for hints; it should only be used for question clarification. This challenge is due back within 1 week (7 calendar days) of being sent to you.\nIf you cannot answer a question, please do your best, show your work, leave comments, and let us know your general thoughts.\nWe are interested in BOTH your answers and the work/code that you write to get them. Please leave plenty of comments for us to read when we review your work.\nThere are some blank/null values in this set. That’s how we found it and it reflects the nature of imperfect data. Please work with this and provide explanations of any issues or workarounds required to arrive at your answers.\nThere are no intentional gotchas, trick questions, or traps; the challenge is intended to demonstrate some of the typical day-to-day SQL skills that the job requires.\nSome of these questions may seem nonsensical and you may find yourself asking, “why would anyone want to know that?!” They are intended purely as a measure of your SQL skills and not as actual questions that we would expect to ask of this type of data set. Please take them with a grain of salt.\n\n\n\ncountries &lt;- read_csv('.//data/countries.csv')\ncontinent_map &lt;- read_csv('.//data/continent_map.csv')\ncontinents &lt;- read_csv('.//data/continents.csv')\nper_capita &lt;- read_csv('.//data/per_capita.csv')"
  },
  {
    "objectID": "posts/2024-07-30-braintree-sql-questions/index.html#setting-up-sql-to-execute",
    "href": "posts/2024-07-30-braintree-sql-questions/index.html#setting-up-sql-to-execute",
    "title": "Braintree SQL challenge",
    "section": "",
    "text": "The DBI:: package allows you to create an in-memory database to query against. The DBI project site is a great place to learn more about it. I’ll start by doing some initial setup and establishing the connection between the R dataframe and the SQL table name that I’ll query.\n\ncon &lt;- DBI::dbConnect(SQLite(), \":memory:\")\nDBI::dbWriteTable(conn = con, name = \"continent_map\", value = continent_map)\nDBI::dbWriteTable(conn = con, name = \"per_capita\", value = per_capita)\nDBI::dbWriteTable(conn = con, name = \"continents\", value = continents)\nDBI::dbWriteTable(conn = con, name = \"countries\", value = countries)"
  }
]
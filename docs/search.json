[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Portfolio",
    "section": "",
    "text": "Building beautiful tables with the gt:: package in R\n\n\n\nR\n\n\nweb-scraping\n\n\ngt\n\n\nsports\n\n\n\nThis post outlines how to quickly scrape and clean data from Wikipedia and build a beautiful table in R\n\n\n\nMickey Rafa\n\n\nJul 15, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mickey Rafa",
    "section": "",
    "text": "My name is Mickey, and welcome to my personal portfolio website! I’ll be adding a selection of data science and viz projects here that showcase the breadth of work that I’ve completed.\nLet’s connect! Feel free to reach out to me on LinkedIn or send me an email.\n🚧 This site is under construction 🚧\nEducation\n\nMS in Business Analytics | University of Denver\nMA in International Studies | University of Denver\nBA in Political Science | West Virginia University"
  },
  {
    "objectID": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html",
    "href": "posts/2024-07-15-wikipedia-international-mens-soccer/index.html",
    "title": "Building beautiful tables with the gt:: package in R",
    "section": "",
    "text": "In this project, I wanted to experiment with the gt:: package to create a beautiful table using R. This code will walk through scraping a table from Wikipedia of the top international goal scorers in men’s soccer history.\n\nSetup\nRequired packages:\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(scales)\nlibrary(ggtext)\nlibrary(htmltools)\nlibrary(sysfonts)\nlibrary(showtext)\nlibrary(rvest)\nlibrary(gt)\nlibrary(sysfonts)\nlibrary(showtext)\nlibrary(countrycode)\n\nData.world has a dataset that consists of country names and URLs associated with .svg images of their national flags, which I’d like to include within the table for extra style.\n\nflag_db &lt;- read.csv(\"https://query.data.world/s/cnheo22w5mwowz2tfxrbb3z2i3mzya?dws=00000\", header=TRUE, stringsAsFactors=FALSE) %&gt;% \n  #Convert country names into 3-letter country codes\n  mutate(Code = countrycode(sourcevar = Country, origin = \"country.name\", destination = \"iso3c\", warn = FALSE)) %&gt;% \n  select(Country, flag_URL = ImageURL)\n\n\n\nScrape Wikipedia Data\n\nurl_goals &lt;- 'https://en.wikipedia.org/wiki/List_of_men%27s_footballers_with_50_or_more_international_goals'\n\n\n(raw &lt;- url_goals %&gt;%\n  rvest::read_html() %&gt;%\n  rvest::html_nodes(xpath='//*[@id=\"mw-content-text\"]/div[1]/table[2]') %&gt;% \n  html_table() %&gt;% \n  .[[1]] %&gt;% \n  clean_names())\n\n# A tibble: 80 × 10\n    rank player      nation confederation goals caps  goalsper_match career_span\n   &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt;      \n 1     1 Cristiano … Portu… UEFA          130   212   0.61           2003–      \n 2     2 Lionel Mes… Argen… CONMEBOL      109   187   0.58           2005–      \n 3     3 Ali Daei    Iran   AFC           108[… 148[… 0.73           1993–2006  \n 4     4 Sunil Chhe… India  AFC           94    151[… 0.62           2005–2024  \n 5     5 Mokhtar Da… Malay… AFC           89    142   0.63           1972–1985  \n 6     6 Ali Mabkho… Unite… AFC           85    115   0.74           2009–      \n 7     6 Romelu Luk… Belgi… UEFA          85    119   0.71           2010–      \n 8     8 Ferenc Pus… Hunga… UEFA          84    89    0.94           1945–1962  \n 9     9 Robert Lew… Poland UEFA          83    152   0.55           2008–      \n10    10 Godfrey Ch… Zambia CAF           79    111   0.71           1968–1980  \n# ℹ 70 more rows\n# ℹ 2 more variables: date_of_50th_goal &lt;chr&gt;, ref &lt;chr&gt;\n\n\nFor data cleaning of this Wiki table, we need to: * Remove all footnotes within the table * Convert all chr columns to numeric values * Re-code one of the confederation values so that it’s clean for the by confederation table\n\n(raw &lt;- raw %&gt;% \n  #Remove extra spaces in nation to clean this column\n  mutate(nation = str_replace_all(str_trim(nation), \"\\\\s+\", \" \")) %&gt;%\n  mutate(nation = case_when(\n    str_detect(nation, \"^Hungary\\\\s+Spain$\") ~ \"Hungary\",\n    #re-coding this as United Kingdom to bring in flag\n    str_detect(nation, \"^England\\\\s+England\\\\s+amateurs$\") ~ \"United Kingdom\",\n    TRUE ~ nation\n  )) %&gt;%\n  mutate(confederation = case_when(\n    confederation == \"AFC / OFC[h]\" ~ \"AFC\",\n    TRUE ~ confederation)) %&gt;% \n  #remove footnotes and transform columns to numeric values\n  mutate_at(vars(player, career_span, goals, caps, goalsper_match), \n            ~ str_remove(., \"\\\\[.*\\\\]\")) %&gt;% \n  mutate_at(vars(goals, caps, goalsper_match), \n            as.numeric) %&gt;% \n  left_join(flag_db, by = c('nation' = 'Country')) %&gt;% \n  select(flag_URL, everything()))\n\n# A tibble: 80 × 11\n   flag_URL          rank player nation confederation goals  caps goalsper_match\n   &lt;chr&gt;            &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;          &lt;dbl&gt;\n 1 https://upload.…     1 Crist… Portu… UEFA            130   212           0.61\n 2 https://upload.…     2 Lione… Argen… CONMEBOL        109   187           0.58\n 3 https://upload.…     3 Ali D… Iran   AFC             108   148           0.73\n 4 https://upload.…     4 Sunil… India  AFC              94   151           0.62\n 5 https://upload.…     5 Mokht… Malay… AFC              89   142           0.63\n 6 https://upload.…     6 Ali M… Unite… AFC              85   115           0.74\n 7 https://upload.…     6 Romel… Belgi… UEFA             85   119           0.71\n 8 https://upload.…     8 Feren… Hunga… UEFA             84    89           0.94\n 9 https://upload.…     9 Rober… Poland UEFA             83   152           0.55\n10 https://upload.…    10 Godfr… Zambia CAF              79   111           0.71\n# ℹ 70 more rows\n# ℹ 3 more variables: career_span &lt;chr&gt;, date_of_50th_goal &lt;chr&gt;, ref &lt;chr&gt;\n\n\n\n\nData Prep\nNow that I have the data scraped and cleaned, I’m interested in making some tables using the ::gt() package. Tables are great for communicating summary information, so I’ll first build a graphic of the top 12 international goal scorers of all time.\n\ndf_top_scorers &lt;- raw %&gt;% \n  slice(1:12)\n\nThen, I’ll extract the min and max values from the table for conditional formatting of the table.\n\nmin_goals &lt;- df_top_scorers$goals %&gt;% min()\nmax_goals &lt;- df_top_scorers$goals %&gt;% max()\n\ngoals_palette &lt;- col_numeric(c(\"lightgreen\", \"darkgreen\"), \n                             domain = c(min_goals, max_goals), \n                             alpha = .75)\n\nFor the first table, I’ll put the columns and styling in place first. I’m going to build a table that includes the flag_url column – which is messy at first – and then I’ll use a function to render the flag graphics from those URLs. This blog post is excellent – it showed me how to do this step-by-step.\n\n(tbl_top_scorers &lt;- df_top_scorers %&gt;% \n  select(rank, player, career_span, flag_URL, nation, goals, caps, goalsper_match) %&gt;% \n  gt() %&gt;% \n  #rename columns\n  cols_label(rank = 'Rank',\n             player = 'Name',\n             career_span = 'Career Span',\n             nation = 'Country',\n             goals = 'Total Goals Scored',\n             caps = 'Matches',\n             goalsper_match = 'Goals per Match') %&gt;% \n  #add table title\n  tab_header(title = md(\"**Total Goals Scored in Men's International Soccer Matches**\")) %&gt;% \n  tab_source_note(source_note = \"Data from Wikipedia\") %&gt;% \n  #apply new style to all column headers\n  tab_style(\n    locations = cells_column_labels(columns = everything()),\n    style = list(\n      #thick border\n      cell_borders(sides = \"bottom\", weight = px(3)),\n      #make text bold\n      cell_text(weight = \"bold\")\n    )\n  ) %&gt;% \n  #apply different style to title\n  tab_style(locations = cells_title(groups = \"title\"),\n            style = list(\n              cell_text(weight = \"bold\", size = 24)\n            )) %&gt;% \n  data_color(columns = c(goals),\n             colors = goals_palette) %&gt;% \n  opt_all_caps() %&gt;% \n  opt_table_font(\n    font = list(\n      google_font(\"Chivo\"),\n      default_fonts()\n    )\n  ) %&gt;% \n  tab_options(\n    #remove border between column headers and title\n    column_labels.border.top.width = px(3),\n    column_labels.border.top.color = \"transparent\",\n    #remove border around the table\n    table.border.top.color = \"transparent\",\n    table.border.bottom.color = \"transparent\",\n    #adjust font sizes and alignment\n    source_notes.font.size = 12,\n    heading.align = \"left\"\n  ))\n\n\n\n\n\n\n\nTotal Goals Scored in Men’s International Soccer Matches\n\n\nRank\nName\nCareer Span\nflag_URL\nCountry\nTotal Goals Scored\nMatches\nGoals per Match\n\n\n\n\n1\nCristiano Ronaldo\n2003–\nhttps://upload.wikimedia.org/wikipedia/commons/5/5c/Flag_of_Portugal.svg\nPortugal\n130\n212\n0.61\n\n\n2\nLionel Messi\n2005–\nhttps://upload.wikimedia.org/wikipedia/commons/1/1a/Flag_of_Argentina.svg\nArgentina\n109\n187\n0.58\n\n\n3\nAli Daei\n1993–2006\nhttps://upload.wikimedia.org/wikipedia/commons/c/ca/Flag_of_Iran.svg\nIran\n108\n148\n0.73\n\n\n4\nSunil Chhetri\n2005–2024\nhttps://upload.wikimedia.org/wikipedia/en/4/41/Flag_of_India.svg\nIndia\n94\n151\n0.62\n\n\n5\nMokhtar Dahari\n1972–1985\nhttps://upload.wikimedia.org/wikipedia/commons/6/66/Flag_of_Malaysia.svg\nMalaysia\n89\n142\n0.63\n\n\n6\nAli Mabkhout\n2009–\nhttps://upload.wikimedia.org/wikipedia/commons/c/cb/Flag_of_the_United_Arab_Emirates.svg\nUnited Arab Emirates\n85\n115\n0.74\n\n\n6\nRomelu Lukaku\n2010–\nhttps://upload.wikimedia.org/wikipedia/commons/9/92/Flag_of_Belgium_%28civil%29.svg\nBelgium\n85\n119\n0.71\n\n\n8\nFerenc Puskás\n1945–1962\nhttps://upload.wikimedia.org/wikipedia/commons/c/c1/Flag_of_Hungary.svg\nHungary\n84\n89\n0.94\n\n\n9\nRobert Lewandowski\n2008–\nhttps://upload.wikimedia.org/wikipedia/en/1/12/Flag_of_Poland.svg\nPoland\n83\n152\n0.55\n\n\n10\nGodfrey Chitalu\n1968–1980\nhttps://upload.wikimedia.org/wikipedia/commons/0/06/Flag_of_Zambia.svg\nZambia\n79\n111\n0.71\n\n\n10\nNeymar\n2010–\nhttps://upload.wikimedia.org/wikipedia/en/0/05/Flag_of_Brazil.svg\nBrazil\n79\n128\n0.62\n\n\n12\nHussein Saeed\n1977–1990\nhttps://upload.wikimedia.org/wikipedia/commons/f/f6/Flag_of_Iraq.svg\nIraq\n78\n137\n0.57\n\n\n\nData from Wikipedia\n\n\n\n\n\n\n\n\n\n(tbl_top_scorers &lt;- tbl_top_scorers %&gt;% \n    text_transform(\n    #Apply a function to a column\n    locations = cells_body(c(flag_URL)),\n    fn = function(x) {\n      #Return an image of set dimensions\n      web_image(\n        url = x,\n        height = 12\n      )\n    }\n  ) %&gt;% \n  #Hide column header flag_URL and reduce width\n  cols_width(c(flag_URL) ~ px(30)) %&gt;% \n  cols_label(flag_URL = \"\"))\n\n\n\n\n\n\n\nTotal Goals Scored in Men’s International Soccer Matches\n\n\nRank\nName\nCareer Span\n\nCountry\nTotal Goals Scored\nMatches\nGoals per Match\n\n\n\n\n1\nCristiano Ronaldo\n2003–\n\nPortugal\n130\n212\n0.61\n\n\n2\nLionel Messi\n2005–\n\nArgentina\n109\n187\n0.58\n\n\n3\nAli Daei\n1993–2006\n\nIran\n108\n148\n0.73\n\n\n4\nSunil Chhetri\n2005–2024\n\nIndia\n94\n151\n0.62\n\n\n5\nMokhtar Dahari\n1972–1985\n\nMalaysia\n89\n142\n0.63\n\n\n6\nAli Mabkhout\n2009–\n\nUnited Arab Emirates\n85\n115\n0.74\n\n\n6\nRomelu Lukaku\n2010–\n\nBelgium\n85\n119\n0.71\n\n\n8\nFerenc Puskás\n1945–1962\n\nHungary\n84\n89\n0.94\n\n\n9\nRobert Lewandowski\n2008–\n\nPoland\n83\n152\n0.55\n\n\n10\nGodfrey Chitalu\n1968–1980\n\nZambia\n79\n111\n0.71\n\n\n10\nNeymar\n2010–\n\nBrazil\n79\n128\n0.62\n\n\n12\nHussein Saeed\n1977–1990\n\nIraq\n78\n137\n0.57\n\n\n\nData from Wikipedia\n\n\n\n\n\n\n\n\n\n\nTop scorers by confederation or continent\nNext, I’d like to see who are the top-5 all-time goal scorers by confederation.\n\n(df_scorers_by_confed &lt;- raw %&gt;% \n  filter(!is.na(goals)) %&gt;% \n  group_by(confederation) %&gt;% \n  slice(1:5))\n\n# A tibble: 25 × 11\n# Groups:   confederation [5]\n   flag_URL          rank player nation confederation goals  caps goalsper_match\n   &lt;chr&gt;            &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt;          &lt;dbl&gt;\n 1 https://upload.…     3 Ali D… Iran   AFC             108   148           0.73\n 2 https://upload.…     4 Sunil… India  AFC              94   151           0.62\n 3 https://upload.…     5 Mokht… Malay… AFC              89   142           0.63\n 4 https://upload.…     6 Ali M… Unite… AFC              85   115           0.74\n 5 https://upload.…    12 Husse… Iraq   AFC              78   137           0.57\n 6 https://upload.…    10 Godfr… Zambia CAF              79   111           0.71\n 7 https://upload.…    19 Kinna… Malawi CAF              71   117           0.61\n 8 https://upload.…    25 Hossa… Egypt  CAF              69   177           0.39\n 9 https://upload.…    31 Didie… Ivory… CAF              65   105           0.62\n10 https://upload.…    45 Moham… Egypt  CAF              57   100           0.57\n# ℹ 15 more rows\n# ℹ 3 more variables: career_span &lt;chr&gt;, date_of_50th_goal &lt;chr&gt;, ref &lt;chr&gt;\n\n\n\n#re-run the min_goals and max_goals functions\nmin_goals &lt;- df_scorers_by_confed$goals %&gt;% min(na.rm = TRUE)\nmax_goals &lt;- df_scorers_by_confed$goals %&gt;% max(na.rm = TRUE)\n\ngoals_palette &lt;- col_numeric(c(\"lightgreen\", \"darkgreen\"), \n                             domain = c(min_goals, max_goals), \n                             alpha = .75)\n\n\n(tbl_scorers_by_confed &lt;- df_scorers_by_confed %&gt;% \n  select(rank, player, career_span, flag_URL, nation, goals, caps, goalsper_match, confederation) %&gt;% \n  gt(groupname_col = \"confederation\") %&gt;% \n    cols_label(rank = 'Global Rank',\n             player = 'Name',\n             career_span = 'Career Span',\n             nation = 'Country',\n             goals = 'Total Goals Scored',\n             caps = 'Matches',\n             goalsper_match = 'Goals per Match') %&gt;% \n  #add table title\n  tab_header(title = md(\"**Total Goals Scored in Men's International Soccer Matches**\")) %&gt;% \n  tab_source_note(source_note = \"Data from Wikipedia\") %&gt;% \n  #apply new style to all column headers\n  tab_style(\n    locations = cells_column_labels(columns = everything()),\n    style = list(\n      #thick border\n      cell_borders(sides = \"bottom\", weight = px(3)),\n      #make text bold\n      cell_text(weight = \"bold\")\n    )\n  ) %&gt;% \n  #apply different style to title\n  tab_style(locations = cells_title(groups = \"title\"),\n            style = list(\n              cell_text(weight = \"bold\", size = 24)\n            )) %&gt;% \n  data_color(columns = c(goals),\n             colors = goals_palette) %&gt;% \n  opt_all_caps() %&gt;% \n  opt_table_font(\n    font = list(\n      google_font(\"Chivo\"),\n      default_fonts()\n    )\n  ) %&gt;% \n  tab_options(\n    #remove border between column headers and title\n    column_labels.border.top.width = px(3),\n    column_labels.border.top.color = \"transparent\",\n    #remove border around the table\n    table.border.top.color = \"transparent\",\n    table.border.bottom.color = \"transparent\",\n    #adjust font sizes and alignment\n    source_notes.font.size = 12,\n    heading.align = \"left\"\n  ) %&gt;% \n  text_transform(\n    #Apply a function to a column\n    locations = cells_body(c(flag_URL)),\n    fn = function(x) {\n      #Return an image of set dimensions\n      web_image(\n        url = x,\n        height = 12\n      )\n    }\n  ) %&gt;% \n  #Hide column header flag_URL and reduce width\n  cols_width(c(flag_URL) ~ px(30)) %&gt;% \n  cols_label(flag_URL = \"\"))\n\n\n\n\n\n\n\nTotal Goals Scored in Men’s International Soccer Matches\n\n\nGlobal Rank\nName\nCareer Span\n\nCountry\nTotal Goals Scored\nMatches\nGoals per Match\n\n\n\n\nAFC\n\n\n3\nAli Daei\n1993–2006\n\nIran\n108\n148\n0.73\n\n\n4\nSunil Chhetri\n2005–2024\n\nIndia\n94\n151\n0.62\n\n\n5\nMokhtar Dahari\n1972–1985\n\nMalaysia\n89\n142\n0.63\n\n\n6\nAli Mabkhout\n2009–\n\nUnited Arab Emirates\n85\n115\n0.74\n\n\n12\nHussein Saeed\n1977–1990\n\nIraq\n78\n137\n0.57\n\n\nCAF\n\n\n10\nGodfrey Chitalu\n1968–1980\n\nZambia\n79\n111\n0.71\n\n\n19\nKinnah Phiri\n1973–1981\n\nMalawi\n71\n117\n0.61\n\n\n25\nHossam Hassan\n1985–2006\n\nEgypt\n69\n177\n0.39\n\n\n31\nDidier Drogba\n2002–2014\n\nIvory Coast\n65\n105\n0.62\n\n\n45\nMohamed Salah\n2011–\n\nEgypt\n57\n100\n0.57\n\n\nCONCACAF\n\n\n22\nStern John\n1995–2012\n\nTrinidad and Tobago\n70\n115\n0.61\n\n\n27\nCarlos Ruiz\n1998–2016\n\nGuatemala\n68\n133\n0.51\n\n\n45\nCarlos Pavón\n1993–2010\n\nHonduras\n57\n101\n0.56\n\n\n45\nClint Dempsey\n2004–2018\n\nUnited States\n57\n141\n0.40\n\n\n45\nLandon Donovan\n2000–2014\n\nUnited States\n57\n157\n0.36\n\n\nCONMEBOL\n\n\n2\nLionel Messi\n2005–\n\nArgentina\n109\n187\n0.58\n\n\n10\nNeymar\n2010–\n\nBrazil\n79\n128\n0.62\n\n\n13\nPelé\n1957–1971\n\nBrazil\n77\n92\n0.84\n\n\n25\nLuis Suárez\n2007–\n\nUruguay\n69\n142\n0.49\n\n\n35\nRonaldo\n1994–2011\n\nBrazil\n62\n98\n0.63\n\n\nUEFA\n\n\n1\nCristiano Ronaldo\n2003–\n\nPortugal\n130\n212\n0.61\n\n\n6\nRomelu Lukaku\n2010–\n\nBelgium\n85\n119\n0.71\n\n\n8\nFerenc Puskás\n1945–1962\n\nHungary\n84\n89\n0.94\n\n\n9\nRobert Lewandowski\n2008–\n\nPoland\n83\n152\n0.55\n\n\n14\nVivian Woodward\n1903–1914\n\nUnited Kingdom\n75\n53\n1.42\n\n\n\nData from Wikipedia"
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse-part2/index.html",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse-part2/index.html",
    "title": "PART TWO: Data Manipulation and Visualization Basics using R",
    "section": "",
    "text": "This is a continuation of the “Data Manipulation and Visualization Basics using R” workshop, which was originally delivered in 2018. This post assumes that you know the content from Part 1."
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse-part2/index.html#footnotes",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse-part2/index.html#footnotes",
    "title": "PART TWO: Data Manipulation and Visualization Basics using R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.tidyverse.org/packages/↩︎\nhttps://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html↩︎\nhttp://scdb.wustl.edu/data.php↩︎"
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "",
    "text": "This workshop session will help you familiarize with two of R’s most widely used packages, dplyr and ggplot2. These packages are part of what is called the tidyverse, which is a collection of packages that are designed to work together in R to simplify and data manipulation, discovery, visualization, analysis, and more.1\n\n\n\n\nEach tile is a package that makes up the “tidyverse”\n\n\n\ndplyr is designed to standardize the data management and manipulation process in R. dplyr has a small set of functions that help users navigate the most common challenges of data manipulation.2 Generally speaking, these include restructuring, filtering, grouping, and summarizing your data, as well as creating new variables for your analysis.\nggplot2 is a package for visualizing data. In this lesson, we will learn the building blocks for creating beautiful visualizations. We will learn how to produce histograms, scatter plots, and line plots, and we will visualize ungrouped and grouped data.\ndplyr and ggplot2 are packages that supply a grammar for data manipulation and data visualization, respectively. This workshop will only scratch the surface of what is possible, but learning the fundamentals of these packages can empower you to do a ton of exciting things in R."
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#workshop-format-and-key-terms",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#workshop-format-and-key-terms",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "Workshop format and key terms",
    "text": "Workshop format and key terms\nTwo quick notes on the format of this workshop:\n\nThere are links to additional resources in the end notes of this document. I have personally used most of these resources to build my skills in R, so I hope you will find them useful, too.\n\nThroughout the workshop, there will be exercises to complete on your own or with your table mates. Do you best to complete these based on what you’ve learned. If you get stuck, you can click the “Code” button on the right to show the code that I would use to answer the question. Use that to test yourself and figure out why it works.\n\nThere are a few key terms that we’ll use throughout this session.\n\n\n\n\n\n\n\nTerm\nDefinition\n\n\n\n\nFunctions\nYou give R an input, it generates an output. A give-away that you’re working with a function is parentheses.\n\n\nArguments\nFunctions take arguments as their input. If you’re ever unsure of which arguments that a function takes, you can type args(“function name”), ?(“function name”), or help(“function name”).\n\n\nPackages\nA collection of code, functions, documentation, and occasionally data, created and curated by users of the R community.\n\n\nWorking directory\nThis is the location on your computer where all files relevant to your project are saved. Any files that are imported to or exported from your analysis should be here. Think of this as your project’s home base.\n\n\nObject\nR is an object-oriented programming language, meaning that you can assign meaning to a user-defined string that you can then manipulate or visualize. In R, you can assign objects with the “&lt;-” assignment operator. It can be a single value, list of values, a full data set, a function, etc. In this session, the primary object that we’ll use is the gapminder dataset."
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#setting-up-your-r-project-environment",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#setting-up-your-r-project-environment",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "Setting up your R Project environment",
    "text": "Setting up your R Project environment\nTo get started, we need to set up our new project environment, with the following steps:\n\nOpen R Studio, and go to File –&gt; New Project.\n\n\n\n\n 2. Select New Directory.\n\n\n\n 3. Select New Project.\n\n\n\n 4. Type in a name for your project under “Directory name”. Choose the location where you want this R Project to live on your computer. Select Create Project.\n\n\n\n These steps have established a directory on your computer where your R project lives. This is a very good practice to keep when you are starting a new analysis. You will keep all related files in this project folder, and R will know that this is your working directory (where all files relevant to your project are saved).\n\nFinally, go to File –&gt; New File –&gt; R Notebook. R notebook files are an excellent way to perform an analysis, because they allow for R code and documentation to work side-by-side. This enables you to tell a story that moves alongside your quantitative analysis, and it can be output in all kinds of formats, including Word documents, .pdfs, and .html files.\n\n\n\n\n We could do a full session on R projects and notebooks, but this should be sufficient to get you started."
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#distinct",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#distinct",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "distinct()",
    "text": "distinct()\nTo begin our anlaysis, let’s look at the years that are available in the gapminder dataset. There are many ways to do this, but I’ll use the distinct() function from dplyr.\nCreate a new code chunk (Ctrl + Alt + I), and type gapminder %&gt;% distinct(year). Then, execute the code chunk (with the green play button in the upper righthand corner of the chunk).\n\ngapminder %&gt;% \n  distinct(year)\n\n# A tibble: 12 × 1\n    year\n   &lt;int&gt;\n 1  1952\n 2  1957\n 3  1962\n 4  1967\n 5  1972\n 6  1977\n 7  1982\n 8  1987\n 9  1992\n10  1997\n11  2002\n12  2007\n\n\nThis shows us that we have data that are in five-year increments from 1952 to 2007.\nBefore we move on, let’s take a closer look at the code above, because it uses a style that we will be fluent in by the end of this session. This code uses “piping” (the %&gt;%), which is a coding style that makes code more readable and easier to troubleshoot.3 The “pipe” (%&gt;%) tells R to take the object to the left of the pipe and feed it to the first argument in the code following the pipe. The code above can be read as:\n\nTake the gapminder dataframe and feed it into the distinct() function, THEN\n\nReturn the distinct or unique values in the year column\n\nWhen reading your code, you can think of the pipe operator (%&gt;%) as “THEN”. To use the above example, take the gapminder dataframe, THEN return the distinct values in the year column.\nLet’s look at the distinct continents in the gapminder dataset. In your code chunk, relace distinct(year) with distinct(continent). Then, with your cursor on the same line as the code, use the keyboard shortcut for running a block of code (Ctrl + Enter).\n\ngapminder %&gt;% \n  distinct(continent)\n\n# A tibble: 5 × 1\n  continent\n  &lt;fct&gt;    \n1 Asia     \n2 Europe   \n3 Africa   \n4 Americas \n5 Oceania  \n\n\nThis is how the code looks without piping. Not too difficult (yet).\n\ndistinct(gapminder, continent)\n\nThis simple example does not convey the full value of piping, but that will be clear by the end of the session."
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#filter",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#filter",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "filter()",
    "text": "filter()\n\n\n\nThe filter() function allows you to subset your data by values of the variables in your dataset.\nWe’re going to use piping a lot in this session, so let’s get comfortable with it. Try using the pipe operator keyboard shortcut (Ctrl + Shift + M) with your code from this point forward.\nLet’s filter the gapminder dataframe to look at only the values in the year 2007.\n\ngapminder %&gt;% \n  filter(year == 2007)\n\n# A tibble: 142 × 6\n   country     continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       2007    43.8  31889923      975.\n 2 Albania     Europe     2007    76.4   3600523     5937.\n 3 Algeria     Africa     2007    72.3  33333216     6223.\n 4 Angola      Africa     2007    42.7  12420476     4797.\n 5 Argentina   Americas   2007    75.3  40301927    12779.\n 6 Australia   Oceania    2007    81.2  20434176    34435.\n 7 Austria     Europe     2007    79.8   8199783    36126.\n 8 Bahrain     Asia       2007    75.6    708573    29796.\n 9 Bangladesh  Asia       2007    64.1 150448339     1391.\n10 Belgium     Europe     2007    79.4  10392226    33693.\n# ℹ 132 more rows\n\n\nThis returns the 142 records (or rows) that are in the year 2007.\nWhat’s the double equal sign (“==”) mean? This is a boolean equal, meaning that it is evaluating whether the equation returns a TRUE or FALSE. The above code can be read as “filter, return rows in which the variable year equals 2007”. All rows that would return a TRUE for “year equals 2007” are displayed.\nYou can also use the filter() command on multiple conditions, too. Just separate the conditions with a comma. The code below takes the gapminder dataframe, and filters the data in which the country is South Africa and the year is 2007.\n\ngapminder %&gt;% \n  filter(country == 'South Africa',\n         year == 2007)\n\n# A tibble: 1 × 6\n  country      continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 South Africa Africa     2007    49.3 43997828     9270.\n\n\nThis shows that the dataset has only one occurrence of South Africa in 2007. Note that in dplyr, separating arguments with a comma allows you to combine multiple logical expressions. How would you read the above code aloud?\nOne thing to keep in mind – your data object remains unchanged, unless you assign the filter() to a new object. To save the above code as a new object, you need to assign it to a new named object, such as:\n\n\nsa_2007 &lt;- gapminder %&gt;% filter(country == ‘South Africa’, year == 2007)"
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#arrange",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#arrange",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "arrange()",
    "text": "arrange()\nThe arrange() function sorts your data – a very common thing to do in an exploratory data analysis. Let’s arrange the gapminder data by life expectancy (the variable is called lifeExp).\n\ngapminder %&gt;% \n  arrange(lifeExp)\n\n# A tibble: 1,704 × 6\n   country      continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;        &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Rwanda       Africa     1992    23.6 7290203      737.\n 2 Afghanistan  Asia       1952    28.8 8425333      779.\n 3 Gambia       Africa     1952    30    284320      485.\n 4 Angola       Africa     1952    30.0 4232095     3521.\n 5 Sierra Leone Africa     1952    30.3 2143249      880.\n 6 Afghanistan  Asia       1957    30.3 9240934      821.\n 7 Cambodia     Asia       1977    31.2 6978607      525.\n 8 Mozambique   Africa     1952    31.3 6446316      469.\n 9 Sierra Leone Africa     1957    31.6 2295678     1004.\n10 Burkina Faso Africa     1952    32.0 4469979      543.\n# ℹ 1,694 more rows\n\n\nThis shows us that Rwanda in 1992 is the lowest life expectancy in the dataset. By default, the arrange() function sorts your data in ascending order. What if we want to sort the data by the largest GDP per capita (variable is gdpPercap) in the dataset?\n\ngapminder %&gt;% \n  arrange(-gdpPercap)\n\n# A tibble: 1,704 × 6\n   country   continent  year lifeExp     pop gdpPercap\n   &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n 1 Kuwait    Asia       1957    58.0  212846   113523.\n 2 Kuwait    Asia       1972    67.7  841934   109348.\n 3 Kuwait    Asia       1952    55.6  160000   108382.\n 4 Kuwait    Asia       1962    60.5  358266    95458.\n 5 Kuwait    Asia       1967    64.6  575003    80895.\n 6 Kuwait    Asia       1977    69.3 1140357    59265.\n 7 Norway    Europe     2007    80.2 4627926    49357.\n 8 Kuwait    Asia       2007    77.6 2505559    47307.\n 9 Singapore Asia       2007    80.0 4553009    47143.\n10 Norway    Europe     2002    79.0 4535591    44684.\n# ℹ 1,694 more rows\n\n#you could also do...\n#gapminder %&gt;% \n#  arrange(desc(gdpPercap))\n\n#or if you wanted to return the top X GDP per capita records\n#you could use the top_n() function from dplyr\n#gapminder %&gt;%\n#  arrange(-gdpPercap) %&gt;% \n#  top_n(15, gdpPercap)\n\n\nExercises:\n\nYou can also arrange by multiple variables with the arrange() function. Let’s say that you want to arrange the gapminder data by year and by life expectancy. Try using gapminder %&gt;% arrange(year, lifeExp). What do you see?\n\n\n\ngapminder %&gt;% \n  arrange(year, lifeExp)\n\n\nLet’s put the filter() and arrange() functions together. I’d like to see the life expectancy of all Asian countries from the year 2000 to the most recent year, sorted in ascending order. How might we do that?\n\n\n\ngapminder %&gt;% \n  filter(year &gt;= 2000,\n         continent == 'Asia') %&gt;% \n  arrange(lifeExp)\n\n\nWhen you are combining multiple functions, the power and clarity of piping becomes more obvious. This is what the previous code would look like without piping.\n\n\n\narrange(filter(gapminder, year &gt;= 2000, continent == ‘Asia’), lifeExp)\n\n\nWho would like to try to read this?\n\n\nWithout piping, you need to write this code inside-out! Does anyone actually find this easier?!"
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#mutate",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#mutate",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "mutate()",
    "text": "mutate()\n\n\n\nIn data analysis, it’s common to want to create or derive new variables from your original dataset. This is done with the dplyr::mutate() function. For example, you might want to create a variable that is the distance in time from the beginning of the dataset. This is a typical derived variable used in regression modeling.\nFor these new variables, let’s save this as a new data object.\n\ngapminder &lt;- gapminder %&gt;% \n  mutate(time_dist = year - 1952)\n\nprint(gapminder)\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap time_dist\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.         0\n 2 Afghanistan Asia       1957    30.3  9240934      821.         5\n 3 Afghanistan Asia       1962    32.0 10267083      853.        10\n 4 Afghanistan Asia       1967    34.0 11537966      836.        15\n 5 Afghanistan Asia       1972    36.1 13079460      740.        20\n 6 Afghanistan Asia       1977    38.4 14880372      786.        25\n 7 Afghanistan Asia       1982    39.9 12881816      978.        30\n 8 Afghanistan Asia       1987    40.8 13867957      852.        35\n 9 Afghanistan Asia       1992    41.7 16317921      649.        40\n10 Afghanistan Asia       1997    41.8 22227415      635.        45\n# ℹ 1,694 more rows\n\n\n\nExercises:\n\nUse dplyr::mutate() to create two other variables – GDP and population (in millions). Note that just like the filter() function, which allows you to have multiple conditions, you can also create multiple new variables by using a comma within mutate().\n\n\ngapminder &lt;- gapminder %&gt;% \n  mutate(gdp = gdpPercap * pop,\n         pop = pop/1000000)\n\n\nWhat are the countries with the largest total GDP in 2007?\n\n\ngapminder %&gt;% \n  filter(year == 2007) %&gt;% \n  arrange(desc(gdp))"
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#summarise",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#summarise",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "summarise()",
    "text": "summarise()\nIn your own anlayses, you’ve probably calculated summary stats for variables. Earlier, we used summary(gapminder) to get an overview of the gapminder dataset, based on some preset functions. summarise() can produce the same summary statistics as summary(), but you have total control over the output (it can do some neat things with grouped data, too, which you will see later). Think of summarise() as useful when you want to condense many rows of data down into a smaller number of rows with summary information.\n\n\n\nThe summarise() function follows the same syntax as mutate(), which is used for creating or deriving new variables, too. The difference is that summarise() is creating a new grouped variable with an aggregate function. Using the gapminder dataset as an example, what is the mean life expectancy from the dataset?\n\ngapminder %&gt;% \n  summarise(meanlifeExp = mean(lifeExp))\n\n# A tibble: 1 × 1\n  meanlifeExp\n        &lt;dbl&gt;\n1        59.5\n\n\nThis code is returning the average life expectancy for all countries and years in the dataset.\n\nExercise:\n\nWhat happens if you use mutate() instead of summarise() to calculate the average life expectancy for the data? Why is that different from using summarise()?\n\n\ngapminder %&gt;% \n  mutate(meanlifeExp = mean(lifeExp))\n\n\nThis may be useful for your research question, but it is far more likely that you’ll want to summarise a variable like lifeExp by a grouping variable. For instance, what is the average life expectancy from this dataset by year? Anytime you want to summarise a variable “BY” another variable, dplyr::group_by() comes in handy.\n\ngapminder %&gt;% \n  group_by(year) %&gt;% \n  summarise(meanlifeExp = mean(lifeExp))\n\n# A tibble: 12 × 2\n    year meanlifeExp\n   &lt;int&gt;       &lt;dbl&gt;\n 1  1952        49.1\n 2  1957        51.5\n 3  1962        53.6\n 4  1967        55.7\n 5  1972        57.6\n 6  1977        59.6\n 7  1982        61.5\n 8  1987        63.2\n 9  1992        64.2\n10  1997        65.0\n11  2002        65.7\n12  2007        67.0\n\n\nThe above code groups the gapminder dataset by the year variable and computes the average life expectancy per year. This shows the gradual advancement in global average life expectancy over time. Pretty neat!\nThe gapminder dataset begs the question: how has the average life expectancy changed over time and across continents? Said another way, how has average life expectancy changed BY year and BY continent? BY is a hint that you want to group your data to answer your question. Just like previous functions that we’ve learned (such as filter() and mutate()), you can group your data by multiple conditions with comma.\n\ngapminder %&gt;% \n  group_by(year, continent) %&gt;% \n  summarise(meanlifeExp = mean(lifeExp))\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 60 × 3\n# Groups:   year [12]\n    year continent meanlifeExp\n   &lt;int&gt; &lt;fct&gt;           &lt;dbl&gt;\n 1  1952 Africa           39.1\n 2  1952 Americas         53.3\n 3  1952 Asia             46.3\n 4  1952 Europe           64.4\n 5  1952 Oceania          69.3\n 6  1957 Africa           41.3\n 7  1957 Americas         56.0\n 8  1957 Asia             49.3\n 9  1957 Europe           66.7\n10  1957 Oceania          70.3\n# ℹ 50 more rows\n\n\nWith this code, we’re able to see some strong variability in average life expectancy by continent. This is worth exploring more closely.\n\nExercises:\nI’d like to create a new grouped summary dataframe with the gapminder dataset. Group gapminder by year and continent, and generate the following summary calculations:\n\nThe total population (sum())\n\nThe mean life expectancy (mean())\nThe mean GDP per capita (mean())\n\nThe count of countries in the dataset in each continent/year pair (n())\n\nSave this to a new object called gapminder_by_year_continent.\n\ngapminder_by_year_continent &lt;- gapminder %&gt;% \n  group_by(year, continent) %&gt;% \n  summarise(totalPop = sum(pop), \n            meanlifeExp = mean(lifeExp),\n            meanGdpPercap = mean(gdpPercap),\n            count_countries = n())\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\nNow, answer the following questions:\n\nWhich continent had the lowest mean life expectancy in 1982?\n\n\ngapminder_by_year_continent %&gt;% \n  filter(year == 1982) %&gt;% \n  arrange(meanlifeExp)\n\n\nHow many countries in Oceania are in the dataset in 2007?\n\n\ngapminder_by_year_continent %&gt;% \n  filter(year == 2007,\n         continent == 'Oceania')\n\n\nWhat was Africa’s mean GDP per capita value in 1987?\n\n\ngapminder_by_year_continent %&gt;% \n  filter(year == 1987,\n         continent == 'Africa')\n\n\nWhat is the difference between summary() and summarise(), and when would you use them?\n\n\nThere’s so much that you can do with the dplyr verbs working together. group_by() is often combined with summarise(), but you can also use it with mutate(). For instance, you could group the gapminder dataset by year and produce within year rankings for life expectancy.\n\ngapminder %&gt;% \n  group_by(year) %&gt;% \n  mutate(lifeExp_rank = rank(desc(lifeExp))) %&gt;% \n  arrange(year, lifeExp_rank)\n\n# A tibble: 1,704 × 9\n# Groups:   year [12]\n   country        continent  year lifeExp    pop gdpPercap time_dist         gdp\n   &lt;fct&gt;          &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Norway         Europe     1952    72.7  3.33     10095.         0     3.36e10\n 2 Iceland        Europe     1952    72.5  0.148     7268.         0     1.08e 9\n 3 Netherlands    Europe     1952    72.1 10.4       8942.         0     9.28e10\n 4 Sweden         Europe     1952    71.9  7.12      8528.         0     6.08e10\n 5 Denmark        Europe     1952    70.8  4.33      9692.         0     4.20e10\n 6 Switzerland    Europe     1952    69.6  4.82     14734.         0     7.09e10\n 7 New Zealand    Oceania    1952    69.4  1.99     10557.         0     2.11e10\n 8 United Kingdom Europe     1952    69.2 50.4       9980.         0     5.03e11\n 9 Australia      Oceania    1952    69.1  8.69     10040.         0     8.73e10\n10 Canada         Americas   1952    68.8 14.8      11367.         0     1.68e11\n# ℹ 1,694 more rows\n# ℹ 1 more variable: lifeExp_rank &lt;dbl&gt;"
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#histograms",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#histograms",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "Histograms",
    "text": "Histograms\nLet’s begin with histograms:\n\nFirst, using the piping that we learned previously, filter the gapminder data to only include the 2007 rows.\n\nThen, let’s start defining the ggplot2 elements (data, aesthetics, geoms). Click on the “Code” box below to walk through an example.\n\n\ngapminder %&gt;%                           #DATA\n  filter(year == 2007) %&gt;%              #DATA\n  ggplot(aes(x=lifeExp)) +              #AESTHETICS\n  geom_histogram()                      #GEOM\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nLet’s examine the code before we unpack the graphic:\n\nYou’ll recall from the dplyr functions that we’ve learned so far that piping is an effective way to write code that flows between functions. First, we piped the gapminder data to filter(), then we piped that filtered dataframe to ggplot().\n\nWithin ggplot’s functions (ggplot() and geom_histogram()) we always use a plus sign. Think of ggplot as a canvas where the graphic is built by the addition of elements.\n\nThen, we defined the aesthetics (aes()), or what we wanted to graph. In a histogram, you are simply visualizing the distribution of one variable, so you only need to tell ggplot which variable to visualize (within x=).\n\nFinally, we added the geom to the aesthetic, which tells ggplot the type of graphic that we wanted to create (geom_histogram()).\n\nWe’ll get more practice with ggplot’s three elements – data, aesthetics, and geoms – as we go."
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#scatter-plots",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#scatter-plots",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "Scatter plots",
    "text": "Scatter plots\nWhat might explain the variation in life expectancy across countries (think variables from the Gapminder dataset)?\nScatter plots show the relationship between two variables. Let’s create a viz of the relationship between GDP per capita and life expectancy in 2007. Using the previous histogram code as our starting point, we would need to change two things:\n\nSince scatter plots visualize two variables, we need to add a y=gdpPercap to our aesthetic.\n\nInstead of using geom_histogram(), we will use geom_point() for a scatter plot.\n\n\ngapminder %&gt;%                           #DATA\n  filter(year == 2007) %&gt;%              #DATA\n  ggplot(aes(x=gdpPercap,               #AESTHETICS\n                 y=lifeExp)) +          #AESTHETICS\n  geom_point()                          #GEOM\n\n\n\n\n\n\n\n\nThe graphic shows some interesting behavior:\n\nMany countries are clustered below $10,000 per capita, but the range of average life expectancy is quite dramatic.\nThere is a saturating behavior in the data, meaning that at a certain average life expectancy (about 75 and up), income does not seem to have a strong relationship with life expectancy outcomes.\n\nThere appears to be a strong logarithmic relationship between these variables, meaning that the x-axis has a scale that increases in orders of magnitude (1,000 - 10,000 - 100,000).\n\nThe above graphic is very interesting. However, the gapminder dataset has additional information that could be put to use to extract more value from this viz. Let’s see what this looks like when you color each point by the continent. To do this, add color=continent to the aesthetic.\n\ngapminder %&gt;%                         #DATA\n  filter(year == 2007) %&gt;%            #DATA\n  ggplot(aes(x=gdpPercap,             #AESTHETIC\n             y=lifeExp,               #AESTHETIC    \n             color=continent)) +      #AESTHETIC\n  geom_point()                        #GEOM\n\n\n\n\n\n\n\n\nThis illustrates that many of the poorest performing countries are located in Africa.\n\nExercises:\n\nSet color=\"blue\" in the previous code. What do you see? Why do you think that is happening?\n\n\ngapminder %&gt;%                         #DATA\n  filter(year == 2007) %&gt;%            #DATA\n  ggplot(aes(x=gdpPercap,             #AESTHETIC\n             y=lifeExp,               #AESTHETIC\n             color=\"blue\")) +         #AESTHETIC    \n  geom_point()                        #GEOM\n\n\nThere are dozens of ways that you can customize ggplot2 visualizations. With enough practice, you can have total control of the visualizations that you create. Let’s start with two very common and useful customizations:\n\nPutting the x-axis on a logarithmic scale, and\n\nChanging the axis labels.\n\nTo transform the x-axis to a logarithmic scale, simply add scale_x_log10() to the previous visualization’s code. This will compress the x-axis and show a more linear relationship than the previous graphic.\n\ngapminder %&gt;%                             #DATA\n  filter(year == 2007) %&gt;%                #DATA\n  ggplot(aes(x=gdpPercap,                 #AESTHETIC\n                 y=lifeExp,               #AESTHETIC\n                 color=continent)) +      #AESTHETIC\n  geom_point() +                          #GEOM\n  scale_x_log10()                         #CUSTOMIZING ELEMENT\n\n\n\n\n\n\n\n\nThe labs() command in ggplot allows users to take control of the axis labels.\n\ngapminder %&gt;%                             #DATA\n  filter(year == 2007) %&gt;%                #DATA\n  ggplot(aes(x=gdpPercap,                 #AESTHETIC\n             y=lifeExp,                   #AESTHETIC\n             color=continent)) +          #AESTHETIC\n  geom_point() +                          #GEOM\n  scale_x_log10() +                       #CUSTOMIZING ELEMENT\n  labs(x='GDP per capita (logged)',       #CUSTOMIZING ELEMENT\n       y='Average life expectancy')       #CUSTOMIZING ELEMENT\n\n\n\n\n\n\n\n\n\nExercise:\n\nCreate another scatterplot with another variable combination from the gapminder dataset."
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#line-plots",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#line-plots",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "Line plots",
    "text": "Line plots\nLine plots are typically used to visualize the behavior of a variable over some component of time. Let’s go back to the gapminder_by_year_continent dataframe that we created earlier. This is a dataframe with summary stats by continent and year. We’ll use this data to create a line graph showing the average life expectancy by continent over time.\n\nExercises:\n\nWe have the data element already (gapminder_by_year_continent). What are the other two ggplot elements that we need to create a graphic?\n\nWhat would be our x= and y= arguments in the aesthetic?\n\n\ngapminder_by_year_continent %&gt;% \n  ggplot(aes(x=year,\n             y=meanlifeExp,\n             group=continent,\n             color=continent)) + \n  geom_line() + \n  ggtitle('Life expectancy by continent over time',\n          subtitle = 'Gapminder dataset') + \n  labs(x='Year',\n       y='Average life expectancy')\n\n\nThis plot shows us very clearly the gap between Africa and all other continents in life expectancy over time.\n\nExercises:\n\nPlot another one of the summarised variables from the gapminder_by_year_continent dataframe over time.\n\nUsing the gapminder dataframe, filter() the data on a country of your choice, and visualize a line plot over time (any variable you’d like).\n\n\nex_country &lt;- c('Zambia', 'China', 'Argentina', 'Bulgaria')\n\ngapminder %&gt;% \n  filter(country %in% ex_country) %&gt;% \n  ggplot(aes(x=year,\n             y=lifeExp,\n             color=country)) + \n  ggtitle('Average life expectancy at birth, select countries',\n          subtitle = '1957-2007') + \n  labs(x='Year',\n       y='Life expectancy at birth (years)',\n       caption='Gapminder dataset',\n       color='') + \n  geom_line() + \n  theme(legend.position = 'top')"
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#extended-use-of-ggplot2",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#extended-use-of-ggplot2",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "Extended use of ggplot2",
    "text": "Extended use of ggplot2\nThere are many, many ways that you can customize or expand your visualization repertoire by understanding the three basic elements of ggplot graphics. Here is a look at two other extensions (you can just follow along):\n\nThe ggthemes package allows for replicating the visualization themes of some major publications, including The Economist, The Wall Street Journal, and FiveThirtyEight.\n\n\n#install.packages(\"ggthemes\")\nlibrary(ggthemes)\n\n\nYou can also plot multiple geoms on the same graphic, which can be very useful in highlighting a story from your data.\n\nWhat if you wanted to show a story of the improvement of life expectancy over time? You might want to fit a linear regression model to your scatter plot. The code below demonstrates how this might be done, using the visualization theme from The Economist.\n\ngapminder %&gt;% \n  mutate(generation=ifelse(year &lt; 1970, '1950s-60s',\n                    ifelse(year &gt;= 1970 & year &lt; 1990, '1970s-80s', '1990s-2000s'))) %&gt;% \n  ggplot(aes(x=gdpPercap,\n                 y=lifeExp,\n                 color=generation)) + \n  geom_point() + \n  scale_x_log10() + \n  geom_smooth(method = \"lm\", se=FALSE) + \n  ggtitle('Relationship between GDP per capita, average life expectancy, and time') + \n  labs(x='GDP per capita (logged)',\n       y='Average life expectancy',\n       color='',\n       caption='Gapminder dataset') + \n  theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#footnotes",
    "href": "workshops/2018-05-15-korbel-skills-tidyverse/index.html#footnotes",
    "title": "PART ONE: Data Manipulation and Visualization Basics using R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.tidyverse.org/packages/↩︎\nhttps://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html↩︎\nFor an extremely in-depth article on pipe operators, including where they came from and why they are so useful, see here: https://www.datacamp.com/community/tutorials/pipe-r-tutorial↩︎\nThis is a useful reference for learning about all of the geom options in ggplot. This might look overwhelming, but it is something that you pick up more as you move into more exotic visualization types. (http://ggplot2.tidyverse.org/reference/#section-layer-geoms)↩︎\nhttps://www.r-bloggers.com/how-to-learn-r-2/↩︎\nhttps://www.coursera.org/specializations/jhu-data-science↩︎\nhttp://www.swirlstats.com/↩︎\nhttps://www.rstudio.com/resources/cheatsheets/↩︎\nhttp://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html↩︎"
  },
  {
    "objectID": "workshops.html",
    "href": "workshops.html",
    "title": "Workshops",
    "section": "",
    "text": "PART TWO: Data Manipulation and Visualization Basics using R\n\n\n\nR\n\n\ntidyverse\n\n\nggplot\n\n\ndata-viz\n\n\ndomestic-politics\n\n\n\nThis skills workshop introduced R and the tidyverse to Master’s students at the University of Denver\n\n\n\nMickey Rafa\n\n\nMay 15, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPART ONE: Data Manipulation and Visualization Basics using R\n\n\n\nR\n\n\ntidyverse\n\n\nggplot\n\n\ndata-viz\n\n\ninternational-development\n\n\n\nThis skills workshop introduced R and the tidyverse to Master’s students at the University of Denver\n\n\n\nMickey Rafa\n\n\nMay 15, 2018\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "In progress"
  }
]
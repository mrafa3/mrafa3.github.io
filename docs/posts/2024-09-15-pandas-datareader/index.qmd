---
title: "Using Python to fetch data from the Federal Reserve and World Bank"
description: "A look at what the American Community Survey tells us about trends in remote work"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 09-15-2024
categories: [R, tidyverse, tidycensus, mapping, api] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
code-annotations: hover
format: ipynb
# image: plot_denver_child_insured_2022.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
editor: 
  markdown: 
    wrap: 72
---

# Introduction

The `pandas-datareader` package is a powerful tool for easily accessing financial and economic data through various APIs. In this post, we'll explore how to use it to fetch data from FRED (Federal Reserve Economic Data), the World Bank, and Yahoo Finance for S&P500 data.

First, install the packages:

## Setup

```{python packages, include=TRUE}
import pandas as pd
from matplotlib import pyplot as plt
import pandas_datareader as pdr
from datetime import datetime
```

# Fetching Data from FRED

Let's fetch the US GDP data from FRED:

```{python gdp_data, include=TRUE}
gdp_data = pdr.get_data_fred('GDP', start='2000-01-01', end=datetime.now())
print(gdp_data.head())
```

```{python}
start = datetime(2016, 1, 1)
end = datetime.now()

nasdaq_data = pdr.DataReader('NASDAQ100', 'fred', start, end)

sap_data = pdr.DataReader('SP500', 'fred', start, end)
print(nasdaq_data)
```

# Accessing World Bank Data

Now, let's get the population data for the United States from the World Bank:

```{python}
from pandas_datareader import wb
```

```{python}
start = datetime(2005, 1, 1)
end = datetime(2008, 1, 1)
indicator_id = 'NY.GDP.PCAP.KD'

gdp_per_capita = wb.download(indicator=indicator_id, start=start, end=end, country=['US', 'CA', 'MX'])

print(gdp_per_capita)
```

With just a few lines of code, we've accessed data two popular public APIs -- the U.S. Federal Reserve and the World Bank. The pandas-datareader package simplifies the process of fetching data, which makes it a great package to get familiar with.

# Plotting with plotnine

Because I'm quite comfortable with R's ggplot syntax, I'll demonstrate how the plotnine package can visualize your Python data.

```{python}
from plotnine import ggplot, aes, geom_line, theme_minimal, labs
```

```{python}
# Fetch Colorado unemployment rate data
colorado_unemployment = pdr.get_data_fred('COUR', start='2016-01-01', end=datetime.now())

# Reset index to make date a column
colorado_unemployment = colorado_unemployment.reset_index()

print(colorado_unemployment)
```

```{python}
# Create the plot
(ggplot(colorado_unemployment, aes(x='DATE', y='COUR'))
 + geom_line()
 + theme_minimal()
 + labs(title='Colorado Unemployment Rate',
        x='Date',
        y='Unemployment Rate (%)')
)
```

This code snippet does the following:

We fetch the Colorado unemployment rate data using the FRED series ID 'COUR'.
We reset the index to make the date a regular column for plotting.
Using plotnine (Python's implementation of ggplot2), we create a line plot of the unemployment rate over time.
We add a minimal theme and appropriate labels to our plot.

The resulting plot will show the trend of Colorado's unemployment rate from 2016 to the present day. This visualization can help identify patterns, seasonal variations, and the impact of major economic events on Colorado's job market.

Plotnine's syntax, similar to R's ggplot2, allows for easy customization and layering of plot elements. You can further enhance this plot by adding vertical lines for recession periods, changing color schemes, or adding annotations for significant events.

```{python}
cpi = pdr.get_data_fred('CPIAUCSL', start=datetime(2016, 1, 1), end=datetime.now()).reset_index()
print(cpi)
```

```{python}
# Create the plot
(ggplot(cpi, aes(x='DATE', y='CPIAUCSL'))
 + geom_line()
 + theme_minimal()
 + labs(title='Consumer Price Index (CPI)',
        x='Date',
        y='CPI')
)
```


# Conclusion

In this post on Pandas DataReader, I demonstrated:




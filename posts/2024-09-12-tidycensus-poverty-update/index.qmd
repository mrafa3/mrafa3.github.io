---
title: "Part Two: Wrangling Census data for longitudinal analysis of child poverty"
description: "This post shows how to fetch many years of data simply, unlocking longitudinal analysis of Census data"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 09-12-2024
categories: [R, data-viz, tidyverse, tidycensus, api, purrr] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
# image: co_county_pov_2022.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
code-annotations: hover
editor: 
  markdown: 
    wrap: 72
---

# Introduction

In a [previous tidycensus post](), I showed how to fetch data and do some basic, longitudinal analysis of U.S. Census data. 




## Setup

```{r libraries, include=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidycensus)
library(scales) # <1>
library(gt) # <2>
library(glue) # <3>
library(ggforce) # Using this package to create the comet effect in the comet plots with the geom_link() function

# census_api_key('INSERT KEY HERE', install = TRUE) # <4>
```

1. Loading the `scales::` package to transform ggplot scales simply (some people choose to explicitly define `scales::` in their code rather than loading the library).
2. The `gt::` library provides functionality for creating ggplot-esque tables.
3. The `glue::` package allows for simple addition of HTML to ggplot graphics.
4. The first time that you're working with the `tidycensus::` package, you need to request an API key at https://api.census.gov/data/key_signup.html. The `install=` argument will install your personal key to the .Renviron file, and you won't need to use the `census_api_key()` function again.  

```{r my.theme, include=TRUE, echo=FALSE}
my.theme <- theme(
  plot.title = ggtext::element_textbox_simple(family="Palatino", face="bold", size=15, hjust = .5),
  plot.subtitle = ggtext::element_textbox_simple(family="Palatino", size=12),
  plot.caption = ggtext::element_textbox_simple(family="Palatino"),
  axis.title = element_text(family="Palatino", face="bold", size=10), 
  axis.text = element_text(family="Palatino", size=10), 
  axis.ticks = element_blank(), 
  panel.background = element_blank(),
  panel.grid = element_line(color="#444444", linewidth = .01),
  # panel.grid.major.x = element_line(color = 'gray96'),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(), 
  legend.title=element_blank(), 
  legend.position = 'top',
  plot.background = element_rect(fill = 'floralwhite', color = "floralwhite"))
```

# Data

For this analysis, I'm interested in looking at the most recent
state-level child poverty data available from the U.S. Census Bureau, and I want to construct a longitudinal sense of the change in child poverty. 

First, let's revisit the different American Community Survey products -- **ACS-1** and **ACS-5**.

*What's the difference between these, and how do you choose which survey product to use for your purposes?*


| Feature                    | ACS 1-Year Estimates                                 | ACS 5-Year Estimates                               |
|----------------------------|-----------------------------------------------------|---------------------------------------------------|
| Data Collection Period      | 12 months                                           | 60 months                                         |
| Population Coverage         | Areas with 65,000 or more people                    | All geographic areas, including those with fewer than 65,000 people |
| Sample Size                 | Smallest                                            | Largest                                           |
| Reliability                 | Less reliable due to smaller sample size            | More reliable due to larger sample size            |
| Currency                    | Most current data                                   | Less current, includes older data                 |
| Release Frequency           | Annually                                            | Annually                                          |
| Best Used For               | Analyzing large populations, when currency is more important than precision | Analyzing small populations, where precision is more important than currency |
| Example Usage               | Examining recent economic changes                   | Examining trends in small geographic areas or small population subgroups |


In Part One, I wanted to fetch the most recent, reliable estimates for state-level and county-level poverty data, which led me to use the 5-year estimates. For this post, I am interested in constructing a longitudinal dataset of the most recent year-on-year estimates. If I again used the 5-year estimates, I would be comparing results across years that include much of the same sampling period (as shown in the graphic below).

![The ACS-5 product has a 60-month sampling period for each annual release, meaning that 48 months of sampling overlap with each annual ACS-5 release[^1]](acs_sample_explained.png)

[^1]: Screenshot taken from the ACS 2018 Handbook, found here: https://www.census.gov/content/dam/Census/library/publications/2018/acs/acs_general_handbook_2018_ch03.pdf.

For this analysis, I'll use the **1-year estimates** from the American Community Survey, which will limit my ability to analyze changes in geographic units with populations greater than 65,000.

As I did in Part One, I'll use the following series from the American Community Survey:

-   *B01001_003*: Estimate!!Total:!!Male:!!Under 5 years (all racial
    groups)
-   *B01001_027*: Estimate!!Total:!!Female:!!Under 5 years (all racial
    groups)
-   *B17001_004*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Male:!!Under 5 years
-   *B17001_018*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Female:!!Under 5 years

## Fetching from the `tidycensus::` API

```{r year_acs, include=TRUE}
years <- seq(2015, 2023) %>% # <5>
  setdiff(2020) # <6>
```

5. Data for the ACS-1 product begins in 2005, and the 2023 ACS-1 estimates were released in September 2024.
6. Due to the COVID-19 pandemic, the U.S. Census Bureau does not have standard ACS products available for 2020. The `setdiff()` function removes 2020 from the vector.

Next, I'll define a function to fetch the ACS data for each year in the vector.

```{r fetch_poverty_data, include=TRUE}
fetch_acs_data <- function(year) {
  get_acs(geography = "state", 
          survey = 'acs1',
          variables = c(male_u5_pop = 'B01001_003', 
                        female_u5_pop = 'B01001_027', 
                        male_u5_poverty = 'B17001_004', 
                        female_u5_poverty = 'B17001_018'),
          year = year,
          output = 'wide') %>% 
    mutate(year = year,
           total_u5_popE = male_u5_popE + female_u5_popE, # <7>
           total_u5_povertyE = male_u5_povertyE + female_u5_povertyE, # <7>
           perc_u5_poverty = total_u5_povertyE / total_u5_popE) # <7>
}

fetch_acs_data_county <- function(year) {
  get_acs(geography = "county", 
          survey = 'acs1',
          variables = c(male_u5_pop = 'B01001_003', 
                        female_u5_pop = 'B01001_027', 
                        male_u5_poverty = 'B17001_004', 
                        female_u5_poverty = 'B17001_018'),
          year = year,
          geometry = TRUE,
          output = 'wide') %>% 
    mutate(year = year,
           total_u5_popE = male_u5_popE + female_u5_popE,
           total_u5_povertyE = male_u5_povertyE + female_u5_povertyE,
           perc_u5_poverty = total_u5_povertyE / total_u5_popE,
           county = str_remove(NAME, " County.*"), # <8>
           state = str_extract(NAME, "[\\w\\s]+$") %>% str_trim()) %>% # <8>
    select(county, state, everything())
}
```

7. Creating some fields to combine gender-based poverty estimates and calculate a percent of the child population measure
8. Creating a `state` and `county` fields to manipulate the dataframe and visualize with more simplicity

Then, I'll use `purrr::map_df()` to apply each year to the `fetch_acs_data()` function that I created, which will result in a single dataframe of all years.

```{r combined_acs_data, include=TRUE, message=FALSE}
combined_acs_data <- map_df(years, fetch_acs_data)
```

```{r}
combined_acs_data_county <- map_df(years, fetch_acs_data_county)
```

# Analysis 

```{r create_tminus1, include=TRUE}
combined_acs_data <- combined_acs_data %>% 
  group_by(NAME) %>% 
  # group_by(NAME, county) %>% 
  mutate(perc_u5_poverty_tminus_1 = lag(perc_u5_poverty),
         perc_u5_poverty_tminus_3 = lag(perc_u5_poverty, 3),
         perc_u5_poverty_tminus_5 = lag(perc_u5_poverty, 5),
         perc_u5_poverty_tminus_10 = lag(perc_u5_poverty, 10),
         perc_diff_YoY = perc_u5_poverty - perc_u5_poverty_tminus_1,
         perc_diff_tminus_3 = perc_u5_poverty - perc_u5_poverty_tminus_3,
         perc_diff_tminus_5 = perc_u5_poverty - perc_u5_poverty_tminus_5,
         perc_diff_tminus_10 = perc_u5_poverty - perc_u5_poverty_tminus_10) %>% 
  arrange(NAME)
```

```{r}
combined_acs_data_2023 <- combined_acs_data %>% filter(year == 2023)
```


```{r}
combined_acs_data %>% 
  filter(year >= 2022) %>% 
  ggplot(aes(x=perc_u5_poverty_tminus_5,
             y=perc_u5_poverty)) +   
  geom_point(aes(color = if_else(year == 2023, '2023', 'Other year'),
                 alpha = if_else(year == 2023, '2023', 'Other year'))) +
  scale_color_manual(values = c('2023' = 'steelblue1',
                               'Other year' = 'gray10')) + 
  scale_alpha_manual(values = c('2023' = 1,
                               'Other year' = .2)) + 
  scale_y_continuous(limits = c(0, .7)) + 
  scale_x_continuous(limits = c(0, .7)) + 
  theme_minimal() + 
  theme(legend.position = 'none')
```

```{r fig.width=8, fig.height=14}
combined_acs_data %>% 
  filter(year == 2023,
         NAME != 'Puerto Rico') %>% 
  arrange(-perc_diff_YoY) %>% 
  mutate(state = factor(NAME, levels = NAME),
         direction = case_when(
           perc_diff_YoY > .005 ~ "Increase",
           perc_diff_YoY < -.005 ~ "Decrease",
           TRUE ~ "No Change")) %>% 
         # direction = ifelse(perc_diff_YoY >= 0, "Increase", "Decrease")) %>% 
  ggplot(aes(y = reorder(NAME, -perc_diff_YoY),
             color=direction)) +
  geom_link(aes(x = perc_u5_poverty_tminus_1, y = fct_reorder(NAME, perc_diff_YoY), 
              xend = perc_u5_poverty, yend = fct_reorder(NAME, perc_diff_YoY), 
              size = stat(index))) + 
  geom_point(data = . %>% filter(perc_diff_YoY > 0),
             aes(perc_u5_poverty, y = fct_reorder(NAME, perc_diff_YoY)),
             shape = 21, fill = "white", size = 4)  +
  geom_point(data = . %>% filter(perc_diff_YoY < 0),
             aes(perc_u5_poverty, y = fct_reorder(NAME, perc_diff_YoY)),
             shape = 21, fill = "white", size = 4) +
  annotate(geom = 'label', x = .27, y = 49, label = "Poverty rate increased\n in 2023", 
         family = "Palatino", color = "#E64B35FF", fontface = 'bold', 
         fill = "floralwhite",
         label.size = 0, size = 4) + 
  annotate(geom = 'label', x = .27, y = 36.5, label = "Poverty rate unchanged\n in 2023", 
         family = "Palatino", color = "#444444", fontface = 'bold', 
         fill = "floralwhite",
         label.size = 0, size = 4) + 
  annotate(geom = 'label', x = .27, y = 24.5, label = "Poverty rate decreased\nin 2023", 
         family = "Palatino", color = "#00A087FF", fontface = 'bold', 
         fill = "floralwhite",
         label.size = 0, size = 4) + 
  scale_color_manual(values = c("Decrease" = "#00A087FF", "Increase" = "#E64B35FF", "No Change" = "#444444")) +
  scale_size(range = c(.01, 4)) +
  labs(title='Change in State-level Child Poverty from 2022 to 2023',
       subtitle = 'Size of the color band corresponds to the magnitude of change<br>', 
       caption="<br>Source: U.S. Census Bureau's American Community Survey 1-year Estimates<br>ACS-1 has wider undercertainty bands due to smaller sampling",
       x='\n% of children (under 5 y.o.) living\nunder the Federal Poverty Line in 2023\n',
       y='') + 
  scale_x_continuous(labels = percent, position='top') + 
  my.theme + 
  theme(legend.position = 'none')
```


Thinking about a comet plot. Use this as a guide: https://thef5.substack.com/p/how-to-comet-plot

```{r viz_text, include=TRUE, echo=FALSE}
title_text <- 'Percent of children in poverty by U.S. state in 2023'
subtitle_text <- glue('Children defined as those 5 years old and younger<br>Point estimates and margins of error')
caption_text <- glue('Source: American Community Survey 2023 1-year estimate<br>Margins of error represent the 90% Confidence Interval<br>Poverty level defined by the Federal Poverty Line')
```

It's important to remember that all ACS estimates have a margin of error (which by default is a 90% confidence interval), so point estimates should be complemented with their respective error bands. ACS-1 is a smaller sampling than the ACS-5 product, so these margins of error can be more significant. This shows that one of *New Mexico*, *Louisiana*, or *West Virginia* could have the highest under-five poverty rate as of the 2023 survey.

```{r dot_plot, include=TRUE, fig.width=11, fig.height=18, fig.align='center'}
combined_acs_data %>% 
  filter(year == 2023,
         NAME != 'Puerto Rico') %>%
  group_by(NAME) %>% 
  mutate(total_u5_poverty_MOEcalc = moe_sum(male_u5_povertyM, female_u5_povertyM),
         perc_u5_poverty_MOEcalc = total_u5_poverty_MOEcalc / total_u5_popE) %>% 
  ggplot(
    aes(x=perc_u5_poverty, 
        y=reorder(NAME, perc_u5_poverty))) + 
  geom_point(size=3) +
  geom_errorbarh(aes(xmin=perc_u5_poverty - perc_u5_poverty_MOEcalc, 
                     xmax=perc_u5_poverty + perc_u5_poverty_MOEcalc),
                 height = 0.4) + 
  labs(y='',
       x='',
       caption=caption_text) + 
  ggtitle(title_text,
          subtitle=subtitle_text) +
  scale_x_continuous(labels = percent,
                     position = 'top') + 
  my.theme
```

1. Using the `tidycensus::` margin of error aggregation functions to create confidence bands around the point estimate.


```{r}
combined_acs_data_county <- combined_acs_data_county %>% 
  group_by(state, county) %>% 
  mutate(perc_u5_poverty_tminus_1 = lag(perc_u5_poverty),
           perc_diff_YoY = perc_u5_poverty - perc_u5_poverty_tminus_1) %>% 
  arrange(NAME)
```

# Colorado 


```{r}
# library(tigris)
# library(patchwork)
# 
# # Load state boundaries from tigris
# states_sf <- states(cb = TRUE) %>% 
#   filter(!STUSPS %in% c('GU', 'AS', 'MP', 'VI', 'PR'))
```

```{r}
# Create the main map
# main_map <- combined_acs_data_county %>%
#   filter(year == 2023) %>%
#   filter(!state %in% c('Alaska', 'Hawaii')) %>%
#   ggplot() +
#   geom_sf(aes(fill = perc_diff_YoY), color = NA) +
#   geom_sf(data = states_sf, fill = NA, color = "black", size = 0.2) +  # Add state outlines
#   coord_sf(datum = NA) +
#   scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red"),
#                        labels = percent) +
#   ggtitle('Percentage point change in child poverty (2022 to 2023)') +
#   labs(caption = 'Source: U.S. Census Bureau, ACS 1-year estimates') +
#   theme_minimal() +
#   theme(plot.title = element_textbox_simple(face = "bold", size = 14),
#         legend.title = element_blank(),
#         legend.key.size = unit(1.25, "cm"),
#         legend.text = element_text(size = 12))
# 
# # Create inset maps for Alaska and Hawaii
# alaska_map <- combined_acs_data_county %>%
#   filter(year == 2023, state == 'Alaska') %>%
#   ggplot() +
#   geom_sf(aes(fill = perc_diff_YoY), color = NA) +
#   coord_sf(datum = NA) +
#   scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red"),
#                        labels = percent) +
#   theme_void() +
#   theme(legend.position = "none") +
#   labs(title = "Alaska")
# 
# hawaii_map <- combined_acs_data_county %>%
#   filter(year == 2023, state == 'Hawaii') %>%
#   ggplot() +
#   geom_sf(aes(fill = perc_diff_YoY), color = NA) +
#   coord_sf(datum = NA) +
#   scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red"),
#                        labels = percent) +
#   theme_void() +
#   theme(legend.position = "none") +
#   labs(title = "Hawaii")
# 
# # Combine the main map with insets using patchwork
# final_map <- main_map +
#   inset_element(alaska_map, left = 0.15, bottom = 0.1, right = 0.35, top = 0.3) +
#   inset_element(hawaii_map, left = 0.4, bottom = 0.1, right = 0.5, top = 0.2) +
#   plot_layout(guides = "collect")
```


```{r fig.width=8, fig.height=7}
combined_acs_data_county %>% 
  filter(year == 2023) %>%
  filter(!state %in% c('Alaska', 'Hawaii')) %>% 
         # state == 'Colorado') %>% 
  ggplot() + 
  geom_sf(aes(fill=perc_diff_YoY), color=NA) + 
  # geom_sf(data = states_sf, fill = NA, color = "black", size = 0.2) +
  coord_sf(datum = NA) + 
  scale_fill_gradient2(low = muted("blue"), mid = "white", high = muted("red"),
                       labels = percent) + 
  # scale_fill_viridis_b(labels = percent,
  #                      n.breaks = 5) + 
  ggtitle('Percentage point change in child poverty (2022 to 2023)') + 
  labs(caption = 'Source: U.S. Census Bureau, ACS 1-year estimates') + 
  theme_minimal() + 
  theme(plot.title = ggtext::element_textbox_simple(face="bold", size=14),
        legend.title = element_blank(),
        legend.key.size = unit(1.25, "cm"),
        legend.text = element_text(size = 12))
```


```{r colorado_comet, include=TRUE, fig.width=8, fig.height=8}
combined_acs_data_county %>% 
  filter(year == 2023,
         state == 'Colorado') %>% 
  arrange(-perc_diff_YoY) %>% 
  mutate(county = factor(county, levels = county),
         direction = case_when(
           perc_diff_YoY > .005 ~ "Increase",
           perc_diff_YoY < -.005 ~ "Decrease",
           TRUE ~ "No Change")) %>% 
         # direction = ifelse(perc_diff_YoY >= 0, "Increase", "Decrease")) %>% 
  ggplot(aes(y = reorder(county, -perc_diff_YoY),
             color=direction)) +
  geom_link(aes(x = perc_u5_poverty_tminus_1, y = fct_reorder(county, perc_diff_YoY), 
              xend = perc_u5_poverty, yend = fct_reorder(county, perc_diff_YoY), 
              size = stat(index))) + 
  geom_point(data = . %>% filter(perc_diff_YoY > 0),
             aes(perc_u5_poverty, y = fct_reorder(county, perc_diff_YoY)),
             shape = 21, fill = "white", size = 4)  +
  geom_point(data = . %>% filter(perc_diff_YoY < 0),
             aes(perc_u5_poverty, y = fct_reorder(county, perc_diff_YoY)),
             shape = 21, fill = "white", size = 4) +
  # annotate(geom = 'label', x = .27, y = 49, label = "Poverty rate increased\n in 2023", 
  #        family = "Palatino", color = "#E64B35FF", fontface = 'bold', 
  #        fill = "floralwhite",
  #        label.size = 0, size = 4) + 
  # annotate(geom = 'label', x = .27, y = 36.5, label = "Poverty rate unchanged\n in 2023", 
  #        family = "Palatino", color = "#444444", fontface = 'bold', 
  #        fill = "floralwhite",
  #        label.size = 0, size = 4) + 
  # annotate(geom = 'label', x = .27, y = 24.5, label = "Poverty rate decreased\nin 2023", 
  #        family = "Palatino", color = "#00A087FF", fontface = 'bold', 
  #        fill = "floralwhite",
  #        label.size = 0, size = 4) + 
  scale_color_manual(values = c("Decrease" = "#00A087FF", "Increase" = "#E64B35FF", "No Change" = "#444444")) +
  scale_size(range = c(.01, 4)) +
  labs(title='Change in County-level Child Poverty in Colorado from 2022 to 2023',
       subtitle = 'Size of the color band corresponds to the magnitude of change<br>', 
       caption="<br>Source: U.S. Census Bureau's American Community Survey 1-year Estimates<br>ACS-1 has wider undercertainty bands due to smaller sampling",
       x='\n% of children (under 5 y.o.) living\nunder the Federal Poverty Line in 2023\n',
       y='') + 
  scale_x_continuous(labels = percent, position='top') + 
  my.theme + 
  theme(legend.position = 'none')
```

```{r dot_plot2, include=TRUE, fig.width=6, fig.height=7, fig.align='center'}
combined_acs_data_county %>% 
  filter(year == 2023,
         state == 'Colorado') %>%
  group_by(county) %>% 
  mutate(total_u5_poverty_MOEcalc = moe_sum(male_u5_povertyM, female_u5_povertyM),
         perc_u5_poverty_MOEcalc = total_u5_poverty_MOEcalc / total_u5_popE) %>% 
  ggplot(
    aes(x=perc_u5_poverty, 
        y=reorder(county, perc_u5_poverty))) + 
  geom_point(size=3) +
  geom_errorbarh(aes(xmin=if_else(perc_u5_poverty - perc_u5_poverty_MOEcalc < 0, 0, perc_u5_poverty - perc_u5_poverty_MOEcalc), 
                     xmax=perc_u5_poverty + perc_u5_poverty_MOEcalc),
                 height = 0.4) + 
  labs(y='',
       x='',
       caption=caption_text) + 
  ggtitle('Percent of children in poverty in Colorado in 2023',
          subtitle=subtitle_text) +
  scale_x_continuous(labels = percent,
                     position = 'top') + 
  my.theme
```


# Conclusion

In this `tidycensus::` post, I demonstrated:

-   How to fetch data across multiple years from the U.S. Census Bureau and wrangle the data for longitudinal analysis
-   How to move between R or Python objects and Observable JS objects in Quarto 
-   How to make some simple interactive graphics with Observable Plot

More to come on poverty analysis in future posts!

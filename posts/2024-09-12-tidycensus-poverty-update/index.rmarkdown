---
title: "Reviewing the ACS-1 2023 child poverty estimates"
description: "This post looks at how child poverty estimates have changed in the latest U.S. Census data"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 09-12-2024
categories: [R, data-viz, tidyverse, tidycensus, api, purrr] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
# image: co_county_pov_2022.png
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
code-annotations: hover
editor: 
  markdown: 
    wrap: 72
---



# Introduction

In a [previous tidycensus::
post](https://mrafa3.github.io/posts/2024-08-20-tidycensus-exploration-pt2/),
I showed how to fetch data and do some basic, longitudinal analysis of
U.S. Census data. Today, the Census Bureau released the 1-year estimates
from the American Community Survey (ACS), so I'd like to see how child
poverty seems to be changing from the 2022 to 2023 releases.

## Setup



```{r libraries, include=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidycensus)
library(ggtext)
library(scales) # <1>
library(gt) # <2>
library(glue) # <3>
library(ggforce) # <4>

# census_api_key('INSERT KEY HERE', install = TRUE) # <5>
```



1.  Loading the `scales::` package to transform ggplot scales simply
    (some people choose to explicitly define `scales::` in their code
    rather than loading the library).
2.  The `gt::` library provides functionality for creating ggplot-esque
    tables.
3.  The `glue::` package allows for simple addition of HTML to ggplot
    graphics.
4.  The `ggforce::` package includes a `geom_link()` function, which
    I'll use to create the comet effect in the comet plots that I use.
5.  The first time that you're working with the `tidycensus::` package,
    you need to request an API key at
    https://api.census.gov/data/key_signup.html. The `install=` argument
    will install your personal key to the .Renviron file, and you won't
    need to use the `census_api_key()` function again.



```{r my_theme, include=TRUE, echo=FALSE}
my_theme <- theme(
  plot.title = ggtext::element_textbox_simple(family="Roboto Condensed", face="bold", size=15, hjust = .5),
  plot.subtitle = ggtext::element_textbox_simple(family="Roboto Condensed", size=12),
  plot.caption = ggtext::element_textbox_simple(family="Roboto Condensed"),
  axis.title = element_text(family="Roboto Condensed", face="bold", size=10), 
  axis.text = element_text(family="Roboto Condensed", size=10), 
  axis.ticks = element_blank(), 
  panel.background = element_blank(),
  panel.grid = element_line(color="#444444", linewidth = .01),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(), 
  legend.title=element_blank(), 
  legend.position = 'top',
  plot.background = element_rect(fill = 'floralwhite', color = "floralwhite"))
```



# Data

For this analysis, I'm interested in looking at the most recent
state-level child poverty data available from the U.S. Census Bureau,
and I want to construct a longitudinal sense of the change in child
poverty.

First, let's revisit the different American Community Survey products --
**ACS-1** and **ACS-5**.

*What's the difference between these, and how do you choose which survey
product to use for your purposes?*

| Feature | ACS 1-Year Estimates | ACS 5-Year Estimates |
|------------------|----------------------------|---------------------------|
| Data Collection Period | 12 months | 60 months |
| Population Coverage | Areas with 65,000 or more people | All geographic areas, including those with fewer than 65,000 people |
| Sample Size | Smallest | Largest |
| Reliability | Less reliable due to smaller sample size | More reliable due to larger sample size |
| Currency | Most current data | Less current, includes older data |
| Release Frequency | Annually | Annually |
| Best Used For | Analyzing large populations, when currency is more important than precision | Analyzing small populations, where precision is more important than currency |
| Example Usage | Examining recent economic changes | Examining trends in small geographic areas or small population subgroups |

For this post, I am interested in constructing a longitudinal dataset of
the most recent year-on-year estimates, including the 2023 1-year
estimates that were released today. Note that for the ACS-1 products,
estimates are only available for geographic units with populations
greater than 65,000.

As I did in prior posts, I'll use the following series from the American
Community Survey:

-   *B01001_003*: Estimate!!Total:!!Male:!!Under 5 years (all racial
    groups)
-   *B01001_027*: Estimate!!Total:!!Female:!!Under 5 years (all racial
    groups)
-   *B17001_004*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Male:!!Under 5 years
-   *B17001_018*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Female:!!Under 5 years

## Fetching from the `tidycensus::` API



```{r year_acs, include=TRUE}
years <- c(2022, 2023)
```



Next, I'll define a function to fetch the ACS-1 data for 2022 and the
new 2023 estimates.



```{r fetch_poverty_data, include=TRUE}
fetch_acs_data <- function(year) {
  get_acs(geography = "state", 
          survey = 'acs1',
          variables = c(male_u5_pop = 'B01001_003', 
                        female_u5_pop = 'B01001_027', 
                        male_u5_poverty = 'B17001_004', 
                        female_u5_poverty = 'B17001_018'),
          year = year,
          output = 'wide') %>% 
    mutate(year = year,
           total_u5_popE = male_u5_popE + female_u5_popE, # <6>
           total_u5_povertyE = male_u5_povertyE + female_u5_povertyE, # <6>
           perc_u5_poverty = total_u5_povertyE / total_u5_popE)  # <6>
}

fetch_acs_data_county <- function(year) {
  get_acs(geography = "county", 
          survey = 'acs1',
          variables = c(male_u5_pop = 'B01001_003', 
                        female_u5_pop = 'B01001_027', 
                        male_u5_poverty = 'B17001_004', 
                        female_u5_poverty = 'B17001_018'),
          year = year,
          geometry = TRUE,
          output = 'wide') %>% 
    mutate(year = year,
           total_u5_popE = male_u5_popE + female_u5_popE,
           total_u5_povertyE = male_u5_povertyE + female_u5_povertyE,
           perc_u5_poverty = total_u5_povertyE / total_u5_popE,
           county = str_remove(NAME, " County.*"), # <7>
           state = str_extract(NAME, "[\\w\\s]+$") %>% str_trim()) %>% # <7>
    select(county, state, everything()) %>% 
    group_by(county, state) %>% 
    mutate(perc_u5_poverty_tminus_1 = lag(perc_u5_poverty),
           perc_diff_YoY = perc_u5_poverty - perc_u5_poverty_tminus_1)
}
```



6.  Creating some fields to combine gender-based poverty estimates and
    calculate a percent of the child population measure
7.  Creating `state` and `county` fields to manipulate the dataframe and
    visualize with more simplicity

Then, I'll use `purrr::map_df()` to apply each year to the
`fetch_acs_data()` function that I created, which will result in a
single dataframe of all years.



```{r combined_acs_data, include=TRUE, message=FALSE, output=FALSE}
combined_acs_data <- map_df(years, fetch_acs_data)
```

```{r combined_acs_data_county, include=TRUE, message=FALSE, output=FALSE}
combined_acs_data_county <- map_df(years, fetch_acs_data_county)
```



# Analysis



```{r create_tminus1, include=TRUE, echo=FALSE}
combined_acs_data <- combined_acs_data %>% 
  group_by(NAME) %>% 
  mutate(perc_u5_poverty_tminus_1 = lag(perc_u5_poverty),
         perc_diff_YoY = perc_u5_poverty - perc_u5_poverty_tminus_1) %>% 
  arrange(NAME)
```



According to the 2023 ACS-1, roughly 113,000 fewer children were below
the Federal Poverty Line.



```{r gt_agg_poverty, include=TRUE, echo=FALSE}
combined_acs_data %>%
  filter(NAME != 'Puerto Rico') %>% 
  group_by(year) %>% 
  summarise(total_u5_popE = sum(total_u5_popE), 
            total_u5_povertyE = sum(total_u5_povertyE)) %>% 
  mutate(perc_u5_poverty = total_u5_povertyE / total_u5_popE) %>% 
  gt() %>% 
  cols_label(year = 'Year',
             total_u5_popE = 'Total children < 5 y.o.',
             total_u5_povertyE = 'Total children < 5 y.o. living in poverty in last 12 mos.',
             perc_u5_poverty = '% of children < 5 y.o. living in poverty in last 12 mos.') %>%
  # formatting numeric fields
  fmt_number(columns = c(total_u5_popE, total_u5_povertyE), decimals = 0, use_seps = TRUE) %>% 
  fmt_percent(columns = perc_u5_poverty, decimals = 1) %>% 
  #add table title
  tab_header(title = md("**Estimated child poverty in the U.S. (2022-2023)**"),
             subtitle = "Total and Percent estimates of those living below the Federal Poverty Line") %>% 
  tab_source_note(source_note = "Data from 2022 & 2023 American Community Survey 1-year estimates from the U.S. Census Bureau. Estimates exclude Puerto Rico.") %>% 
  #apply new style to all column headers
  tab_style(
    locations = cells_column_labels(columns = everything()),
    style = list(
      #thick border
      cell_borders(sides = "bottom", weight = px(3)),
      #make text bold
      cell_text(weight = "bold")
    )
  ) %>% 
  #apply different style to title
  tab_style(locations = cells_title(groups = "title"),
            style = list(
              cell_text(weight = "bold", size = 24)
            )) %>% 
  # data_color(
  #   columns = perc_u5_poverty,
  #   palette = viridis::inferno(100)
  # ) %>% 
  opt_all_caps() %>% 
  opt_table_font(
    font = list(
      google_font("Roboto Condensed"),
      default_fonts()
    )
  ) %>% 
  tab_options(
    #remove border between column headers and title
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    #remove border around the table
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    #adjust font sizes and alignment
    source_notes.font.size = 12,
    heading.align = "left",
    table.font.size = 16,
    heading.title.font.size = 24,
    heading.subtitle.font.size = 16,
    column_labels.font.size = 16
  )
```

```{r state_level_gt, include=TRUE, echo=FALSE}
combined_acs_data %>% 
  filter(NAME != 'Puerto Rico') %>% 
  group_by(year, NAME) %>% 
  summarise(total_u5_popE = sum(total_u5_popE), 
            total_u5_povertyE = sum(total_u5_povertyE)) %>% 
  mutate(perc_u5_poverty = total_u5_povertyE / total_u5_popE) %>% 
  arrange(NAME) %>% 
  gt(groupname_col = 'NAME') %>% 
  cols_label(year = 'Year',
             total_u5_popE = 'Total children < 5 y.o.',
             total_u5_povertyE = 'Total children < 5 y.o. living in poverty in last 12 mos.',
             perc_u5_poverty = '% of children < 5 y.o. living in poverty in last 12 mos.') %>%
  # formatting numeric fields
  fmt_number(columns = c(total_u5_popE, total_u5_povertyE), decimals = 0, use_seps = TRUE) %>% 
  fmt_percent(columns = perc_u5_poverty, decimals = 1) %>% 
  #add table title
  tab_header(title = md("**Estimated child poverty in the U.S. (2022-2023)**"),
             subtitle = "Total and Percent estimates of those living below the Federal Poverty Line") %>% 
  tab_source_note(source_note = "Data from 2022 & 2023 American Community Survey 1-year estimates from the U.S. Census Bureau") %>% 
  #apply new style to all column headers
  tab_style(
    locations = cells_column_labels(columns = everything()),
    style = list(
      #thick border
      cell_borders(sides = "bottom", weight = px(3)),
      #make text bold
      cell_text(weight = "bold")
    )
  ) %>% 
  #apply different style to title
  tab_style(locations = cells_title(groups = "title"),
            style = list(
              cell_text(weight = "bold", size = 24)
            )) %>% 
  data_color(
    columns = perc_u5_poverty,
    palette = viridis::inferno(100)
  ) %>%
  opt_all_caps() %>% 
  opt_table_font(
    font = list(
      google_font("Roboto Condensed"),
      default_fonts()
    )
  ) %>% 
  tab_options(
    #remove border between column headers and title
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    #remove border around the table
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    #adjust font sizes and alignment
    source_notes.font.size = 12,
    heading.align = "left"
  )
```



To further visualize the state-level changes in estimates, I wanted to
try out a **comet plot**. Comet plots are stylized connected dot plots,
which show the "before and after" at both ends of the plot. The comet's
"tail" is the before, and where the estimate moved to is the
comet-shaped end. I've never used one before, but I think that they're
more than just a fun way to plot data. I think that the *movement*
associated with the comet analogy gives the design some intuition.

I was inspired by [this
plot](https://thef5.substack.com/p/how-to-comet-plot), which evaluates
NBA player performance using a comet plot. I borrowed heavily from this
code and aesthetic.



```{r comet_state_level_plot, include=TRUE, fig.width=8, fig.height=14, message=FALSE, warning=FALSE}
combined_acs_data %>% 
  filter(year == 2023,
         NAME != 'Puerto Rico') %>% 
  arrange(-perc_diff_YoY) %>% 
  mutate(state = factor(NAME, levels = NAME),
         direction = case_when(
           perc_diff_YoY > .005 ~ "Increase",
           perc_diff_YoY < -.005 ~ "Decrease",
           TRUE ~ "No Change")) %>% 
  ggplot(aes(y = reorder(NAME, -perc_diff_YoY),
             color=direction)) +
  geom_link(aes(x = perc_u5_poverty_tminus_1, y = fct_reorder(NAME, perc_diff_YoY), 
              xend = perc_u5_poverty, yend = fct_reorder(NAME, perc_diff_YoY), 
              size = after_stat(index))) + 
  geom_point(data = . %>% filter(perc_diff_YoY > 0),
             aes(perc_u5_poverty, y = fct_reorder(NAME, perc_diff_YoY)),
             shape = 21, fill = "white", size = 4)  +
  geom_point(data = . %>% filter(perc_diff_YoY < 0),
             aes(perc_u5_poverty, y = fct_reorder(NAME, perc_diff_YoY)),
             shape = 21, fill = "white", size = 4) +
  annotate(geom = 'label', x = .27, y = 49, label = "Poverty rate increased\n in 2023", 
         family = "Roboto Condensed", color = "#E64B35FF", fontface = 'bold', 
         fill = "floralwhite",
         label.size = 0, size = 4) + 
  annotate(geom = 'label', x = .27, y = 36.5, label = "Poverty rate unchanged\n in 2023", 
         family = "Roboto Condensed", color = "#444444", fontface = 'bold', 
         fill = "floralwhite",
         label.size = 0, size = 4) + 
  annotate(geom = 'label', x = .27, y = 24.5, label = "Poverty rate decreased\nin 2023", 
         family = "Roboto Condensed", color = "#00A087FF", fontface = 'bold', 
         fill = "floralwhite",
         label.size = 0, size = 4) + 
  scale_color_manual(values = c("Decrease" = "#00A087FF", "Increase" = "#E64B35FF", "No Change" = "#444444")) +
  scale_size(range = c(.01, 4)) +
  labs(title='Change in State-level Child Poverty<br>from 2022 to 2023',
       subtitle = 'Length of the color band corresponds to the magnitude of change<br>', 
       caption="<br>Source: U.S. Census Bureau's American Community Survey 1-year Estimates<br>ACS-1 has wider undercertainty bands due to smaller sampling",
       x='\n% of children (under 5 y.o.) living\nunder the Federal Poverty Line in 2023\n',
       y='') + 
  scale_x_continuous(labels = percent, position='top') + 
  my_theme + 
  theme(legend.position = 'none',
        plot.title = element_textbox_simple(size=22))
```



I chose to sort states based on the percentage point change in child
poverty, year-over-year. This results in the states with the largest
**increase** in the child poverty rate on top, and states with the
largest **decrease** in the child poverty rate on the bottom. In New
Mexico, the child poverty rate increased **4.7 percentage points** from
the 2022 to the 2023 estimates from the ACS. In Vermont, the poverty
rate decreased **7 percentage points** from 2022 to 2023. Although West
Virginia saw the second largest decrease in child poverty in these
estimates, still about 1 out of every four children in the state are
below the poverty line, according to the American Community Survey.



```{r viz_text, include=TRUE, echo=FALSE}
title_text <- 'Percent of children in poverty by U.S. state in 2023'
subtitle_text <- glue('Children defined as those 5 years old and younger<br>Point estimates and margins of error')
caption_text <- glue('Source: American Community Survey 2023 1-year estimate<br>Margins of error represent the 90% Confidence Interval<br>Poverty level defined by the Federal Poverty Line')
```



It's important to remember that all ACS estimates have a margin of error
(which by default is a 90% confidence interval), so point estimates
should be complemented with their respective error bands. ACS-1 is a
smaller sampling than the ACS-5 product, so these margins of error can
be more significant. This shows that one of *New Mexico*, *Louisiana*,
or *West Virginia* could all have the highest under-five poverty rate as
of the 2023 survey.



```{r dot_plot, include=TRUE, echo=FALSE, fig.width=11, fig.height=18, fig.align='center'}
combined_acs_data %>% 
  filter(year == 2023,
         NAME != 'Puerto Rico') %>%
  group_by(NAME) %>% 
  mutate(total_u5_poverty_MOEcalc = moe_sum(male_u5_povertyM, female_u5_povertyM), # <8>
         perc_u5_poverty_MOEcalc = total_u5_poverty_MOEcalc / total_u5_popE) %>% # <8>
  ggplot(
    aes(x=perc_u5_poverty, 
        y=reorder(NAME, perc_u5_poverty))) + 
  geom_point(size=3) +
  geom_errorbarh(aes(xmin=perc_u5_poverty - perc_u5_poverty_MOEcalc, 
                     xmax=perc_u5_poverty + perc_u5_poverty_MOEcalc),
                 height = 0.4) + 
  labs(y='',
       x='',
       caption=caption_text) + 
  ggtitle(title_text,
          subtitle=subtitle_text) +
  scale_x_continuous(labels = percent,
                     position = 'top') + 
  my_theme
```



8.  Using the `tidycensus::` margin of error aggregation functions to
    create confidence bands around the point estimate.

# A spotlight on Colorado and county-level poverty estimates



```{r combined_acs_data_county_lag, include=TRUE, echo=FALSE}
combined_acs_data_county <- combined_acs_data_county %>% 
  group_by(state, county) %>% 
  mutate(perc_u5_poverty_tminus_1 = lag(perc_u5_poverty),
           perc_diff_YoY = perc_u5_poverty - perc_u5_poverty_tminus_1) %>% 
  arrange(NAME)
```

```{r test_map, include=FALSE, fig.width=8, fig.height=7}
combined_acs_data_county %>% 
  filter(year == 2023) %>%
  filter(!state %in% c('Alaska', 'Hawaii')) %>% 
         # state == 'Colorado') %>% 
  ggplot() + 
  geom_sf(aes(fill=perc_diff_YoY), color=NA) + 
  # geom_sf(data = states_sf, fill = NA, color = "black", size = 0.2) +
  coord_sf(datum = NA) + 
  scale_fill_gradient2(
    low = "#2469b3",
    mid = "#f0eee5",
    high = "#b6202c",
    midpoint = median(combined_acs_data_county$perc_diff_YoY, na.rm = TRUE),
    labels = scales::percent,
    name = ''
  ) + 
  ggtitle('Percentage point change in child poverty (2022 to 2023)') + 
  labs(caption = 'Source: U.S. Census Bureau, ACS 1-year estimates') + 
  theme_minimal() + 
  theme(
      text = element_text(family = 'Roboto Condensed'),
      plot.title = element_text(face = 'bold'), 
      plot.title.position = 'plot',
      legend.position = "top",
      legend.direction = "horizontal",
      legend.key.height = unit(0.5, "cm"),
      legend.key.width = unit(2, "cm"),
      legend.title.position = "top",
      legend.title = element_blank(),
      legend.background = element_rect(fill = "white", color = NA),
      legend.spacing.x = unit(0.2, 'cm')
    )
  theme(plot.title = ggtext::element_textbox_simple(face="bold", size=14),
        legend.title = element_blank(),
        legend.key.size = unit(1.25, "cm"),
        legend.text = element_text(size = 12))
```



Now I want to look into the movement in child poverty in Colorado
counties with the ACS-1 2023 estimates. It's important to remember that
ACS-1 estimates are limited to only geographies that exceed 65,000
people. This limits the Colorado data to only 12 counties; however,
these 12 counties constitute 88% of the children under five in the whole
state.[^1]

[^1]: This calculation is done using the 2022 ACS-5 estimates to include
    all 64 counties in Colorado.



```{r check_acs5_pop, include=FALSE}
df_acs5 <- get_acs(geography = "county", 
                   state = 'CO',
                   survey = 'acs5',
                   variables = c(male_u5_pop = 'B01001_003', 
                                 female_u5_pop = 'B01001_027'), 
                   year = 2022,
                   output = 'wide')

co_counties_acs1 <- combined_acs_data_county %>% 
  ungroup() %>% 
  filter(state == 'Colorado') %>% 
  distinct(county) %>% 
  pull()

df_acs5 %>% 
  mutate(total_u5_pop = male_u5_popE + female_u5_popE,
         perc_total_u5_pop = total_u5_pop / sum(total_u5_pop),
         county = str_remove(NAME, " County.*"),
         state = str_extract(NAME, "[\\w\\s]+$") %>% str_trim(),
         county_in_acs1 = if_else(county %in% co_counties_acs1, 'Yes', 'No')) %>% 
  group_by(county_in_acs1) %>% 
  summarise(perc_total_u5_pop = sum(perc_total_u5_pop))
```

```{r colorado_comet, include=TRUE, echo=FALSE, fig.width=8, fig.height=8}
combined_acs_data_county %>% 
  filter(year == 2023,
         state == 'Colorado') %>% 
  arrange(-perc_diff_YoY) %>% 
  mutate(county = factor(county, levels = county),
         direction = case_when(
           perc_diff_YoY > .005 ~ "Increase",
           perc_diff_YoY < -.005 ~ "Decrease",
           TRUE ~ "No Change")) %>% 
         # direction = ifelse(perc_diff_YoY >= 0, "Increase", "Decrease")) %>% 
  ggplot(aes(y = reorder(county, -perc_diff_YoY),
             color=direction)) +
  geom_link(aes(x = perc_u5_poverty_tminus_1, y = fct_reorder(county, perc_diff_YoY), 
              xend = perc_u5_poverty, yend = fct_reorder(county, perc_diff_YoY), 
              size = stat(index))) + 
  geom_point(data = . %>% filter(perc_diff_YoY > 0),
             aes(perc_u5_poverty, y = fct_reorder(county, perc_diff_YoY)),
             shape = 21, fill = "white", size = 4)  +
  geom_point(data = . %>% filter(perc_diff_YoY < 0),
             aes(perc_u5_poverty, y = fct_reorder(county, perc_diff_YoY)),
             shape = 21, fill = "white", size = 4) +
  annotate(geom = 'label', x = .15, y = 11, label = "Poverty rate increased\n in 2023",
         family = "Roboto Condensed", color = "#E64B35FF", fontface = 'bold',
         fill = "floralwhite",
         label.size = 0, size = 4) +
  annotate(geom = 'label', x = .15, y = 2, label = "Poverty rate decreased\nin 2023",
         family = "Roboto Condensed", color = "#00A087FF", fontface = 'bold',
         fill = "floralwhite",
         label.size = 0, size = 4) +
  scale_color_manual(values = c("Decrease" = "#00A087FF", "Increase" = "#E64B35FF", "No Change" = "#444444")) +
  scale_size(range = c(.01, 4)) +
  labs(title='Change in County-level Child Poverty<br>in Colorado from 2022 to 2023',
       subtitle = 'Length of the color band corresponds to the magnitude of change', 
       caption="<br>Source: U.S. Census Bureau's American Community Survey 1-year Estimates<br>ACS-1 has wider undercertainty bands due to smaller sampling<br>Only counties with more than 65k people are included in ACS-1",
       x='\n% of children (under 5 y.o.) living\nunder the Federal Poverty Line in 2023\n',
       y='') + 
  scale_x_continuous(labels = percent, position='top') + 
  my_theme + 
  theme(legend.position = 'none',
        plot.title = element_textbox_simple(size=22))
```



These changes should also be taken in the context of the margins of
error around point estimates. As shown below, the margins of error for
some counties' estimates is quite large. In **Mesa County**, the margin
of error is +/- 10% around the point estimate (of 17.8%).



```{r dot_plot2, include=TRUE, echo=FALSE, fig.width=6, fig.height=6, fig.align='center'}
combined_acs_data_county %>% 
  filter(year == 2023,
         state == 'Colorado') %>%
  group_by(county) %>% 
  mutate(total_u5_poverty_MOEcalc = moe_sum(male_u5_povertyM, female_u5_povertyM),
         perc_u5_poverty_MOEcalc = total_u5_poverty_MOEcalc / total_u5_popE) %>% 
  ggplot(
    aes(x=perc_u5_poverty, 
        y=reorder(county, perc_u5_poverty))) + 
  geom_point(size=3) +
  geom_errorbarh(aes(xmin=if_else(perc_u5_poverty - perc_u5_poverty_MOEcalc < 0, 0, perc_u5_poverty - perc_u5_poverty_MOEcalc), 
                     xmax=perc_u5_poverty + perc_u5_poverty_MOEcalc),
                 height = 0.4) + 
  labs(y='',
       x='',
       caption=caption_text) + 
  ggtitle('Percent of children in poverty in Colorado in 2023',
          subtitle=subtitle_text) +
  scale_x_continuous(labels = percent,
                     position = 'top') + 
  my_theme
```



# Conclusion

In this `tidycensus::` post, I demonstrated:

-   How to fetch data across multiple years from the U.S. Census Bureau
    and wrangle the data for longitudinal analysis
-   How to create nice tables using the `gt::` package
-   How to construct a comet plot, thanks to some inspiration from a
    [Substack post](https://thef5.substack.com/p/how-to-comet-plot)
-   How to evaluate changes in ACS-1 estimates in the context of their
    margins of error

More to come on poverty analysis in future posts!


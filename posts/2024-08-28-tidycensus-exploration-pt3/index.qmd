---
title: "Part Three: Exploring even smaller geographies with tidycensus"
description: "This post shows how to fetch data at smaller scales for analysis of Census data"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 08-20-2024
categories: [R, tidyverse, tidycensus, api, javascript, purrr] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
# image: facet_region.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
editor: 
  markdown: 
    wrap: 72
---

# Introduction

In [Part One](https://mrafa3.github.io/posts/2024-08-13-tidycensus-exploration/), I demonstrated how to fetch data and do some basic analysis of U.S. Census data. Each API call with the `tidycensus::` package can only be for one year of data, so to do longitudinal analysis requires some additional wrangling. In this post, I'll build a script that iterates through the available years, fetches the data, then combines the data into a single dataframe. Then, I'll unpack some of the trends seen in child poverty in Colorado.

In [Part Two]()

In this post, I'd like to drill down further -- to the Census block level -- to demonstrate how to fetch, wrangle, and visualize data using `tidycensus::`.

## Setup

```{r libraries, include=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidycensus)
library(scales)
library(janitor)
library(gt)

# census_api_key('INSERT KEY HERE')
```

```{r my.theme, include=TRUE, echo=FALSE}
my.theme <- theme(
  plot.title = ggtext::element_textbox_simple(face="bold", size=24,
  plot.subtitle = ggtext::element_textbox_simple(color="#444444", size=14,
  plot.caption = element_text(color="#444444"),
  axis.title = element_text(color="black", face="bold", size=12), 
  axis.text = element_text(color="black", size=18), 
  axis.ticks = element_blank(), 
  plot.background = element_rect(fill = 'white'),
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(), 
  legend.title=element_blank(), 
  legend.text = element_text(color="black", size=12, hjust=0),
  legend.position = 'top',
  strip.text = element_text(color="black", size=14))
```

# Data

As I did in Part One, I'll use the following series from the American Community Survey (ACS):

-   *B01001_003*: Estimate!!Total:!!Male:!!Under 5 years (all racial
    groups)
-   *B01001_027*: Estimate!!Total:!!Female:!!Under 5 years (all racial
    groups)
-   *B17001_004*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Male:!!Under 5 years
-   *B17001_018*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Female:!!Under 5 years

With the `tidycensus::` package, I can gather 5-year ACS data for these series from 2009 to 2022.[^1]

[^1]: According to the `tidycensus::` documentation, 5-year ACS data is available from 2009 through 2022, with the exception of 2020.



## Fetching from the `tidycensus::` API

```{r year_acs, include=FALSE}
years <- seq(2009, 2022) %>% 
  # no 2020 data from the ACS
  setdiff(2020)
```


In Part One, I used the `usmap::` package to quickly map state and county-level data. This package is handy for a quick US map, but it does have limitations, including:

*  It doesn't map using ggplot2, so it's less customizable than I like, and
*  It's only built for US maps of states and counties (and in this post, I want to map smaller areas).

Fortunately, `tidycensus::` is built for this, too! The `get_decennial()` and `get_acs()` functions have an argument for `geometry=`, which if set to TRUE, will return the polygons for your data along with the fields requested in the API call. Geographic options include: "state", "county", "block group", "tract", "block", and "zcta" (zip code tabulation area).[^3]

[^3]: Other geometries, such as school districts, can be accessed directly from the `tigris::` package.

```{r}
acs_data_block_group <- get_acs(
  geography = "block group",
  state = "CO",
  county = "Denver",
  variables = 'B19013_001',
  year = 2022,
  survey = "acs5",
  geometry = TRUE
)

# Plot the data using ggplot2
acs_data_block_group %>% 
  filter(variable == 'B19013_001') %>% 
  # filter(county == 'Denver County') %>% 
  ggplot(.) +
  geom_sf(aes(fill = estimate), color = NA) +
  # removes the grid from the viz
  coord_sf(datum = NA) + 
  scale_fill_viridis_c(option = "plasma", 
                       name = "Median Household Income",
                       labels = dollar) +
  labs(title = "Median Household Income by Block Group in Denver County, CO (ACS 2022)",
       caption = "Source: US Census Bureau, ACS 5-year estimates") +
  theme_minimal()
```



# Conclusion

In this `tidycensus::` post, I demonstrated:

-   How to fetch data across multiple years from the U.S. Census Bureau and wrangle the data for longitudinal analysis
-   How to move between R or Python objects and Observable JS objects in Quarto 
-   How to make some simple interactive graphics with Observable Plot

More to come on poverty analysis in future posts!
---
title: "Part Two: Exploring the tidycensus R package"
description: "This post uses the tidycensus package to access the Census API and visualize data"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 08-20-2024
categories: [R, tidyverse, mapping, gt, tidycensus, api, javascript, purrr] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
# image: us_child_poverty_map.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
editor: 
  markdown: 
    wrap: 72
---

# Introduction

In [Part One](https://mrafa3.github.io/posts/2024-08-13-tidycensus-exploration/), I demonstrated how to fetch data and do some basic analysis of U.S. Census data. In this post, I want to pull data longitudinally from the `tidycensus::` API. To do so, I'll build a script that iterates through the available data years, and pulls the same child poverty data that I gathered in Part One.

Next, I'll unpack some of the trends seen in child poverty in Colorado.

## Setup

```{r libraries, include=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidycensus)
library(scales)
library(janitor)
library(gt)
# library(usmap)
library(zoo)

# census_api_key('INSERT KEY HERE')
```

```{r my.theme, include=TRUE, echo=FALSE}
my.theme <- theme(
  plot.title = ggtext::element_textbox_simple(face="bold", size=24, margin=margin(b=5)),
  plot.subtitle = ggtext::element_textbox_simple(color="#444444", size=14, margin=margin(b=10)),
  plot.caption = ggtext::element_textbox_simple(color="#444444"),
  axis.title = element_text(color="black", face="bold", size=12), 
  axis.text = element_text(color="black", size=18), 
  axis.ticks = element_blank(), 
  plot.background = element_rect(fill = 'white'),
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(), 
  legend.title=element_blank(), 
  legend.text = element_text(color="black", size=12, hjust=0),
  legend.position = 'top',
  strip.text = element_text(color="black", size=14))
```

For this demo, I'll use the following series from the American Community Survey (ACS):

-   *B01001_003*: Estimate!!Total:!!Male:!!Under 5 years (all racial
    groups)
-   *B01001_027*: Estimate!!Total:!!Female:!!Under 5 years (all racial
    groups)
-   *B17001_004*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Male:!!Under 5 years
-   *B17001_018*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Female:!!Under 5 years

With the `tidycensus::` package, I can gather the data for these series from 2009 to 2022.[^1]

[^1]: According to the `tidycensus::` documentation, 1-year ACS data is available from 2005 through 2022, with the exception of 2020.

```{r year_acs, include=TRUE}
years <- seq(2009, 2022) %>% 
  # no 2020 data from the ACS
  setdiff(2020)
```

Next, I'll define a function to fetch the ACS data for each year in the vector.

```{r fetch_poverty_data, include=TRUE}
# Define a function to fetch ACS data for a given year
fetch_acs_data <- function(year) {
  get_acs(geography = "county", 
          state = "Colorado",
          variables = c('B01001_003', 'B01001_027', 'B17001_004', 'B17001_018'),
          year = year,
          output = 'wide')
}
```

Then, I'll map the years vector to the `fetch_acs_data()` function that I created.

```{r acs_data_list, include=TRUE}
# Use map() to apply fetch_acs_data to each year
acs_data_list <- map(years, fetch_acs_data)
```

Then, I'll create a `year` field for each dataframe in the list, so that I can create one, multi-year dataframe.

```{r map2_acs_data_list, include=TRUE}
acs_data_list <- map2(acs_data_list, years, ~ mutate(.x, year = as.character(.y)))
```

Now, I'll bind all of the ACS years together into a single dataframe for analysis.

```{r combined_acs_data, include=TRUE}
combined_acs_data <- bind_rows(acs_data_list)
```

```{r extract_acs_data, include=FALSE}
# If I wanted to write each year to the global environment, here's how
# extract_acs_data <- function(data_list, prefix = "acs_") {
#   walk2(
#     names(data_list),
#     data_list,
#     ~ assign(paste0(prefix, .x), .y, envir = .GlobalEnv)
#   )
# }

# extract_acs_data(acs_data_list)
```

Then, I'll follow the same data wrangling steps from Part One:

*  Updating the column names to be more user-friendly

```{r update_colnames, include=TRUE}
name_cols <- c('geoid', 'county_state', 
               'u5_male_estimate', 'u5_male_moe', 
               'u5_female_estimate', 'u5_female_moe',
               'u5_male_pov_estimate', 'u5_male_pov_moe',
               'u5_female_pov_estimate', 'u5_female_pov_moe',
               'year')

colnames(combined_acs_data) <- name_cols
```

*  Drop the margin of error fields

```{r drop_cols, include=TRUE}
combined_acs_data <- combined_acs_data %>% 
  select(-contains("moe"))
```

*  Next, I'll create some fields to combine gender-based poverty estimates and calculate a percent of the child population measure.

```{r df_mutate, include=TRUE, results='hide'}
combined_acs_data <- combined_acs_data %>% 
  mutate(u5_pop_total = u5_male_estimate + u5_female_estimate,
         u5_pov_total = u5_male_pov_estimate + u5_female_pov_estimate,
         u5_perc_in_poverty = u5_pov_total / u5_pop_total)
```

```{r mutate_county_name, include=TRUE, echo=FALSE}
combined_acs_data <- combined_acs_data %>% 
  mutate(county = str_remove(county_state, " County.*")) %>% 
  select(county, everything())
```

```{r read_colorado_regions, include=TRUE, echo=FALSE}
colorado_regions <- read_csv('.//data/colorado_regions.csv') %>%
  mutate(region = as.factor(region))
```

```{r join_colorado_regions, include=TRUE, echo=FALSE}
combined_acs_data <- combined_acs_data %>% 
  left_join(x=.,
            y=colorado_regions,
            by='county')
```


```{r lineplot_gg, include=FALSE}
combined_acs_data %>% 
  ggplot(.,
         aes(x=year,
             y=u5_perc_in_poverty,
             group=county)) + 
  geom_line()
```

```{r viewing_data, include=FALSE}
combined_acs_data %>% 
  filter(county == 'Mineral')
  # filter(year >= 2017 & year <= 2021) %>% 
  # group_by(county) %>% 
  # slice_min(u5_perc_in_poverty)
```


```{r ojs_define_chunk, include=TRUE, echo=FALSE}
ojs_define(ojsd = combined_acs_data)
```

<!-- filteredData = transpose(ojsd).filter(d => d.region === 'Front Range'); -->

```{ojs plot_ojs_line, include=TRUE}
Plot.plot({
  <!-- using options from here to learn: https://observablehq.com/plot/features/facets -->
  width: 1200,
  x: {nice: true},
  <!-- y: {inset: 5}, -->
  color: {type: "categorical"},
  y: {
    grid: true,
    label: "Child poverty rate (%)",
    domain: [0, 100]
  },
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(transpose(ojsd), {
    x: "year", 
    fx: "region",
    y: d => d.u5_perc_in_poverty * 100, 
    z: "county", 
    stroke: "region",
    tip: true})
  ]
})
```

Aside from the Front Range, which is showing some smooth patterns, there's pretty significant volatility in these child poverty estimates. I'll rebuild this chart, using a 3-year moving average with the `zoo::rollmean()` function.

```{r combined_acs_data2, include=TRUE}
combined_acs_data2 <- combined_acs_data %>% 
  group_by(county) %>%
  mutate(u5_perc_poverty_3_yr_moving_avg = rollmean(u5_perc_in_poverty, k=3, fill=NA, align='right'))
```

```{r define_ojsd2}
ojs_define(ojsd2 = combined_acs_data2)
```

```{ojs plot_ojs_line2, include=TRUE, echo=FALSE}
Plot.plot({
  <!-- using options from here to learn: https://observablehq.com/plot/features/facets -->
  width: 1200,
  x: {nice: true},
  <!-- y: {inset: 5}, -->
  color: {type: "categorical"},
  y: {
    grid: true,
    label: "Child poverty rate (%)",
    domain: [0, 100]
  },
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(transpose(ojsd2), {
    x: "year", 
    fx: "region",
    y: d => d.u5_perc_poverty_3_yr_moving_avg * 100, 
    z: "county", 
    stroke: "region",
    tip: true})
  ]
})
```

```{r combined_acs_data3, include=FALSE}
# If your goal is to communicate change over time, the variability year-over-year might not be necessary. That's where a slope chart comes in! With that chart time, you're summarizing the information by showing only your first and last values, and the linear change between those years.

# combined_acs_data3 <- combined_acs_data %>% 
#   group_by(county, region) %>% 
#   filter(year %in% c('2009', '2022'))
```

```{r facet_slope_chart, include=FALSE}
# combined_acs_data3 %>% 
#   ggplot(.,
#          aes(x=year,
#              y=u5_perc_in_poverty,
#              group=county)) + 
#   geom_line() + 
#   facet_wrap(~region) + 
#   my.theme
```




# Conclusion

In this first `tidycensus::` post, I demonstrated:

-   How to fetch data from the U.S. Census Bureau
-   A simple way to search for the type of data that you're interested
    in exploring
-   How to use some of the `tidycensus::` functions and arguments to
    support in data wrangling
-   How to make a simple map using the `usmap::` package
-   How to make a clean and visually appealing table using the `gt::`
    package

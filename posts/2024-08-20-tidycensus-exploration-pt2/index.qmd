---
title: "Part Two: Wrangling Census data for longitudinal analysis of child poverty"
description: "This post shows how to fetch many years of data simply, unlocking longitudinal analysis of Census data"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 08-20-2024
categories: [R, tidyverse, tidycensus, api, javascript, purrr] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
image: facet_region.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
editor: 
  markdown: 
    wrap: 72
---

# Introduction

In [Part One](https://mrafa3.github.io/posts/2024-08-13-tidycensus-exploration/), I demonstrated how to fetch data and do some basic analysis of U.S. Census data. Each API call with the `tidycensus::` package can only be for one year of data, so to do longitudinal analysis requires some additional wrangling. In this post, I'll build a script that iterates through the available years, fetches the data, then combines the data into a single dataframe. Then, I'll unpack some of the trends seen in child poverty in Colorado.

## Setup

```{r libraries, include=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidycensus)
library(scales)
library(janitor)
library(gt)
library(zoo)
library(glue)

# census_api_key('INSERT KEY HERE')
```

```{r my.theme, include=TRUE, echo=FALSE}
my.theme <- theme(
  plot.title = ggtext::element_textbox_simple(face="bold", size=24, margin=margin(b=5)),
  plot.subtitle = ggtext::element_textbox_simple(color="#444444", size=14, margin=margin(b=10)),
  plot.caption = ggtext::element_textbox_simple(color="#444444"),
  axis.title = element_text(color="black", face="bold", size=12), 
  axis.text = element_text(color="black", size=18), 
  axis.ticks = element_blank(), 
  plot.background = element_rect(fill = 'white'),
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(), 
  legend.title=element_blank(), 
  legend.text = element_text(color="black", size=12, hjust=0),
  legend.position = 'top',
  strip.text = element_text(color="black", size=14))
```

# Data

For this analysis, I'm interested in looking at the most recent
state-level child poverty data available from the U.S. Census Bureau, and I want to construct a longitudinal sense of the change in child poverty. 

First, let's revisit the different American Community Survey products -- **ACS-1** and **ACS-5**.

*What's the difference between these, and how do you choose which survey product to use for your purposes?*


| Feature                    | ACS 1-Year Estimates                                 | ACS 5-Year Estimates                               |
|----------------------------|-----------------------------------------------------|---------------------------------------------------|
| Data Collection Period      | 12 months                                           | 60 months                                         |
| Population Coverage         | Areas with 65,000 or more people                    | All geographic areas, including those with fewer than 65,000 people |
| Sample Size                 | Smallest                                            | Largest                                           |
| Reliability                 | Less reliable due to smaller sample size            | More reliable due to larger sample size            |
| Currency                    | Most current data                                   | Less current, includes older data                 |
| Release Frequency           | Annually                                            | Annually                                          |
| Best Used For               | Analyzing large populations, when currency is more important than precision | Analyzing small populations, where precision is more important than currency |
| Example Usage               | Examining recent economic changes                   | Examining trends in small geographic areas or small population subgroups |


In Part One, I wanted to fetch the most recent, reliable estimates for state-level and county-level poverty data, which led me to use the 5-year estimates. For this post, I am interested in constructing a longitudinal dataset of the most recent year-on-year estimates. If I again used the 5-year estimates, I would be comparing results across years that include much of the same sampling period (as shown in the graphic below).

![The ACS-5 product has a 60-month sampling period for each annual release, meaning that 48 months of sampling overlap with each annual ACS-5 release[^1]](acs_sample_explained.png)

[^1]: Screenshot taken from the ACS 2018 Handbook, found here: https://www.census.gov/content/dam/Census/library/publications/2018/acs/acs_general_handbook_2018_ch03.pdf.

For this analysis, I'll use the 1-year estimates from the American Community Survey, which will limit my ability to analyze changes in geographic units with populations greater than 65,000.

As I did in Part One, I'll use the following series from the American Community Survey:

-   *B01001_003*: Estimate!!Total:!!Male:!!Under 5 years (all racial
    groups)
-   *B01001_027*: Estimate!!Total:!!Female:!!Under 5 years (all racial
    groups)
-   *B17001_004*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Male:!!Under 5 years
-   *B17001_018*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Female:!!Under 5 years

## Fetching from the `tidycensus::` API

```{r year_acs, include=TRUE}
years <- seq(2005, 2022) %>% 
  # no 2020 data from the ACS
  setdiff(2020)
```

Next, I'll define a function to fetch the ACS data for each year in the vector.

```{r fetch_poverty_data, include=TRUE}
# Define a function to fetch ACS data for a given year
fetch_acs_data <- function(year) {
  get_acs(geography = "county", 
          state = "Colorado",
          survey = 'acs1',
          variables = c('B01001_003', 'B01001_027', 'B17001_004', 'B17001_018'),
          year = year,
          output = 'wide')
}
```

Then, I'll map the years vector to the `fetch_acs_data()` function that I created.

```{r acs_data_list, include=TRUE}
# Use map() to apply fetch_acs_data to each year
acs_data_list <- map(years, fetch_acs_data)
```

## Data wrangling

Then, I'll create a `year` field for each dataframe in the list, so that I can create one, multi-year dataframe.

```{r map2_acs_data_list, include=TRUE}
acs_data_list <- map2(acs_data_list, years, ~ mutate(.x, year = .y))
```

Now, I'll bind all of the ACS years together into a single dataframe for analysis.

```{r combined_acs_data, include=TRUE}
combined_acs_data <- bind_rows(acs_data_list)
```

```{r extract_acs_data, include=FALSE}
# If I wanted to write each year to the global environment, here's how
# extract_acs_data <- function(data_list, prefix = "acs_") {
#   walk2(
#     names(data_list),
#     data_list,
#     ~ assign(paste0(prefix, .x), .y, envir = .GlobalEnv)
#   )
# }

# extract_acs_data(acs_data_list)
```

Then, I'll follow the same data wrangling steps from Part One:

*  Updating the column names to be more user-friendly

```{r update_colnames, include=TRUE}
name_cols <- c('geoid', 'county_state', 
               'u5_male_estimate', 'u5_male_moe', 
               'u5_female_estimate', 'u5_female_moe',
               'u5_male_pov_estimate', 'u5_male_pov_moe',
               'u5_female_pov_estimate', 'u5_female_pov_moe',
               'year')

colnames(combined_acs_data) <- name_cols
```

```{r drop_cols, include=FALSE}
# *  Dropping the margin of error fields
# combined_acs_data <- combined_acs_data %>% 
#   select(-contains("moe"))
```

*  Creating some fields to combine gender-based poverty estimates and calculate a percent of the child population measure

```{r df_mutate, include=TRUE, results='hide'}
combined_acs_data <- combined_acs_data %>% 
  mutate(u5_pop_total = u5_male_estimate + u5_female_estimate,
         u5_pov_total = u5_male_pov_estimate + u5_female_pov_estimate,
         u5_perc_in_poverty = u5_pov_total / u5_pop_total)
```

*  Creating a `county` field that cleans the `county_state` field to only include the county name

```{r mutate_county_name, include=TRUE}
combined_acs_data <- combined_acs_data %>% 
  mutate(county = str_remove(county_state, " County.*")) %>% 
  select(county, everything())
```

*  Reading in a table that maps Colorado's counties to a region of the state

```{r read_colorado_regions, include=TRUE}
colorado_regions <- read_csv('.//data/colorado_regions.csv', show_col_types = FALSE) %>%
  mutate(region = as.factor(region))
```

*  (Finally) creating the `combined_acs_data` dataframe for longitudinal analysis

```{r join_colorado_regions, include=TRUE}
combined_acs_data <- combined_acs_data %>% 
  left_join(x=.,
            y=colorado_regions,
            by='county')
```

# Analysis 

```{r gender_colors, include=TRUE, echo=FALSE}
gender_cols <- c(
  "Female" = "#eb4729", 
  "Male" = "#1b909a"
)
```

```{r viz_text, include=TRUE, echo=FALSE}
title_text <- 'Child poverty estimates for Colorado counties'
subtitle_text <- glue("<span style='color:#eb4729'>**Female**</span> and <span style='color:#1b909a'>**Male**</span> poverty, point estimates and margins of error")
caption_text <- glue('Source: American Community Survey 2022 1-year estimate<br>ACS-1 estimates only available for counties with more than 65,000 people')
```


```{r plot_margin_error, include=TRUE, fig.width=10, fig.height=6.2, fig.align='center'}
combined_acs_data %>%
  select(county, year, 
         u5_male_pov_estimate, u5_male_pov_moe, u5_female_pov_estimate, u5_female_pov_moe) %>% 
  filter(year == 2022) %>%
  pivot_longer(
    cols = 3:6,
    names_to = "variable",
    values_to = "estimate"
  ) %>%
  mutate(gender = if_else(str_detect(variable, "female"), "Female", "Male"),
         variable_type = if_else(str_detect(variable, "moe"), "moe", "estimate")) %>%
  select(-variable) %>% 
  spread(variable_type, estimate) %>% 
  ggplot(.,
         aes(x=estimate, 
             y=reorder(county, estimate), 
             color=gender)) +
  # facet_wrap(~year) + 
  geom_point(position = position_dodge(width = 1)) +
  geom_errorbarh(aes(xmin=estimate - moe, 
                     xmax=estimate + moe), 
                 height = 0.4,
                 position = position_dodge(width = 1)) +
  labs(y='',
       x='',
       caption=caption_text) + 
  ggtitle(title_text,
          subtitle=subtitle_text) + 
  scale_x_continuous(labels = comma) + 
  scale_color_manual(values = gender_cols) + 
  my.theme + 
  theme(legend.position = 'none')
```
```{r plot_connected_scatter, include=TRUE}
# connected scatter
combined_acs_data %>% 
  filter(county == 'Denver') %>% 
  ggplot(.,
         aes(x=u5_female_pov_estimate, 
             y=u5_male_pov_estimate)) +
  geom_point() +
  geom_text(aes(label=year)) + 
  geom_segment(aes(
       xend=c(tail(u5_female_pov_estimate, n=-1), NA), 
       yend=c(tail(u5_male_pov_estimate, n=-1), NA)),
       color='gray90') + 
  # facet_wrap(~county, ncol = 1) + 
  my.theme
```


```{r combined_acs_data3, include=FALSE}
# If your goal is to communicate change over time, the variability year-over-year might not be necessary. That's where a slope chart comes in! With that chart time, you're summarizing the information by showing only your first and last values, and the linear change between those years.

# combined_acs_data3 <- combined_acs_data %>% 
#   group_by(county, region) %>% 
#   filter(year %in% c('2009', '2022'))
```

```{r facet_slope_chart, include=FALSE}
# combined_acs_data3 %>% 
#   ggplot(.,
#          aes(x=year,
#              y=u5_perc_in_poverty,
#              group=county)) + 
#   geom_line() + 
#   facet_wrap(~region) + 
#   my.theme
```




# Conclusion

In this `tidycensus::` post, I demonstrated:

-   How to fetch data across multiple years from the U.S. Census Bureau and wrangle the data for longitudinal analysis
-   How to move between R or Python objects and Observable JS objects in Quarto 
-   How to make some simple interactive graphics with Observable Plot

More to come on poverty analysis in future posts!


# Boneyard: Observable Plot

For the graphics, I'll use Observable Plot to build some interactive graphics (this can be done with R, but I want to experiment more with what Javascript can do).

To use Observable Plot in Quarto, you need to first have your data object defined in an Observable JS object, which can be achieved by:

*  Reading in the object directly as an Observable JS object (such as with the `FileAttachment()` function), or
*  Converting your R or Python object using the `ojs_define()` function in an R or Python code chunk

Note that, if you choose the latter (which I'll do here), this object only operates when your site or knitr document is rendered (meaning, it won't execute as a code chunk like you can with R, Python, or SQL in Quarto).

```{r ojs_define_chunk, include=FALSE}
ojs_define(ojsd = combined_acs_data)
```

Then, I'll create a line plot of child poverty by county over time, faceting by region.

```{ojs plot_ojs_line, include=FALSE}
Plot.plot({
  <!-- using options from here to learn: https://observablehq.com/plot/features/facets -->
  title: "Child poverty (%) in Colorado by county",
  caption: "Source: American Community Survey",
  width: 1200,
  heigh: 600,
  x: {nice: true,
      label: "Year",
      ticks: 5,
      tickFormat: d => d.toString(),
      labelFontSize: 50,
      tickSize: 5,
      tickFontSize: 12
  },
  color: {type: "categorical"},
  y: {
    grid: true,
    label: "Child poverty rate (%)",
    domain: [0, 100]
    <!-- labelFontSize: 50, -->
    <!-- tickFontSize: 50 -->
  },
  fx: {
    label: "Region"
    <!-- these are not working -->
    <!-- tickFontSize: 32, -->
    <!-- labelFontSize: 32 -->
  },
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(transpose(ojsd), {
    x: "year", 
    fx: "region",
    y: d => d.u5_perc_in_poverty * 100, 
    z: "county", 
    stroke: "region",
    tip: true})
  ]
})
```

Some comments on the above:

*  There are discussions online that indicate that not all Javascript styling works in Quarto, and this supports that (some font size elements don't seem to work, faceting options, etc.). I'd like to test that in Observable directly, but for now, I'll just note that this is not my *favorite* styling.
*  Aside from the Front Range, which is showing some smooth patterns, there's pretty significant volatility in these child poverty estimates. I'll rebuild this chart, using a 3-year moving average with the `zoo::rollmean()` function.

```{r combined_acs_data2, include=FALSE}
combined_acs_data2 <- combined_acs_data %>% 
  group_by(county) %>%
  mutate(u5_perc_poverty_3_yr_moving_avg = rollmean(u5_perc_in_poverty, k=3, fill=NA, align='right'))
```

```{r define_ojsd2, include=FALSE, echo=FALSE}
ojs_define(ojsd2 = combined_acs_data2)
```

```{ojs plot_ojs_line2, include=FALSE, echo=FALSE}
Plot.plot({
  <!-- using options from here to learn: https://observablehq.com/plot/features/facets -->
  title: "Child poverty (%) in Colorado by county",
  caption: "Source: American Community Survey. Generated 3-year moving average to smooth results.",
  width: 1200,
  x: {nice: true,
      tickFormat: d => d.toString()
      },
  <!-- y: {inset: 5}, -->
  color: {type: "categorical"},
  y: {
    grid: true,
    label: "Child poverty rate (%)",
    domain: [0, 100]
  },
  marks: [
    Plot.ruleY([0]),
    Plot.lineY(transpose(ojsd2), {
    x: "year", 
    fx: "region",
    y: d => d.u5_perc_poverty_3_yr_moving_avg * 100, 
    z: "county", 
    stroke: "region",
    tip: true})
  ]
})
```

```{r define_ojsd3, include=FALSE, echo=FALSE}
ojs_define(ojsd3 = combined_acs_data %>% filter(region == 'Front Range'))
```

```{ojs plot_ojs_line3, include=FALSE}
Plot.plot({
  <!-- using options from here to learn: https://observablehq.com/plot/features/facets -->
  title: "Child poverty (%) in Colorado by county: Front Range",
  caption: "Source: American Community Survey",
  width: 1200,
  heigh: 600,
  x: {nice: true,
      label: "Year",
      ticks: 5,
      tickFormat: d => d.toString(),
      labelFontSize: 40,
      tickSize: 5,
      tickFontSize: 12
  },
  color: {type: "categorical"},
  y: {
    grid: true,
    label: "Child poverty rate (%)",
    domain: [0, 40]
    <!-- labelFontSize: 50, -->
    <!-- tickFontSize: 50 -->
  },
  marks: [
    Plot.tip(
      [`Starting in x, `],
      {x: 2014, y: 30, dy: -3, anchor: "bottom"}),
    Plot.text(ojsd3, {
        x: "year",
        y:  d => d.u5_perc_in_poverty * 100, 
        z: "county",
        text: "county",
        textAnchor: "start",
        dx: 3
      }),
    Plot.ruleY([0]),
    Plot.lineY(transpose(ojsd3), {
    x: "year", 
    y: d => d.u5_perc_in_poverty * 100, 
    z: "county", 
    stroke: "county",
    tip: true})
  ]
})
```

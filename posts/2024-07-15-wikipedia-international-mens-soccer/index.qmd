---
title: "Building beautiful tables with the gt:: package in R"
description: "This post outlines how to quickly scrape and clean data from Wikipedia and build a beautiful table in R"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 12-23-2022
categories: [R, web-scraping, gt, sports] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
image: tbl_top_scorers.png
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

# Introduction

## Purpose
In this project, I wanted to experiment with the `gt::` package to create a beautiful table using R. This code will walk through scraping a table from Wikipedia of the top international goal scorers in men's soccer history.

## Setup and data preparation

Required packages: 

```{r setup, include=TRUE, message=FALSE}
library(tidyverse)
library(janitor)
library(scales)
library(ggtext)
library(htmltools)
library(sysfonts)
library(showtext)
library(rvest)
library(gt)
library(sysfonts)
library(showtext)
library(countrycode)
```

Data.world has a dataset that consists of country names and URLs associated with `.svg` images of their national flags, which I'd like to include within the table for extra style.

```{r flag_db, include=TRUE}
flag_db <- read.csv("https://query.data.world/s/cnheo22w5mwowz2tfxrbb3z2i3mzya?dws=00000", header=TRUE, stringsAsFactors=FALSE) %>% 
  #Convert country names into 3-letter country codes
  mutate(Code = countrycode(sourcevar = Country, origin = "country.name", destination = "iso3c", warn = FALSE)) %>% 
  select(Country, flag_URL = ImageURL)
```

## Scrape Wikipedia Data 

```{r url, include=TRUE}
url_goals <- 'https://en.wikipedia.org/wiki/List_of_men%27s_footballers_with_50_or_more_international_goals'
```

```{r scrape_wiki, include=TRUE}
(raw <- url_goals %>%
  rvest::read_html() %>%
  rvest::html_nodes(xpath='//*[@id="mw-content-text"]/div[1]/table[2]') %>% 
  html_table() %>% 
  .[[1]] %>% 
  clean_names())
```

For data cleaning of this Wiki table, we need to:
*  Remove all footnotes within the table
*  Convert all chr columns to numeric values
*  Re-code one of the confederation values so that it's clean for the by confederation table

```{r data_cleaning, include=TRUE}
(raw <- raw %>% 
  #Remove extra spaces in nation to clean this column
  mutate(nation = str_replace_all(str_trim(nation), "\\s+", " ")) %>%
  mutate(nation = case_when(
    str_detect(nation, "^Hungary\\s+Spain$") ~ "Hungary",
    #re-coding this as United Kingdom to bring in flag
    str_detect(nation, "^England\\s+England\\s+amateurs$") ~ "United Kingdom",
    TRUE ~ nation
  )) %>%
  mutate(confederation = case_when(
    confederation == "AFC / OFC[h]" ~ "AFC",
    TRUE ~ confederation)) %>% 
  #remove footnotes and transform columns to numeric values
  mutate_at(vars(player, career_span, goals, caps, goalsper_match), 
            ~ str_remove(., "\\[.*\\]")) %>% 
  mutate_at(vars(goals, caps, goalsper_match), 
            as.numeric) %>% 
  left_join(flag_db, by = c('nation' = 'Country')) %>% 
  select(flag_URL, everything()))
```

# Data Prep

Now that I have the data scraped and cleaned, I'm interested in making some tables using the `::gt()` package. Tables are great for communicating summary information, so I'll first build a graphic of the top 12 international goal scorers of all time.

```{r join_flag_db, include=TRUE}
df_top_scorers <- raw %>% 
  slice(1:12)
```

Then, I'll extract the min and max values from the table for conditional formatting of the table.

```{r min_max_goals, include=TRUE}
min_goals <- df_top_scorers$goals %>% min()
max_goals <- df_top_scorers$goals %>% max()

goals_palette <- col_numeric(c("lightgreen", "darkgreen"), 
                             domain = c(min_goals, max_goals), 
                             alpha = .75)
```

For the first table, I'll put the columns and styling in place first. I'm going to build a table that includes the `flag_url` column -- which is messy at first -- and then I'll use a function to render the flag graphics from those URLs. [This](https://liamdbailey.com/posts/2020-11-27-making-beautiful-tables-with-gt/) blog post is excellent -- it showed me how to do this step-by-step.

```{r data_prep, include=TRUE, warning=FALSE}
(tbl_top_scorers <- df_top_scorers %>% 
  select(rank, player, career_span, flag_URL, nation, goals, caps, goalsper_match) %>% 
  gt() %>% 
  #rename columns
  cols_label(rank = 'Rank',
             player = 'Name',
             career_span = 'Career Span',
             nation = 'Country',
             goals = 'Total Goals Scored',
             caps = 'Matches',
             goalsper_match = 'Goals per Match') %>% 
  #add table title
  tab_header(title = md("**Total Goals Scored in Men's International Soccer Matches**")) %>% 
  tab_source_note(source_note = "Data from Wikipedia") %>% 
  #apply new style to all column headers
  tab_style(
    locations = cells_column_labels(columns = everything()),
    style = list(
      #thick border
      cell_borders(sides = "bottom", weight = px(3)),
      #make text bold
      cell_text(weight = "bold")
    )
  ) %>% 
  #apply different style to title
  tab_style(locations = cells_title(groups = "title"),
            style = list(
              cell_text(weight = "bold", size = 24)
            )) %>% 
  data_color(columns = c(goals),
             colors = goals_palette) %>% 
  opt_all_caps() %>% 
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) %>% 
  tab_options(
    #remove border between column headers and title
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    #remove border around the table
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    #adjust font sizes and alignment
    source_notes.font.size = 12,
    heading.align = "left"
  ))
```


```{r function_render_flags, include=TRUE}
(tbl_top_scorers <- tbl_top_scorers %>% 
    text_transform(
    #Apply a function to a column
    locations = cells_body(c(flag_URL)),
    fn = function(x) {
      #Return an image of set dimensions
      web_image(
        url = x,
        height = 12
      )
    }
  ) %>% 
  #Hide column header flag_URL and reduce width
  cols_width(c(flag_URL) ~ px(30)) %>% 
  cols_label(flag_URL = ""))
```

# Top scorers by confederation or continent

Next, I'd like to see who are the top-5 all-time goal scorers by confederation.

```{r top_5_by_confed, include=TRUE}
(df_scorers_by_confed <- raw %>% 
  filter(!is.na(goals)) %>% 
  group_by(confederation) %>% 
  slice(1:5))
```

```{r min_max_goals2, include=TRUE}
#re-run the min_goals and max_goals functions
min_goals <- df_scorers_by_confed$goals %>% min(na.rm = TRUE)
max_goals <- df_scorers_by_confed$goals %>% max(na.rm = TRUE)

goals_palette <- col_numeric(c("lightgreen", "darkgreen"), 
                             domain = c(min_goals, max_goals), 
                             alpha = .75)
```

```{r}
(tbl_scorers_by_confed <- df_scorers_by_confed %>% 
  select(rank, player, career_span, flag_URL, nation, goals, caps, goalsper_match, confederation) %>% 
  gt(groupname_col = "confederation") %>% 
    cols_label(rank = 'Global Rank',
             player = 'Name',
             career_span = 'Career Span',
             nation = 'Country',
             goals = 'Total Goals Scored',
             caps = 'Matches',
             goalsper_match = 'Goals per Match') %>% 
  #add table title
  tab_header(title = md("**Total Goals Scored in Men's International Soccer Matches**")) %>% 
  tab_source_note(source_note = "Data from Wikipedia") %>% 
  #apply new style to all column headers
  tab_style(
    locations = cells_column_labels(columns = everything()),
    style = list(
      #thick border
      cell_borders(sides = "bottom", weight = px(3)),
      #make text bold
      cell_text(weight = "bold")
    )
  ) %>% 
  #apply different style to title
  tab_style(locations = cells_title(groups = "title"),
            style = list(
              cell_text(weight = "bold", size = 24)
            )) %>% 
  data_color(columns = c(goals),
             colors = goals_palette) %>% 
  opt_all_caps() %>% 
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) %>% 
  tab_options(
    #remove border between column headers and title
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    #remove border around the table
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    #adjust font sizes and alignment
    source_notes.font.size = 12,
    heading.align = "left"
  ) %>% 
  text_transform(
    #Apply a function to a column
    locations = cells_body(c(flag_URL)),
    fn = function(x) {
      #Return an image of set dimensions
      web_image(
        url = x,
        height = 12
      )
    }
  ) %>% 
  #Hide column header flag_URL and reduce width
  cols_width(c(flag_URL) ~ px(30)) %>% 
  cols_label(flag_URL = ""))
```
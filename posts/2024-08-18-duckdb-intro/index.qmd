---
title: "Using DuckDB as an in-memory database in R"
description: "This post uses the tidycensus package to access the Census API and visualize data"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 08-13-2024
categories: [R, tidyverse, duckdb, environment] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
# image: us_child_poverty_map.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
editor: 
  markdown: 
    wrap: 72
---

# Introduction

[DuckDB](https://duckdb.org/why_duckdb#simple) is an in-process SQL database management system designed for fast and efficient data analysis. It's particularly advantageous for data analysts due to its seamless integration with popular programming languages like Python and R, allowing easy querying of large datasets directly from within those environments. DuckDB's columnar storage format and vectorized execution enable high-performance analytics on large datasets without the need for complex setups, making it an ideal choice for exploratory data analysis, interactive queries, and handling structured data efficiently on local machines.

For this project, I wanted to explore the advantages of using DuckDB in an analysis workflow, using the `duckdb::` package.

# Data



https://www.epa.gov/outdoor-air-quality-data/air-data-daily-air-quality-tracker

The `RAQSAPI::` package provides a streamlined interface for accessing air quality data from the U.S. EPA's Air Quality System Data Mart API, handling tasks like formatting requests, parsing JSON responses, and managing API rate limits.[^1] It allows users to easily retrieve and analyze large-scale air quality datasets directly within R.

[^1]: CRAN documentation can be found at: https://cran.r-project.org/web/packages/RAQSAPI/vignettes/RAQSAPIvignette.html#:~:text=RAQSAPI%20is%20a%20package%20for,of%20ambient%20air%20pollution%20data.

In this project, I'd like to retrieve air quality data from the EPA and understand how air quality has changed in the Denver area over time. 

# Setup

## Libraries 

```{r libraries, include=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
library(duckdb)
library(janitor)
library(microbenchmark)
# library(RAQSAPI)
# library(keyring)
# library(raqs)
```

```{r raqs_setup, include=TRUE, echo=FALSE}
raqs::set_aqs_user(email = "mrafa3.du@gmail.com",
                   key = )
```


## API credentials, Fetching, and Duckdb setup

```{r}
RAQSAPI::aqs_sign_up("mickey.rafa3@gmail.com")
RAQSAPI::aqs_credentials()

raqs::aqs_signup("mickey.rafa3@gmail.com")

?aqs_sign_up()
```


```{r}
con <- DBI::dbConnect(duckdb(), path = ":memory:")

# airquality <- copy_to(con, airquality %>% clean_names(), overwrite = TRUE)
```

```{r}
# make an in-memory db and store the connection in a variable
con <- dbConnect(duckdb::duckdb())

# write our prices data to duckdb table
table_name <- "airquality"
duckdb::dbWriteTable(con, table_name, airquality)

copy_to(con, airquality, overwrite = TRUE)

```

```{r test_dplyr, include=TRUE}
test_dplyr <- airquality %>% 
  group_by(month) %>% 
  summarise_all(mean, na.rm=TRUE) %>% 
  collect()
```

```{r test_duckdb_query, include=TRUE}
test_duckdb_query <- dbGetQuery(con, 
           "SELECT 
              month,
              avg(ozone) as avg_ozone,
              avg(solar_r) as avg_solar_r,
              avg(wind) as avg_wind,
              avg(temp) as avg_temp
           FROM airquality
           GROUP BY month")
```

# Runtime showdown: duckdb vs. dplyr 

```{r microbenchmark_test, include=TRUE, warning=FALSE}
microbenchmark(
  code1 = test_dplyr,
  code2 = test_duckdb_query,
  times = 100L  # Number of iterations to run
)
```

# Conclusion


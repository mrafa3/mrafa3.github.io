---
title: "Exploring the tidycensus R package"
description: "This post uses the tidycensus package to access the Census API and visualize data"
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 08-13-2024
categories: [R, tidyverse, mapping] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
# image: map_example.png
draft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
editor: 
  markdown: 
    wrap: 72
---

# Introduction


## Setup

```{r my.theme, include=TRUE}
my.theme <- theme(
  plot.title = ggtext::element_textbox_simple(face="bold", size=24, margin=margin(b=5)),
  plot.subtitle = ggtext::element_textbox_simple(color="#444444", size=14, margin=margin(b=10)),
  plot.caption = ggtext::element_textbox_simple(color="#444444"),
  axis.title = element_text(color="black", face="bold", size=12), 
  axis.text = element_text(color="black", size=18), 
  axis.ticks.y = element_blank(), 
  plot.background = element_rect(fill = 'white'),
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(), 
  legend.title=element_blank(), 
  legend.text = element_text(color="black", size=12, hjust=0),
  legend.position = 'top',
  strip.text = element_text(color="black", size=14))

my.theme.map <- theme(
  plot.title = element_text(family="Gill Sans", color="#666666", face="bold", size=16, hjust=.5), 
  plot.subtitle = element_text(family="Gill Sans", color="#666666", size=14, hjust=.5), 
  axis.title = element_blank(),
  axis.text = element_blank(),
  axis.ticks = element_blank(), 
  axis.line = element_blank(),
  plot.caption = element_text(family="Gill Sans", color="#666666", size=12), 
  panel.background =  element_blank(), 
  legend.title = element_text(family="Gill Sans", color="#666666", size=14, hjust=.5),
  legend.text = element_text(family="Gill Sans", color="#666666", size=12, hjust=0))
```

```{r libraries, include=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidycensus)
library(scales)

# census_api_key('INSERT KEY HERE')
```

For this analysis, I'm interested in looking at the most recent state-level child poverty data available from the U.S. Census Bureau. The `tidycensus::` package allows API access to the decennial Census, as well as the more frequent American Community Survey (ACS).

The `tidycensus::load_variables()` function provides a simple way to query the available data within each product. Combining this with `stringr::str_detect()` is a nice way to search through the tens of thousands of data series that are available through the U.S. Census API.

```{r inspect_variables, include=TRUE}
load_variables(2022, "acs1", cache = TRUE) %>% 
  # used this to search for some Under 5 years variables of interest
  filter(str_detect(label, "Under 5 years"))
```

For this demo, I'll use the following series:

* *B01001_003*: Estimate!!Total:!!Male:!!Under 5 years (all racial groups)
* *B01001_027*: Estimate!!Total:!!Female:!!Under 5 years (all racial groups)
* *B17001_004*: Estimate!!Total:!!Income in the past 12 months below poverty level:!!Male:!!Under 5 years
* *B17001_018*: Estimate!!Total:!!Income in the past 12 months below poverty level:!!Female:!!Under 5 years

## Initial tour of key tidycensus::get_acs() function 

The `tidycensus::` package has so much to offer (and I still have plenty to learn!). There are a bunch of useful helper functions/arguments to assist in fetching data. Some noteworthy ones include:  

* Each variable returns the geography, an estimate, and the margin of error ("moe"). Geographies can span from states, regions and the country as a whole, down to areas like school districts, voting districts, census block groups, and many others.
* `summary_var=`: often the variable that you want would be made more meaningful as a ratio or with a demonminator. For example, the number of children in poverty could be useful on its own, but you're likely to want to see that series as a percent of the total children. With the summary_var argument, you can tell the function which secondary variable you want to grab in the same API call.
* `ouput=wide`: related to the above, I wanted to look at child poverty in a way that would require multiple summary variables (e.g. the percent of girls *and* boys in poverty). Since you can only have one summary variable, `output='wide'` allows you to grab all of the series that you may need in the same call. 

```{r get_acs, include=TRUE}
df <- get_acs(geography = 'state',
        variables = c('B01001_003', 'B01001_027', 'B17001_004', 'B17001_018'),
        year = 2021,
        output = 'wide')
```

To make the data more user-friendly, I'll update the column names of the table.

```{r update_colnames, include=TRUE}
name_cols <- c('geoid', 'state', 
               'u5_male_estimate', 'u5_male_moe', 
               'u5_female_estimate', 'u5_female_moe',
               'u5_male_pov_estimate', 'u5_male_pov_moe',
               'u5_female_pov_estimate', 'u5_female_pov_moe')

colnames(df) <- name_cols
```

And for this exercise, I'll also drop the margin of error fields, since I'm not doing a statistical analysis that would require it.

```{r drop_cols, include=TRUE}
df <- df %>% 
  select(-contains("moe"))
```

```{r df_mutate, include=TRUE}
(df <- df %>% 
  mutate(u5_pop_total = u5_male_estimate + u5_female_estimate,
         u5_pov_total = u5_male_pov_estimate + u5_female_pov_estimate,
         u5_perc_in_poverty = u5_pov_total / u5_pop_total))
```

```{r}
df_rank <- df %>% 
  mutate(rank_u5_poverty = rank(-u5_pov_total),
         state_group = if_else(rank_u5_poverty <= 15, state, 'Remaining States')) %>% 
  group_by(state_group) %>% 
  summarise(u5_pov_total = sum(u5_pov_total))
```

```{r}
df_rank %>% 
  arrange(-u5_pov_total) %>% 
  pull(state_group)

state_order <- c("Texas", "California", "New York", "Florida", "Ohio", "Georgia", "Illinois", 
                 "North Carolina", "Pennsylvania", "Michigan", 
                  "Tennessee", "Louisiana", "Arizona", "Indiana", "New Jersey", "Remaining States")
```


```{r}
df_rank %>% 
  mutate(state_group = factor(state_group, levels = rev(state_order))) %>% 
  ggplot(.,
         aes(x=u5_pov_total,
             y=state_group)) + 
  geom_col()
```

```{r}
library(gt)
```


```{r dot_plot, include=TRUE, fig.width=6.2, fig.height=10, fig.align='center'}
df %>% 
  filter(state != 'Puerto Rico') %>% 
  ggplot(
    aes(x=u5_perc_in_poverty, 
        y=reorder(state, u5_perc_in_poverty))) + 
  geom_point() +
  labs(y='') + 
  ggtitle('Percent of children under five in poverty',
          subtitle = 'from the American Community Survey 2021') + 
  scale_x_continuous(labels = percent) + 
  my.theme
```


# Quick mapping with the usmap:: package 


```{r }
library(usmap)
```

```{r plot_u5_poverty, include=TRUE}
plot_usmap(regions = 'states',
           data = df,
           values = 'u5_perc_in_poverty') + 
  scale_fill_viridis_c() + 
  theme(legend.position = 'top')
```

```{r plot_u5_poverty_2, include=TRUE}
plot_usmap(regions = 'states',
           data = df,
           values = 'u5_pov_total') + 
  scale_fill_viridis_c() + 
  # my.theme.map + 
  theme(legend.position = 'top')
```

```{r test, include=FALSE}
u5poverty_girls <- get_acs(geography = "state", 
                           variables = "B17001_018", 
                           year = 2021) %>% 
  rename(estimate_poverty_pop = estimate,
         moe_poverty_pop = moe)

u5_girls <- get_acs(geography = "state", 
                    variables = "B01001_027", 
                    year = 2021) %>% 
  rename(estimate_pop = estimate,
         moe_pop = moe)

u5_girls %>% 
  left_join(x=.,
            y=u5poverty_girls,
            by=c('GEOID', 'NAME')) %>% 
  select(-c(variable.x, variable.y)) %>% 
  mutate(perc_poverty = estimate_poverty_pop / estimate_pop) %>% 
  ggplot(
    aes(x=perc_poverty, 
        y=reorder(NAME, perc_poverty))) + 
  geom_point() +
  ggtitle('Percent of Girls (U5) in poverty',
          subtitle = 'from the American Community Survey 2021') + 
  scale_x_continuous(labels = percent)
```


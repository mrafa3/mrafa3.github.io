---
title: "Part One: Exploring child poverty data with the tidycensus R package"
description: "This post uses the tidycensus package to access the Census API and visualize data on child poverty in the U.S."
author:
  - name: Mickey Rafa
    url: https://mrafa3.github.io/
    #orcid: 0000-0002-5300-3075
date: 08-13-2024
categories: [R, tidyverse, mapping, gt, tidycensus, api] # self-defined categories
#citation: 
 # url: https://mrafa3.github.io/posts/2024-07-15-wikipedia-international-mens-soccer/ 
code-annotations: hover
image: us_child_poverty_map.png
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
editor: 
  markdown: 
    wrap: 72
---

# Introduction

I've used data from the U.S. Census Bureau several times, and for this
project, I wanted to reacquaint myself with the `tidycensus::` package
to gather and wrangle data. I also wanted to use the `usmap::` package
to generate a simple U.S. map, and the `gt::` package to display the
data in a nice table format.

## Setup

```{r libraries, include=TRUE, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidycensus)
library(scales) # <1>
library(janitor) # <2>
library(glue) # <3>
library(gt) # <4>
library(usmap)

# census_api_key('INSERT KEY HERE', install = TRUE) # <5>
```

1. Loading the `scales::` package to transform ggplot scales simply (some people choose to explicitly define `scales::` in their code rather than loading the library).
2. The `janitor::clean_names()` function tidies the column names of your dataset to use the snake case convention. Very handy!
3. The `glue::` package allows for simple addition of HTML to ggplot graphics.
4. The `gt::` library provides functionality for creating ggplot-esque tables.
5. The first time that you're working with the `tidycensus::` package, you need to request an API key at https://api.census.gov/data/key_signup.html. The `install=` argument will install your personal key to the .Renviron file, and you won't need to use the `census_api_key()` function again.  

```{r my.theme, include=TRUE, echo=FALSE}
my.theme <- theme(
  plot.title = ggtext::element_textbox_simple(face="bold", size=24),
  plot.subtitle = ggtext::element_textbox_simple(color="#444444", size=14),
  plot.caption = ggtext::element_textbox_simple(color="#444444"),
  axis.title = element_text(color="black", face="bold", size=12), 
  axis.text = element_text(color="black", size=18), 
  axis.ticks = element_blank(), 
  plot.background = element_rect(fill = 'white'),
  panel.background = element_blank(),
  panel.grid.major = element_line(color='gray90'),
  # panel.grid.minor = element_blank(),
  panel.border = element_blank(), 
  legend.title=element_blank(), 
  legend.text = element_text(color="black", size=14, hjust=0),
  legend.position = 'top',
  strip.text = element_text(color="black", size=14))
```

## Data

For this analysis, I'm interested in looking at the most recent
state-level child poverty data available from the U.S. Census Bureau.
The `tidycensus::` package allows API access to the decennial Census, as
well as the more frequent American Community Survey (ACS), which I'll use in this project.

If you've worked with ACS data before, you may know that there are a few survey products offered in the ACS suite. Most commonly, the choice of data is between the **1-year estimates** and the **5-year estimates**.

*What's the difference between these, and how do you choose which survey product to use for your purposes?*[^1]


| Feature                    | ACS 1-Year Estimates                                 | ACS 5-Year Estimates                               |
|----------------------------|-----------------------------------------------------|---------------------------------------------------|
| Data Collection Period      | 12 months                                           | 60 months                                         |
| Population Coverage         | Areas with 65,000 or more people                    | All geographic areas, including those with fewer than 65,000 people |
| Sample Size                 | Smallest                                            | Largest                                           |
| Reliability                 | Less reliable due to smaller sample size            | More reliable due to larger sample size            |
| Currency                    | Most current data                                   | Less current, includes older data                 |
| Release Frequency           | Annually                                            | Annually                                          |
| Best Used For               | Analyzing large populations, when currency is more important than precision | Analyzing small populations, where precision is more important than currency |
| Example Usage               | Examining recent economic changes                   | Examining trends in small geographic areas or small population subgroups |

<br>

To start, I am interested in reviewing the most stable, geographically-available data on child poverty. Given that I'm less concerned with recency and more interested in broad availability, the ACS 5-year estimates are what I'll use here.

[^1]: See the Census handbook for great detail: https://www.census.gov/programs-surveys/acs/library/handbooks/general.html.

## Initial tour of key tidycensus::get_acs() function

The `tidycensus::` package has so much to offer (and I still have plenty
to learn!). The `tidycensus::load_variables()` function provides a simple way to
query the available data within each survey. Combining this with
`stringr::str_detect()` is a nice way to search through the tens of
thousands of data series that are available through the U.S. Census API.

```{r inspect_variables, include=TRUE}
load_variables(2022, "acs5", cache = TRUE) %>% 
  filter(str_detect(label, "Under 5 years")) # <6>
```

6. This searches all variable labels for "Under 5 years" to help identify data of interest.

For this demo, I'll use the following series:

-   *B01001_003*: Estimate!!Total:!!Male:!!Under 5 years (all racial
    groups)
-   *B01001_027*: Estimate!!Total:!!Female:!!Under 5 years (all racial
    groups)
-   *B17001_004*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Male:!!Under 5 years
-   *B17001_018*: Estimate!!Total:!!Income in the past 12 months below
    poverty level:!!Female:!!Under 5 years
    
There are a bunch of useful helper functions/arguments to
assist in fetching data from the Census API. Some noteworthy ones include:

-   Each variable returns the geography, an estimate, and the margin of
    error ("moe"). Geographies can span from states, regions and the
    country as a whole, down to areas like school districts, voting
    districts, census block groups, and many others.
-   `survey=`: this defines the produce that you're using of the American Community Survey. Responses can include "acs1", "acs3", or (the default) "acs5".
-   `summary_var=`: often the variable that you want would be made more
    meaningful as a ratio or with a demonminator. For example, the
    number of children in poverty could be useful on its own, but you're
    likely to want to see that series as a percent of the total
    children. With the summary_var argument, you can tell the function
    which secondary variable you want to grab in the same API call.
-   `ouput=wide`: related to the above, I wanted to look at child
    poverty in a way that would require multiple summary variables (e.g.
    the percent of girls *and* boys in poverty). Since you can only have
    one summary variable, `output='wide'` allows you to grab all of the
    series that you may need in the same call.
-   `geometry=TRUE`: this argument returns the geospatial data in tidy format to create quick ggplot-based maps using `geom_sf()`. 

```{r get_acs, include=TRUE}
df <- get_acs(geography = 'state',
        variables = c(male_u5_pop = 'B01001_003', 
                      female_u5_pop = 'B01001_027', 
                      male_u5_poverty = 'B17001_004', 
                      female_u5_poverty = 'B17001_018'),
        survey = 'acs5',
        year = 2022,
        output = 'wide')
```

Next, I'll create some fields to combine gender-based poverty estimates
and calculate a percent of the child population measure.

```{r df_mutate, include=TRUE}
df <- df %>% 
  rename(state = NAME) %>% 
  mutate(total_u5_popE = male_u5_popE + female_u5_popE,
         total_u5_povertyE = male_u5_povertyE + male_u5_povertyE,
         perc_u5_in_poverty = total_u5_povertyE / total_u5_popE)
```

You can combine point estimates for gender-based poverty by simply adding them, but you can't do the same for margins of error. The estimated margins of error for each estimate are based on their respective samples and the uncertainty in them. To re-weight the margins of error, you take the square root of the sum of squared margins of error:

> new_MOE_calc = sqrt(`male_u5_povertyM`^2 + `female_u5_povertyM`^2)

The `tidycensus::moe_sum()` function will calculate the new margin of error for you!

```{r moe_recalc, include=TRUE}
df <- df %>% 
  group_by(state) %>% 
  mutate(total_u5_poverty_MOEcalc = moe_sum(male_u5_povertyM, female_u5_povertyM),
         perc_u5_in_poverty_MOEcalc = total_u5_poverty_MOEcalc / total_u5_popE)
```

```{r viz_text, include=TRUE, echo=FALSE}
title_text <- 'Percent of children in poverty by U.S. state in 2022'
subtitle_text <- glue('Children defined as those 5 years old and younger<br>Point estimates and margins of error')
caption_text <- glue('Source: American Community Survey 2022 5-year estimate<br>Margins of error represent the 90% Confidence Interval<br>Poverty level defined by the Federal Poverty Line')
```

Now, I can visualize the new point estimates and margins of error for child poverty (not specific to gender).

```{r read_regions, include=TRUE, echo=FALSE, message=FALSE}
regions <- read_csv('.//data/census_regions.csv') %>% clean_names()
```

```{r add_regions, include=TRUE, echo=FALSE}
df <- df %>% 
  left_join(x=.,
            y=regions %>% select(state, region, division),
            by='state')
```

```{r region_color, include=FALSE}
region_color <- c(
  'South' = "#66c2a5", 
  'West' = "#fc8d62", 
  'Northeast' = "#8da0cb", 
  'Midwest' = "#e78ac3"
)
```

```{r dot_plot, include=TRUE, fig.width=11, fig.height=18, fig.align='center'}
df %>% 
  filter(state != 'Puerto Rico') %>% # <7>
  ggplot(
    aes(x=perc_u5_in_poverty, 
        y=reorder(state, perc_u5_in_poverty))) + 
  geom_point(size=3) +
  geom_errorbarh(aes(xmin=perc_u5_in_poverty - perc_u5_in_poverty_MOEcalc, 
                     xmax=perc_u5_in_poverty + perc_u5_in_poverty_MOEcalc),
                 height = 0.4) + 
  labs(y='',
       x='',
       caption=caption_text) + 
  ggtitle(title_text,
          subtitle=subtitle_text) + 
  scale_x_continuous(labels = percent,
                     position = 'top') + 
  my.theme
```
7. Removing Puerto Rico because it's not within a U.S. Census region.

# Quick mapping with usmap::

The `usmap::` package makes rendering a map of the US quick and easy.
Though it's not meant to replace `sf::` or packages that allow for more
sophisticated maps, it does allow for a quick way to make a U.S. map.
For this demo, I'll plot the state-level poverty data that I collected
and manipulated in earlier steps.

This shows that child poverty -- those living below the Federal Poverty Line -- is concentrated in southern and southeastern states (as a percent of the child population).

```{r ggplot_map, include=FALSE}
# for this code to work, I'd need to use geometry=TRUE in get_acs()
# df %>%
#   ggplot(aes(fill=perc_u5_in_poverty,
#              color=perc_u5_in_poverty)) +
#   geom_sf() + 
#   scale_fill_viridis_c(labels = percent) + 
#   scale_color_viridis_c(guide = FALSE) + 
#   coord_sf(datum = NA) + 
#   theme_minimal()
```

```{r plot_u5_poverty, include=TRUE, fig.align='center'}
(perc_poverty_map <- plot_usmap(regions = 'states',
           data = df,
           values = 'perc_u5_in_poverty') + 
  scale_fill_viridis_c(option = 'inferno', labels = scales::percent_format()) + 
  labs(title = md("**Estimated child poverty in U.S. states in 2022**"),
       subtitle = "as a % of the total child population under 5 y.o.",
       caption = "Source: 2022 American Community Survey") %>%
  theme(legend.position = 'top',
        legend.title = element_blank()))
```

# Great tables with gt::

```{r create_df_tbl, include=TRUE, fig.width=6.2, fig.height=20, fig.align='center'}
(df_tbl <- df %>% 
  select(state, region, total_u5_povertyE, total_u5_popE, perc_u5_in_poverty) %>% 
  filter(state != 'Puerto Rico') %>% # <7>
  arrange(-perc_u5_in_poverty) %>% 
  # mutate(u5_perc_in_poverty = u5_perc_in_poverty * 100) %>% 
  gt(groupname_col = "region") %>% 
    cols_label(state = 'State',
               total_u5_popE = 'Total children < 5 y.o.',
               total_u5_povertyE = 'Total children < 5 y.o. living in poverty in last 12 mos.',
               perc_u5_in_poverty = '% of children < 5 y.o. living in poverty in last 12 mos.') %>% 
  # formatting numeric fields
  fmt_number(columns = c(total_u5_popE, total_u5_povertyE), decimals = 0, use_seps = TRUE) %>% 
  fmt_percent(columns = perc_u5_in_poverty, decimals = 1) %>%  
  #add table title
  tab_header(title = md("**Estimated child poverty in U.S. states in 2022**"),
             subtitle = "Total and Percent estimates of those living below the Federal Poverty Line") %>% 
  tab_source_note(source_note = "Data from 2022 American Community Survey 5-year estimates from the U.S. Census Bureau") %>% 
  #apply new style to all column headers
  tab_style(
    locations = cells_column_labels(columns = everything()),
    style = list(
      #thick border
      cell_borders(sides = "bottom", weight = px(3)),
      #make text bold
      cell_text(weight = "bold")
    )
  ) %>% 
  #apply different style to title
  tab_style(locations = cells_title(groups = "title"),
            style = list(
              cell_text(weight = "bold", size = 24)
            )) %>% 
  data_color(
    columns = perc_u5_in_poverty,
    palette = viridis::inferno(100)
  ) %>% 
  opt_all_caps() %>% 
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) %>% 
  tab_options(
    #remove border between column headers and title
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    #remove border around the table
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    #adjust font sizes and alignment
    source_notes.font.size = 12,
    heading.align = "left"
  )
)
```

7. Removing Puerto Rico because it's not within a U.S. Census region.

```{r df_county, include=FALSE}
# considering a map like this one: https://observablehq.com/@observablehq/plot-us-bubble-map?intent=fork
df_county <- get_acs(geography = 'county',
        variables = c('B01001_003', 'B01001_027', 'B17001_004', 'B17001_018'),
        survey = 'acs5',
        year = 2022,
        output = 'wide') %>% 
  mutate(
    state_fips = str_sub(GEOID, 1, 2),
    county_fips = str_sub(GEOID, 3, 5)
  )
```

# Deep dive: Colorado results 

```{r get_acs_colorado, include=TRUE}
df_colorado <- get_acs(geography = 'county',
                       # using the state argument to only fetch Colorado
                       state = "Colorado",
                       survey = 'acs5',
                       variables = c(male_u5_pop = 'B01001_003', 
                                     female_u5_pop = 'B01001_027', 
                                     male_u5_poverty = 'B17001_004', 
                                     female_u5_poverty = 'B17001_018'),
                       year = 2022,
                       output = 'wide')
```

```{r df_mutate2, include=TRUE, echo=FALSE}
df_colorado <- df_colorado %>% 
  rename(county_state = NAME) %>%
  mutate(total_u5_popE = male_u5_popE + female_u5_popE,
         total_u5_povertyE = male_u5_povertyE + male_u5_povertyE,
         perc_u5_in_poverty = total_u5_povertyE / total_u5_popE)
```

```{r plot_u5_poverty2, include=TRUE, echo=FALSE, fig.align='center'}
(perc_poverty_map2 <- plot_usmap(regions = 'counties',
                                include = "CO", 
                                data = df_colorado %>% rename(fips = GEOID),
                                values = 'perc_u5_in_poverty') + 
  scale_fill_viridis_c(option = 'inferno', labels = scales::percent_format()) + 
  labs(title = md("**Estimated child poverty in U.S. states in 2022**"),
       subtitle = "as a % of the total child population under 5 y.o.",
       caption = "Source: 2022 American Community Survey") %>%
  theme(legend.position = 'top',
        legend.title = element_blank()))
```

```{r read_co_regions, include=TRUE, echo=FALSE, message=FALSE}
co_regions <- read_csv('.//data/colorado_regions.csv') %>% 
  mutate(region = as.factor(region))
```

```{r clean_df_colorado, include=TRUE, echo=FALSE}
df_colorado <- df_colorado %>%
  mutate(county = str_remove(county_state, " County.*")) %>% 
  select(county, everything()) %>% 
  left_join(x=.,
            y=co_regions,
            by='county') 

# df <- df %>% 
#   mutate(region = factor(region, levels = desired_order))
```


```{r create_df_tbl2, include=TRUE, fig.width=6.2, fig.height=20, fig.align='center'}
(df_tbl2 <- df_colorado %>% 
  select(county, region, total_u5_povertyE, total_u5_popE, perc_u5_in_poverty) %>% 
  arrange(-perc_u5_in_poverty) %>% 
  gt(groupname_col = "region") %>% 
  cols_label(county = 'County',
               total_u5_popE = 'Total children < 5 y.o.',
               total_u5_povertyE = 'Total children < 5 y.o. living in poverty in last 12 mos.',
               perc_u5_in_poverty = '% of children < 5 y.o. living in poverty in last 12 mos.') %>% 
  # formatting numeric fields
  fmt_number(columns = c(total_u5_popE, total_u5_povertyE), decimals = 0, use_seps = TRUE) %>% 
  fmt_percent(columns = perc_u5_in_poverty, decimals = 1) %>%  
  #add table title
  tab_header(title = md("**Estimated child poverty in Colorado by county in 2022**"),
             subtitle = "Total and Percent estimates of those living below the Federal Poverty Line") %>% 
  tab_source_note(source_note = "Data from 2022 American Community Survey 5-year estimates from the U.S. Census Bureau") %>% 
  #apply new style to all column headers
  tab_style(
    locations = cells_column_labels(columns = everything()),
    style = list(
      #thick border
      cell_borders(sides = "bottom", weight = px(3)),
      #make text bold
      cell_text(weight = "bold")
    )
  ) %>% 
  #apply different style to title
  tab_style(locations = cells_title(groups = "title"),
            style = list(
              cell_text(weight = "bold", size = 24)
            )) %>% 
  data_color(
    columns = perc_u5_in_poverty,
    palette = viridis::inferno(100)
  ) %>% 
  opt_all_caps() %>% 
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) %>% 
  tab_options(
    #remove border between column headers and title
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    #remove border around the table
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    #adjust font sizes and alignment
    source_notes.font.size = 12,
    heading.align = "left"
  )
)
```

# Conclusion

In this first `tidycensus::` post, I demonstrated:

-   How to fetch data from the U.S. Census Bureau
-   A simple way to search for the type of data that you're interested
    in exploring
-   How to use some of the `tidycensus::` functions and arguments to
    support in data wrangling, including re-weighting the margin of error  when combining estimates
-   How to make a simple map using the `usmap::` package
-   How to make a clean and visually appealing table using the `gt::`
    package
